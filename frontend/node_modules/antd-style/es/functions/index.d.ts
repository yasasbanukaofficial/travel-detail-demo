/// <reference types="react" />
import { createInstance } from './createInstance';
export { extractStaticStyle } from './extractStaticStyle';
export { setupStyled } from './setupStyled';
export { createInstance };
export declare const createStyles: <Props, Input extends import("..").BaseReturnType = import("..").BaseReturnType>(styleOrGetStyle: import("..").StyleOrGetStyleFn<Input, Props>, options?: import("..").ClassNameGeneratorOption | undefined) => (props?: Props | undefined) => import("..").ReturnStyles<Input>, createGlobalStyle: (...styles: import("..").CSSStyle<import("../factories/createGlobalStyle").GlobalTheme>) => import("react").NamedExoticComponent<object>, createStylish: <Props, Styles extends import("..").BaseReturnType>(cssStyleOrGetCssStyleFn: import("..").StyleOrGetStyleFn<Styles, Props>) => (props?: Props | undefined) => import("..").ReturnStyleToUse<Styles>, css: import("../core").SerializeCSS, cx: import("..").ClassNamesUtil, keyframes: {
    (template: TemplateStringsArray, ...args: import("@emotion/serialize").CSSInterpolation[]): string;
    (...args: import("@emotion/serialize").CSSInterpolation[]): string;
}, 
/**
 * @deprecated
 */
injectGlobal: {
    (template: TemplateStringsArray, ...args: import("@emotion/serialize").CSSInterpolation[]): void;
    (...args: import("@emotion/serialize").CSSInterpolation[]): void;
}, styleManager: import("../core").Emotion, ThemeProvider: <T = any, S = any>(props: import("..").ThemeProviderProps<T, S>) => import("react").ReactNode, StyleProvider: import("react").FC<import("../factories/createStyleProvider").StyleProviderProps>, useTheme: () => import("..").Theme;
