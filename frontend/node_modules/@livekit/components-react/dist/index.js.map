{"version":3,"file":"index.js","sources":["../src/components/controls/ClearPinButton.tsx","../src/components/ConnectionState.tsx","../src/components/controls/StartAudio.tsx","../src/components/LiveKitRoom.tsx","../src/components/participant/AudioVisualizer.tsx","../src/components/ParticipantLoop.tsx","../src/components/RoomName.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useClearPinButton } from '../../hooks';\n\n/** @public */\nexport interface ClearPinButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\n/**\n * The `ClearPinButton` is a basic html button with the added ability to signal\n * the `LayoutContext` that it should display the grid view again.\n * @remarks\n * This component works only inside a `LayoutContext`.\n *\n * @example\n * ```tsx\n * <LiveKitRoom>\n *   <ClearPinButton>Back to grid view</ClearPinButton>\n * </LiveKitRoom>\n * ```\n * @public\n */\nexport const ClearPinButton: (\n  props: ClearPinButtonProps & React.RefAttributes<HTMLButtonElement>,\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<HTMLButtonElement, ClearPinButtonProps>(\n  function ClearPinButton(props: ClearPinButtonProps, ref) {\n    const { buttonProps } = useClearPinButton(props);\n    return (\n      <button ref={ref} {...buttonProps}>\n        {props.children}\n      </button>\n    );\n  },\n);\n","import type { Room } from 'livekit-client';\nimport * as React from 'react';\nimport { useConnectionState } from '../hooks';\n\n/** @public */\nexport interface ConnectionStatusProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * The room from which the connection status should be displayed.\n   */\n  room?: Room;\n}\n\n/**\n * The `ConnectionState` component displays the connection status of the room as strings\n * (`\"connected\" | \"connecting\" | \"disconnected\" | \"reconnecting\"`).\n *\n * @example\n * ```tsx\n * <LiveKitRoom>\n *   <ConnectionState />\n * </LiveKitRoom>\n * ```\n * @public\n */\nexport const ConnectionState: (\n  props: ConnectionStatusProps & React.RefAttributes<HTMLDivElement>,\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<HTMLDivElement, ConnectionStatusProps>(\n  function ConnectionState({ room, ...props }: ConnectionStatusProps, ref) {\n    const connectionState = useConnectionState(room);\n    return (\n      <div ref={ref} {...props}>\n        {connectionState}\n      </div>\n    );\n  },\n);\n","import * as React from 'react';\nimport { useRoomContext } from '../../context';\nimport { useStartAudio } from '../../hooks';\n\n/** @public */\nexport interface AllowAudioPlaybackProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  label: string;\n}\n\n/**\n * The `StartAudio` component is only visible when the browser blocks audio playback. This is due to some browser implemented autoplay policies.\n * To start audio playback, the user must perform a user-initiated event such as clicking this button.\n * As soon as audio playback starts, the button hides itself again.\n *\n * @example\n * ```tsx\n * <LiveKitRoom>\n *   <StartAudio label=\"Click to allow audio playback\" />\n * </LiveKitRoom>\n * ```\n *\n * @see Autoplay policy on MDN web docs: {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Best_practices#autoplay_policy}\n * @public\n */\nexport const StartAudio: (\n  props: AllowAudioPlaybackProps & React.RefAttributes<HTMLButtonElement>,\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<HTMLButtonElement, AllowAudioPlaybackProps>(\n  function StartAudio({ label = 'Allow Audio', ...props }: AllowAudioPlaybackProps, ref) {\n    const room = useRoomContext();\n    const { mergedProps } = useStartAudio({ room, props });\n\n    return (\n      <button ref={ref} {...mergedProps}>\n        {label}\n      </button>\n    );\n  },\n);\n","import type {\n  AudioCaptureOptions,\n  DisconnectReason,\n  RoomConnectOptions,\n  RoomOptions,\n  ScreenShareCaptureOptions,\n  VideoCaptureOptions,\n} from 'livekit-client';\nimport type { MediaDeviceFailure, Room } from 'livekit-client';\nimport * as React from 'react';\nimport { type FeatureFlags, LKFeatureContext, RoomContext } from '../context';\nimport { useLiveKitRoom } from '../hooks';\n\n/** @public */\nexport interface LiveKitRoomProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onError'> {\n  /**\n   * URL to the LiveKit server.\n   * For example: `wss://<domain>.livekit.cloud`\n   * To simplify the implementation, `undefined` is also accepted as an intermediate value, but only with a valid string url can the connection be established.\n   */\n  serverUrl: string | undefined;\n  /**\n   * A user specific access token for a client to authenticate to the room.\n   * This token is necessary to establish a connection to the room.\n   * To simplify the implementation, `undefined` is also accepted as an intermediate value, but only with a valid string token can the connection be established.\n   *\n   * @see https://docs.livekit.io/cloud/project-management/keys-and-tokens/#generating-access-tokens\n   */\n  token: string | undefined;\n  /**\n   * Publish audio immediately after connecting to your LiveKit room.\n   * @defaultValue `false`\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/AudioCaptureOptions.html\n   */\n  audio?: AudioCaptureOptions | boolean;\n  /**\n   * Publish video immediately after connecting to your LiveKit room.\n   * @defaultValue `false`\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/VideoCaptureOptions.html\n   */\n  video?: VideoCaptureOptions | boolean;\n  /**\n   * Publish screen share immediately after connecting to your LiveKit room.\n   * @defaultValue `false`\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/ScreenShareCaptureOptions.html\n   */\n  screen?: ScreenShareCaptureOptions | boolean;\n  /**\n   * If set to true a connection to LiveKit room is initiated.\n   * @defaultValue `true`\n   */\n  connect?: boolean;\n  /**\n   * Options for when creating a new room.\n   * When you pass your own room instance to this component, these options have no effect.\n   * Instead, set the options directly in the room instance.\n   *\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/RoomOptions.html\n   */\n  options?: RoomOptions;\n  /**\n   * Define options how to connect to the LiveKit server.\n   *\n   * @see https://docs.livekit.io/client-sdk-js/interfaces/RoomConnectOptions.html\n   */\n  connectOptions?: RoomConnectOptions;\n  onConnected?: () => void;\n  onDisconnected?: (reason?: DisconnectReason) => void;\n  onError?: (error: Error) => void;\n  onMediaDeviceFailure?: (failure?: MediaDeviceFailure, kind?: MediaDeviceKind) => void;\n  onEncryptionError?: (error: Error) => void;\n  /**\n   * Optional room instance.\n   * By passing your own room instance you overwrite the `options` parameter,\n   * make sure to set the options directly on the room instance itself.\n   */\n  room?: Room;\n\n  simulateParticipants?: number | undefined;\n\n  /**\n   * @internal\n   */\n  featureFlags?: FeatureFlags;\n}\n\n/**\n * The `LiveKitRoom` component provides the room context to all its child components.\n * It is generally the starting point of your LiveKit app and the root of the LiveKit component tree.\n * It provides the room state as a React context to all child components, so you don't have to pass it yourself.\n *\n * @example\n * ```tsx\n * <LiveKitRoom\n *  token='<livekit-token>'\n *  serverUrl='<url-to-livekit-server>'\n *  connect={true}\n * >\n *     ...\n * </LiveKitRoom>\n * ```\n * @public\n */\nexport const LiveKitRoom: (\n  props: React.PropsWithChildren<LiveKitRoomProps> & React.RefAttributes<HTMLDivElement>,\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<\n  HTMLDivElement,\n  React.PropsWithChildren<LiveKitRoomProps>\n>(function LiveKitRoom(props: React.PropsWithChildren<LiveKitRoomProps>, ref) {\n  const { room, htmlProps } = useLiveKitRoom(props);\n  return (\n    <div ref={ref} {...htmlProps}>\n      {room && (\n        <RoomContext.Provider value={room}>\n          <LKFeatureContext.Provider value={props.featureFlags}>\n            {props.children}\n          </LKFeatureContext.Provider>\n        </RoomContext.Provider>\n      )}\n    </div>\n  );\n});\n","import * as React from 'react';\nimport { type TrackReference } from '@livekit/components-core';\nimport { useEnsureTrackRef } from '../../context';\nimport { useMultibandTrackVolume } from '../../hooks';\n\n/**\n * @public\n * @deprecated Use BarVisualizer instead\n */\nexport interface AudioVisualizerProps extends React.HTMLAttributes<SVGElement> {\n  trackRef?: TrackReference;\n}\n\n/**\n * The AudioVisualizer component is used to visualize the audio volume of a given audio track.\n * @remarks\n * Requires a `TrackReferenceOrPlaceholder` to be provided either as a property or via the `TrackRefContext`.\n * @example\n * ```tsx\n * <AudioVisualizer />\n * ```\n * @public\n * @deprecated Use BarVisualizer instead\n */\nexport const AudioVisualizer: (\n  props: AudioVisualizerProps & React.RefAttributes<SVGSVGElement>,\n) => React.ReactNode = /* @__PURE__ */ React.forwardRef<SVGSVGElement, AudioVisualizerProps>(\n  function AudioVisualizer({ trackRef, ...props }: AudioVisualizerProps, ref) {\n    const svgWidth = 200;\n    const svgHeight = 90;\n    const barWidth = 6;\n    const barSpacing = 4;\n    const volMultiplier = 50;\n    const barCount = 7;\n    const trackReference = useEnsureTrackRef(trackRef);\n\n    const volumes = useMultibandTrackVolume(trackReference, { bands: 7, loPass: 300 });\n\n    return (\n      <svg\n        ref={ref}\n        width=\"100%\"\n        height=\"100%\"\n        viewBox={`0 0 ${svgWidth} ${svgHeight}`}\n        {...props}\n        className=\"lk-audio-visualizer\"\n      >\n        <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" />\n        <g\n          style={{\n            transform: `translate(${(svgWidth - barCount * (barWidth + barSpacing)) / 2}px, 0)`,\n          }}\n        >\n          {volumes.map((vol, idx) => (\n            <rect\n              key={idx}\n              x={idx * (barWidth + barSpacing)}\n              y={svgHeight / 2 - (vol * volMultiplier) / 2}\n              width={barWidth}\n              height={vol * volMultiplier}\n            ></rect>\n          ))}\n        </g>\n      </svg>\n    );\n  },\n);\n","import type { Participant } from 'livekit-client';\nimport * as React from 'react';\nimport { ParticipantContext } from '../context';\nimport { cloneSingleChild } from '../utils';\n\n/** @public */\nexport interface ParticipantLoopProps {\n  /** The participants to loop over. Use `useParticipants()` hook to get participants. */\n  participants: Participant[];\n  /** The template component to be used in the loop. */\n  children: React.ReactNode;\n}\n\n/**\n * The `ParticipantLoop` component loops over an array of participants to create a context for every participant.\n * This component takes exactly one child component as a template.\n * By providing your own template as a child you have full control over the look and feel of your participant representations.\n *\n * @remarks\n * If you want to loop over individual tracks instead of participants, you can use the `TrackLoop` component.\n *\n * @example\n * ```tsx\n * const participants = useParticipants();\n * <ParticipantLoop participants={participants}>\n *   <ParticipantName />\n * </ParticipantLoop>\n * ```\n * @public\n */\nexport function ParticipantLoop({ participants, ...props }: ParticipantLoopProps) {\n  return (\n    <>\n      {participants.map((participant) => (\n        <ParticipantContext.Provider value={participant} key={participant.identity}>\n          {cloneSingleChild(props.children)}\n        </ParticipantContext.Provider>\n      ))}\n    </>\n  );\n}\n","import * as React from 'react';\nimport { useRoomInfo } from '../hooks';\n\n/** @public */\nexport interface RoomNameProps extends React.HTMLAttributes<HTMLSpanElement> {\n  childrenPosition?: 'before' | 'after';\n}\n\n/**\n * The `RoomName` component renders the name of the connected LiveKit room inside a span tag.\n *\n * @example\n * ```tsx\n * <LiveKitRoom>\n *   <RoomName />\n * </LiveKitRoom>\n * ```\n * @public\n *\n * @param props - RoomNameProps\n */\nexport const RoomName: React.FC<RoomNameProps & React.RefAttributes<HTMLSpanElement>> =\n  /* @__PURE__ */ React.forwardRef<HTMLSpanElement, RoomNameProps>(function RoomName(\n    { childrenPosition = 'before', children, ...htmlAttributes }: RoomNameProps,\n    ref,\n  ) {\n    const { name } = useRoomInfo();\n\n    return (\n      <span ref={ref} {...htmlAttributes}>\n        {childrenPosition === 'before' && children}\n        {name}\n        {childrenPosition === 'after' && children}\n      </span>\n    );\n  });\n"],"names":["ClearPinButton","React","props","ref","buttonProps","useClearPinButton","ConnectionState","room","connectionState","useConnectionState","StartAudio","label","useRoomContext","mergedProps","useStartAudio","LiveKitRoom","htmlProps","useLiveKitRoom","RoomContext","LKFeatureContext","AudioVisualizer","trackRef","trackReference","useEnsureTrackRef","volumes","useMultibandTrackVolume","vol","idx","ParticipantLoop","participants","participant","ParticipantContext","cloneSingleChild","RoomName","childrenPosition","children","htmlAttributes","name","useRoomInfo"],"mappings":"2gBAoBaA,EAEgCC,EAAA,WAC3C,SAAwBC,EAA4BC,EAAK,CACvD,KAAM,CAAE,YAAAC,CAAA,EAAgBC,EAAA,kBAAkBH,CAAK,EAC/C,uBACG,SAAO,CAAA,IAAAC,EAAW,GAAGC,CAAA,EACnBF,EAAM,QACT,CAAA,CAGN,ECPaI,EAEgCL,EAAA,WAC3C,SAAyB,CAAE,KAAAM,EAAM,GAAGL,CAAA,EAAgCC,EAAK,CACjE,MAAAK,EAAkBC,qBAAmBF,CAAI,EAC/C,OACGN,EAAA,cAAA,MAAA,CAAI,IAAAE,EAAW,GAAGD,GAChBM,CACH,CAAA,CAGN,ECXaE,EAEgCT,EAAA,WAC3C,SAAoB,CAAE,MAAAU,EAAQ,cAAe,GAAGT,GAAkCC,EAAK,CACrF,MAAMI,EAAOK,EAAAA,eAAe,EACtB,CAAE,YAAAC,CAAY,EAAIC,EAAAA,cAAc,CAAE,KAAAP,EAAM,MAAAL,EAAO,EAErD,OACGD,EAAA,cAAA,SAAA,CAAO,IAAAE,EAAW,GAAGU,GACnBF,CACH,CAAA,CAGN,ECkEaI,EAEgCd,EAAA,WAG3C,SAAqBC,EAAkDC,EAAK,CAC5E,KAAM,CAAE,KAAAI,EAAM,UAAAS,GAAcC,EAAAA,eAAef,CAAK,EAE9C,OAAAD,EAAA,cAAC,OAAI,IAAAE,EAAW,GAAGa,GAChBT,GACCN,EAAA,cAACiB,EAAAA,YAAY,SAAZ,CAAqB,MAAOX,GAC1BN,EAAA,cAAAkB,EAAAA,iBAAiB,SAAjB,CAA0B,MAAOjB,EAAM,YACrC,EAAAA,EAAM,QACT,CACF,CAEJ,CAEJ,CAAC,ECjGYkB,EAEgCnB,EAAA,WAC3C,SAAyB,CAAE,SAAAoB,EAAU,GAAGnB,CAAA,EAA+BC,EAAK,CAOpE,MAAAmB,EAAiBC,oBAAkBF,CAAQ,EAE3CG,EAAUC,0BAAwBH,EAAgB,CAAE,MAAO,EAAG,OAAQ,IAAK,EAG/E,OAAArB,EAAA,cAAC,MAAA,CACC,IAAAE,EACA,MAAM,OACN,OAAO,OACP,QAAS,aACR,GAAGD,EACJ,UAAU,qBAAA,EAEVD,EAAA,cAAC,QAAK,EAAE,IAAI,EAAE,IAAI,MAAM,OAAO,OAAO,MAAO,CAAA,EAC7CA,EAAA,cAAC,IAAA,CACC,MAAO,CACL,UAAW,cAAc,IAAW,EAAY,IAA0B,CAAC,QAAA,CAC7E,EAECuB,EAAQ,IAAI,CAACE,EAAKC,IACjB1B,EAAA,cAAC,OAAA,CACC,IAAK0B,EACL,EAAGA,EAAO,GACV,EAAG,GAAY,EAAKD,EAAM,GAAiB,EAC3C,MAAO,EACP,OAAQA,EAAM,EAAA,CAEjB,CAAA,CAAA,CAEL,CAAA,CAGN,ECpCO,SAASE,EAAgB,CAAE,aAAAC,EAAc,GAAG3B,GAA+B,CAChF,uCAEK2B,EAAa,IAAKC,GACjB7B,EAAA,cAAC8B,EAAAA,mBAAmB,SAAnB,CAA4B,MAAOD,EAAa,IAAKA,EAAY,QAC/D,EAAAE,mBAAiB9B,EAAM,QAAQ,CAClC,CACD,CACH,CAEJ,CCnBO,MAAM+B,EACKhC,EAAM,WAA2C,SAC/D,CAAE,iBAAAiC,EAAmB,SAAU,SAAAC,EAAU,GAAGC,CAAe,EAC3DjC,EACA,CACM,KAAA,CAAE,KAAAkC,CAAK,EAAIC,cAAY,EAG3B,OAAArC,EAAA,cAAC,OAAK,CAAA,IAAAE,EAAW,GAAGiC,CAAA,EACjBF,IAAqB,UAAYC,EACjCE,EACAH,IAAqB,SAAWC,CACnC,CAEJ,CAAC"}