{"version":3,"file":"shared-DXC9VBzT.js","sources":["../src/hooks/internal/useResizeObserver.ts","../src/hooks/internal/useObservableState.ts","../src/context/chat-context.ts","../src/context/pin-context.ts","../src/context/layout-context.ts","../src/context/track-reference-context.ts","../src/context/participant-context.ts","../../../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs","../src/mergeProps.ts","../src/hooks/useConnectionQualityIndicator.ts","../src/hooks/useConnectionStatus.ts","../src/hooks/useDisconnectButton.ts","../src/hooks/useFacingMode.ts","../src/hooks/useFocusToggle.ts","../src/hooks/useGridLayout.ts","../src/hooks/useIsMuted.ts","../src/hooks/useIsSpeaking.ts","../src/utils.ts","../src/hooks/useLocalParticipantPermissions.ts","../src/hooks/useMediaDeviceSelect.ts","../src/hooks/useMediaDevices.ts","../src/hooks/useVisualStableUpdate.ts","../src/hooks/usePagination.ts","../src/hooks/useParticipantTile.ts","../src/hooks/usePinnedTracks.ts","../src/hooks/useStartAudio.ts","../src/hooks/useStartVideo.ts","../src/hooks/useSwipe.ts","../src/hooks/useChatToggle.ts","../src/hooks/useTrackMutedIndicator.ts","../src/hooks/useTrackToggle.ts","../src/hooks/useTracks.ts","../src/hooks/useChat.ts","../src/hooks/usePersistentUserChoices.ts","../src/hooks/useIsEncrypted.ts","../src/hooks/useTrackVolume.ts"],"sourcesContent":["/* eslint-disable no-return-assign */\n/* eslint-disable no-underscore-dangle */\nimport * as React from 'react';\n\nconst useLatest = <T>(current: T) => {\n  const storedValue = React.useRef(current);\n  React.useEffect(() => {\n    storedValue.current = current;\n  });\n  return storedValue;\n};\n\n/**\n * A React hook that fires a callback whenever ResizeObserver detects a change to its size\n * code extracted from https://github.com/jaredLunde/react-hook/blob/master/packages/resize-observer/src/index.tsx in order to not include the polyfill for resize-observer\n *\n * @internal\n */\nexport function useResizeObserver<T extends HTMLElement>(\n  target: React.RefObject<T>,\n  callback: UseResizeObserverCallback,\n) {\n  const resizeObserver = getResizeObserver();\n  const storedCallback = useLatest(callback);\n\n  React.useLayoutEffect(() => {\n    let didUnsubscribe = false;\n\n    const targetEl = target.current;\n    if (!targetEl) return;\n\n    function cb(entry: ResizeObserverEntry, observer: ResizeObserver) {\n      if (didUnsubscribe) return;\n      storedCallback.current(entry, observer);\n    }\n\n    resizeObserver?.subscribe(targetEl as HTMLElement, cb);\n\n    return () => {\n      didUnsubscribe = true;\n      resizeObserver?.unsubscribe(targetEl as HTMLElement, cb);\n    };\n  }, [target.current, resizeObserver, storedCallback]);\n\n  return resizeObserver?.observer;\n}\n\nfunction createResizeObserver() {\n  let ticking = false;\n  let allEntries: ResizeObserverEntry[] = [];\n\n  const callbacks: Map<unknown, Array<UseResizeObserverCallback>> = new Map();\n\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  const observer = new ResizeObserver((entries: ResizeObserverEntry[], obs: ResizeObserver) => {\n    allEntries = allEntries.concat(entries);\n    if (!ticking) {\n      window.requestAnimationFrame(() => {\n        const triggered = new Set<Element>();\n        for (let i = 0; i < allEntries.length; i++) {\n          if (triggered.has(allEntries[i].target)) continue;\n          triggered.add(allEntries[i].target);\n          const cbs = callbacks.get(allEntries[i].target);\n          cbs?.forEach((cb) => cb(allEntries[i], obs));\n        }\n        allEntries = [];\n        ticking = false;\n      });\n    }\n    ticking = true;\n  });\n\n  return {\n    observer,\n    subscribe(target: HTMLElement, callback: UseResizeObserverCallback) {\n      observer.observe(target);\n      const cbs = callbacks.get(target) ?? [];\n      cbs.push(callback);\n      callbacks.set(target, cbs);\n    },\n    unsubscribe(target: HTMLElement, callback: UseResizeObserverCallback) {\n      const cbs = callbacks.get(target) ?? [];\n      if (cbs.length === 1) {\n        observer.unobserve(target);\n        callbacks.delete(target);\n        return;\n      }\n      const cbIndex = cbs.indexOf(callback);\n      if (cbIndex !== -1) cbs.splice(cbIndex, 1);\n      callbacks.set(target, cbs);\n    },\n  };\n}\n\nlet _resizeObserver: ReturnType<typeof createResizeObserver>;\n\nconst getResizeObserver = () =>\n  !_resizeObserver ? (_resizeObserver = createResizeObserver()) : _resizeObserver;\n\nexport type UseResizeObserverCallback = (\n  entry: ResizeObserverEntry,\n  observer: ResizeObserver,\n) => unknown;\n\nexport const useSize = (target: React.RefObject<HTMLDivElement>) => {\n  const [size, setSize] = React.useState({ width: 0, height: 0 });\n  React.useLayoutEffect(() => {\n    if (target.current) {\n      const { width, height } = target.current.getBoundingClientRect();\n      setSize({ width, height });\n    }\n  }, [target.current]);\n\n  const resizeCallback = React.useCallback(\n    (entry: ResizeObserverEntry) => setSize(entry.contentRect),\n    [],\n  );\n  // Where the magic happens\n  useResizeObserver(target, resizeCallback);\n  return size;\n};\n","import * as React from 'react';\n// @ts-ignore\nimport type { Observable } from 'rxjs';\n\n/**\n * @internal\n */\nexport function useObservableState<T>(\n  observable: Observable<T> | undefined,\n  startWith: T,\n  resetWhenObservableChanges = true,\n) {\n  const [state, setState] = React.useState<T>(startWith);\n  React.useEffect(() => {\n    if (resetWhenObservableChanges) {\n      setState(startWith);\n    }\n    // observable state doesn't run in SSR\n    if (typeof window === 'undefined' || !observable) return;\n    const subscription = observable.subscribe(setState);\n    return () => subscription.unsubscribe();\n  }, [observable, resetWhenObservableChanges]);\n  return state;\n}\n","import type { WidgetState } from '@livekit/components-core';\nimport type * as React from 'react';\n\n/** @internal */\nexport type ChatContextAction =\n  | { msg: 'show_chat' }\n  | { msg: 'hide_chat' }\n  | { msg: 'toggle_chat' }\n  | { msg: 'unread_msg'; count: number }\n  | { msg: 'toggle_settings' };\n\n/** @internal */\nexport type WidgetContextType = {\n  dispatch?: React.Dispatch<ChatContextAction>;\n  state?: WidgetState;\n};\n\n/** @internal */\nexport function chatReducer(state: WidgetState, action: ChatContextAction): WidgetState {\n  if (action.msg === 'show_chat') {\n    return { ...state, showChat: true, unreadMessages: 0 };\n  } else if (action.msg === 'hide_chat') {\n    return { ...state, showChat: false };\n  } else if (action.msg === 'toggle_chat') {\n    const newState = { ...state, showChat: !state.showChat };\n    if (newState.showChat === true) {\n      newState.unreadMessages = 0;\n    }\n    return newState;\n  } else if (action.msg === 'unread_msg') {\n    return { ...state, unreadMessages: action.count };\n  } else if (action.msg === 'toggle_settings') {\n    return { ...state, showSettings: !state.showSettings };\n  } else {\n    return { ...state };\n  }\n}\n","import type { PinState, TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport type * as React from 'react';\n\n/** @internal */\nexport type PinAction =\n  | {\n      msg: 'set_pin';\n      trackReference: TrackReferenceOrPlaceholder;\n    }\n  | { msg: 'clear_pin' };\n\n/** @internal */\nexport type PinContextType = {\n  dispatch?: React.Dispatch<PinAction>;\n  state?: PinState;\n};\n\n/** @internal */\nexport function pinReducer(state: PinState, action: PinAction): PinState {\n  if (action.msg === 'set_pin') {\n    return [action.trackReference];\n  } else if (action.msg === 'clear_pin') {\n    return [];\n  } else {\n    return { ...state };\n  }\n}\n","import { PIN_DEFAULT_STATE, WIDGET_DEFAULT_STATE } from '@livekit/components-core';\nimport * as React from 'react';\nimport type { PinContextType } from './pin-context';\nimport type { WidgetContextType } from './chat-context';\nimport { chatReducer } from './chat-context';\nimport { pinReducer } from './pin-context';\n\n/** @public */\nexport type LayoutContextType = {\n  pin: PinContextType;\n  widget: WidgetContextType;\n};\n\n/** @public */\nexport const LayoutContext = React.createContext<LayoutContextType | undefined>(undefined);\n\n/**\n * Ensures that a layout context is provided via context.\n * If no layout context is provided, an error is thrown.\n * @public\n */\nexport function useLayoutContext(): LayoutContextType {\n  const layoutContext = React.useContext(LayoutContext);\n  if (!layoutContext) {\n    throw Error('Tried to access LayoutContext context outside a LayoutContextProvider provider.');\n  }\n  return layoutContext;\n}\n\n/**\n * Ensures that a layout context is provided, either via context or explicitly as a parameter.\n * If not inside a `LayoutContext` and no layout context is provided, an error is thrown.\n * @public\n */\nexport function useEnsureLayoutContext(layoutContext?: LayoutContextType) {\n  const layout = useMaybeLayoutContext();\n  layoutContext ??= layout;\n  if (!layoutContext) {\n    throw Error('Tried to access LayoutContext context outside a LayoutContextProvider provider.');\n  }\n  return layoutContext;\n}\n\n/** @public */\nexport function useCreateLayoutContext(): LayoutContextType {\n  const [pinState, pinDispatch] = React.useReducer(pinReducer, PIN_DEFAULT_STATE);\n  const [widgetState, widgetDispatch] = React.useReducer(chatReducer, WIDGET_DEFAULT_STATE);\n  return {\n    pin: { dispatch: pinDispatch, state: pinState },\n    widget: { dispatch: widgetDispatch, state: widgetState },\n  };\n}\n\n/** @public */\nexport function useEnsureCreateLayoutContext(layoutContext?: LayoutContextType): LayoutContextType {\n  const [pinState, pinDispatch] = React.useReducer(pinReducer, PIN_DEFAULT_STATE);\n  const [widgetState, widgetDispatch] = React.useReducer(chatReducer, WIDGET_DEFAULT_STATE);\n  return (\n    layoutContext ?? {\n      pin: { dispatch: pinDispatch, state: pinState },\n      widget: { dispatch: widgetDispatch, state: widgetState },\n    }\n  );\n}\n\n/**\n * Returns a layout context from the `LayoutContext` if it exists, otherwise `undefined`.\n * @public\n */\nexport function useMaybeLayoutContext(): LayoutContextType | undefined {\n  return React.useContext(LayoutContext);\n}\n","import type { TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport * as React from 'react';\n\n/**\n * This context provides a `TrackReferenceOrPlaceholder` to all child components.\n * @public\n */\nexport const TrackRefContext = React.createContext<TrackReferenceOrPlaceholder | undefined>(\n  undefined,\n);\n\n/**\n * Ensures that a track reference is provided via context.\n * If not inside a `TrackRefContext`, an error is thrown.\n * @public\n */\nexport function useTrackRefContext() {\n  const trackReference = React.useContext(TrackRefContext);\n  if (!trackReference) {\n    throw Error('tried to access track context outside of track context provider');\n  }\n  return trackReference;\n}\n\n/**\n * Returns a track reference from the `TrackRefContext` if it exists, otherwise `undefined`.\n * @public\n */\nexport function useMaybeTrackRefContext() {\n  return React.useContext(TrackRefContext);\n}\n\n/**\n * Ensures that a track reference is provided, either via context or explicitly as a parameter.\n * If not inside a `TrackRefContext` and no track reference is provided, an error is thrown.\n * @public\n */\nexport function useEnsureTrackRef(trackRef?: TrackReferenceOrPlaceholder) {\n  const context = useMaybeTrackRefContext();\n  const ref = trackRef ?? context;\n  if (!ref) {\n    throw new Error(\n      'No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly',\n    );\n  }\n  return ref;\n}\n","import type { Participant } from 'livekit-client';\nimport * as React from 'react';\nimport { useMaybeTrackRefContext } from './track-reference-context';\n\n/** @public */\nexport const ParticipantContext = React.createContext<Participant | undefined>(undefined);\n\n/**\n * Ensures that a participant is provided via context.\n * If not inside a `ParticipantContext`, an error is thrown.\n * @public\n */\nexport function useParticipantContext() {\n  const participant = React.useContext(ParticipantContext);\n  if (!participant) {\n    throw Error('tried to access participant context outside of participant context provider');\n  }\n  return participant;\n}\n\n/**\n * Returns a participant from the `ParticipantContext` if it exists, otherwise `undefined`.\n * @public\n */\nexport function useMaybeParticipantContext() {\n  return React.useContext(ParticipantContext);\n}\n\n/**\n * Ensures that a participant is provided, either via context or explicitly as a parameter.\n * If not inside a `ParticipantContext` and no participant is provided, an error is thrown.\n * @public\n */\nexport function useEnsureParticipant(participant?: Participant) {\n  const context = useMaybeParticipantContext();\n  const trackContext = useMaybeTrackRefContext();\n  const p = participant ?? context ?? trackContext?.participant;\n  if (!p) {\n    throw new Error(\n      'No participant provided, make sure you are inside a participant context or pass the participant explicitly',\n    );\n  }\n  return p;\n}\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport clsx from 'clsx';\n\n/**\n * Calls all functions in the order they were chained with the same arguments.\n * @internal\n */\nexport function chain(...callbacks: any[]): (...args: any[]) => void {\n  return (...args: any[]) => {\n    for (const callback of callbacks) {\n      if (typeof callback === 'function') {\n        try {\n          callback(...args);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n  };\n}\n\ninterface Props {\n  [key: string]: any;\n}\n\n// taken from: https://stackoverflow.com/questions/51603250/typescript-3-parameter-list-intersection-type/51604379#51604379\ntype TupleTypes<T> = { [P in keyof T]: T[P] } extends { [key: number]: infer V } ? V : never;\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void\n  ? I\n  : never;\n\n/**\n * Merges multiple props objects together. Event handlers are chained,\n * classNames are combined, and ids are deduplicated - different ids\n * will trigger a side-effect and re-render components hooked up with `useId`.\n * For all other props, the last prop object overrides all previous ones.\n * @param args - Multiple sets of props to merge together.\n * @internal\n */\nexport function mergeProps<T extends Props[]>(...args: T): UnionToIntersection<TupleTypes<T>> {\n  // Start with a base clone of the first argument. This is a lot faster than starting\n  // with an empty object and adding properties as we go.\n  const result: Props = { ...args[0] };\n  for (let i = 1; i < args.length; i++) {\n    const props = args[i];\n    for (const key in props) {\n      const a = result[key];\n      const b = props[key];\n\n      // Chain events\n      if (\n        typeof a === 'function' &&\n        typeof b === 'function' &&\n        // This is a lot faster than a regex.\n        key[0] === 'o' &&\n        key[1] === 'n' &&\n        key.charCodeAt(2) >= /* 'A' */ 65 &&\n        key.charCodeAt(2) <= /* 'Z' */ 90\n      ) {\n        result[key] = chain(a, b);\n\n        // Merge classnames, sometimes classNames are empty string which eval to false, so we just need to do a type check\n      } else if (\n        (key === 'className' || key === 'UNSAFE_className') &&\n        typeof a === 'string' &&\n        typeof b === 'string'\n      ) {\n        result[key] = clsx(a, b);\n      } else {\n        result[key] = b !== undefined ? b : a;\n      }\n    }\n  }\n\n  return result as UnionToIntersection<TupleTypes<T>>;\n}\n","import { setupConnectionQualityIndicator } from '@livekit/components-core';\nimport type { Participant } from 'livekit-client';\nimport { ConnectionQuality } from 'livekit-client';\nimport * as React from 'react';\nimport { useEnsureParticipant } from '../context';\nimport { useObservableState } from './internal';\n\n/** @public */\nexport interface ConnectionQualityIndicatorOptions {\n  participant?: Participant;\n}\n\n/**\n * The `useConnectionQualityIndicator` hook provides props for the `ConnectionQualityIndicator` or your custom implementation of it component.\n * @example\n * ```tsx\n * const { quality } = useConnectionQualityIndicator();\n * // or\n * const { quality } = useConnectionQualityIndicator({ participant });\n * ```\n * @public\n */\nexport function useConnectionQualityIndicator(options: ConnectionQualityIndicatorOptions = {}) {\n  const p = useEnsureParticipant(options.participant);\n\n  const { className, connectionQualityObserver } = React.useMemo(\n    () => setupConnectionQualityIndicator(p),\n    [p],\n  );\n\n  const quality = useObservableState(connectionQualityObserver, ConnectionQuality.Unknown);\n\n  return { className, quality };\n}\n","import { connectionStateObserver } from '@livekit/components-core';\nimport type { Room } from 'livekit-client';\nimport * as React from 'react';\nimport { useEnsureRoom } from '../context';\nimport { useObservableState } from './internal';\n\n/**\n * The `useConnectionState` hook allows you to simply implement your own `ConnectionState` component.\n *\n * @example\n * ```tsx\n * const connectionState = useConnectionState(room);\n * ```\n * @public\n */\nexport function useConnectionState(room?: Room) {\n  // passed room takes precedence, if not supplied get current room context\n  const r = useEnsureRoom(room);\n  const observable = React.useMemo(() => connectionStateObserver(r), [r]);\n  const connectionState = useObservableState(observable, r.state);\n  return connectionState;\n}\n","import { setupDisconnectButton } from '@livekit/components-core';\nimport { ConnectionState } from 'livekit-client';\nimport * as React from 'react';\nimport type { DisconnectButtonProps } from '../components';\nimport { useRoomContext } from '../context';\nimport { mergeProps } from '../mergeProps';\nimport { useConnectionState } from './useConnectionStatus';\n\n/**\n * The `useDisconnectButton` hook is used to implement the `DisconnectButton` or your\n * custom implementation of it. It adds onClick handler to the button to disconnect\n * from the room.\n *\n * @example\n * ```tsx\n * const { buttonProps } = useDisconnectButton(buttonProps);\n * return <button {...buttonProps}>Disconnect</button>;\n * ```\n * @public\n */\nexport function useDisconnectButton(props: DisconnectButtonProps) {\n  const room = useRoomContext();\n  const connectionState = useConnectionState(room);\n\n  const buttonProps = React.useMemo(() => {\n    const { className, disconnect } = setupDisconnectButton(room);\n    const mergedProps = mergeProps(props, {\n      className,\n      onClick: () => disconnect(props.stopTracks ?? true),\n      disabled: connectionState === ConnectionState.Disconnected,\n    });\n    return mergedProps;\n  }, [room, props, connectionState]);\n\n  return { buttonProps };\n}\n","import type { TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport { LocalTrackPublication, facingModeFromLocalTrack } from 'livekit-client';\n\n/**\n * Try to determine the `facingMode` of a local participant video track.\n * @remarks\n * Works only on local video tracks.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode | MDN docs on facingMode}\n * @alpha\n */\nexport function useFacingMode(\n  trackReference: TrackReferenceOrPlaceholder,\n): 'user' | 'environment' | 'left' | 'right' | 'undefined' {\n  if (trackReference.publication instanceof LocalTrackPublication) {\n    const localTrack = trackReference.publication.track;\n    if (localTrack) {\n      const { facingMode } = facingModeFromLocalTrack(localTrack);\n      return facingMode;\n    }\n  }\n  return 'undefined';\n}\n","import type { TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport { setupFocusToggle, isTrackReferencePinned } from '@livekit/components-core';\nimport { useEnsureTrackRef, useMaybeLayoutContext } from '../context';\nimport { mergeProps } from '../mergeProps';\nimport * as React from 'react';\n\n/** @public */\nexport interface UseFocusToggleProps {\n  trackRef?: TrackReferenceOrPlaceholder;\n  props: React.ButtonHTMLAttributes<HTMLButtonElement>;\n}\n\n/**\n * The `useFocusToggle` hook is used to implement the `FocusToggle` or your custom implementation of it.\n * The `TrackReferenceOrPlaceholder` is used to register a onClick handler and to identify the track to focus on.\n *\n * @example\n * ```tsx\n * const { mergedProps, inFocus } = useFocusToggle({ trackRef, props: yourButtonProps });\n * return <button {...mergedProps}>{inFocus ? 'Unfocus' : 'Focus'}</button>;\n * ```\n * @public\n */\nexport function useFocusToggle({ trackRef, props }: UseFocusToggleProps) {\n  const trackReference = useEnsureTrackRef(trackRef);\n\n  const layoutContext = useMaybeLayoutContext();\n  const { className } = React.useMemo(() => setupFocusToggle(), []);\n\n  const inFocus: boolean = React.useMemo(() => {\n    return isTrackReferencePinned(trackReference, layoutContext?.pin.state);\n  }, [trackReference, layoutContext?.pin.state]);\n\n  const mergedProps = React.useMemo(\n    () =>\n      mergeProps(props, {\n        className,\n        onClick: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n          // Call user defined on click callbacks.\n          props.onClick?.(event);\n\n          // Set or clear focus based on current focus state.\n          if (inFocus) {\n            layoutContext?.pin.dispatch?.({\n              msg: 'clear_pin',\n            });\n          } else {\n            layoutContext?.pin.dispatch?.({\n              msg: 'set_pin',\n              trackReference,\n            });\n          }\n        },\n      }),\n    [props, className, trackReference, inFocus, layoutContext?.pin],\n  );\n\n  return { mergedProps, inFocus };\n}\n","import { GRID_LAYOUTS, selectGridLayout } from '@livekit/components-core';\nimport type { GridLayoutDefinition, GridLayoutInfo } from '@livekit/components-core';\nimport * as React from 'react';\nimport { useSize } from './internal';\n\n/**\n * The `useGridLayout` hook tries to select the best layout to fit all tiles.\n * If the available screen space is not enough, it will reduce the number of maximum visible\n * tiles and select a layout that still works visually within the given limitations.\n * As the order of tiles changes over time, the hook tries to keep visual updates to a minimum\n * while trying to display important tiles such as speaking participants or screen shares.\n *\n * @example\n * ```tsx\n * const { layout } = useGridLayout(gridElement, trackCount);\n * ```\n * @public\n */\nexport function useGridLayout(\n  /** HTML element that contains the grid. */\n  gridElement: React.RefObject<HTMLDivElement>,\n  /** Count of tracks that should get layed out */\n  trackCount: number,\n  options: {\n    gridLayouts?: GridLayoutDefinition[];\n  } = {},\n): { layout: GridLayoutInfo; containerWidth: number; containerHeight: number } {\n  const gridLayouts = options.gridLayouts ?? GRID_LAYOUTS;\n  const { width, height } = useSize(gridElement);\n  const layout = selectGridLayout(gridLayouts, trackCount, width, height);\n\n  React.useEffect(() => {\n    if (gridElement.current && layout) {\n      gridElement.current.style.setProperty('--lk-col-count', layout?.columns.toString());\n      gridElement.current.style.setProperty('--lk-row-count', layout?.rows.toString());\n    }\n  }, [gridElement, layout]);\n\n  return {\n    layout,\n    containerWidth: width,\n    containerHeight: height,\n  };\n}\n","import {\n  type TrackReferenceOrPlaceholder,\n  getTrackReferenceId,\n  mutedObserver,\n} from '@livekit/components-core';\nimport type { Participant, Track } from 'livekit-client';\nimport * as React from 'react';\nimport { useEnsureParticipant } from '../context';\n\n/** @public */\nexport interface UseIsMutedOptions {\n  participant?: Participant;\n}\n\n/**\n * The `useIsMuted` hook is used to implement the `TrackMutedIndicator` or your custom implementation of it.\n * It returns a `boolean` that indicates if the track is muted or not.\n *\n * @example With a track reference\n * ```tsx\n * const isMuted = useIsMuted(track);\n * ```\n *\n * @example With a track source / participant\n * ```tsx\n * const isMuted = useIsMuted('camera', { participant });\n * ```\n *\n * @param sourceOrTrackRef - Either a `TrackReference` or a `Track.Source` (see usage examples)\n * @param options - Additional options when using a `Track.Source`\n * @returns boolean indicating if the track is muted\n *\n * @public\n */\nexport function useIsMuted(trackRef: TrackReferenceOrPlaceholder): boolean;\nexport function useIsMuted(\n  sourceOrTrackRef: TrackReferenceOrPlaceholder | Track.Source,\n  options: UseIsMutedOptions = {},\n) {\n  const passedParticipant =\n    typeof sourceOrTrackRef === 'string' ? options.participant : sourceOrTrackRef.participant;\n  const p = useEnsureParticipant(passedParticipant);\n  const ref =\n    typeof sourceOrTrackRef === 'string'\n      ? { participant: p, source: sourceOrTrackRef }\n      : sourceOrTrackRef;\n  const [isMuted, setIsMuted] = React.useState(\n    !!(ref.publication?.isMuted || p.getTrackPublication(ref.source)?.isMuted),\n  );\n\n  React.useEffect(() => {\n    const listener = mutedObserver(ref).subscribe(setIsMuted);\n    return () => listener.unsubscribe();\n  }, [getTrackReferenceId(ref)]);\n\n  return isMuted;\n}\n","import { createIsSpeakingObserver } from '@livekit/components-core';\nimport type { Participant } from 'livekit-client';\nimport * as React from 'react';\nimport { useEnsureParticipant } from '../context';\nimport { useObservableState } from './internal';\n\n/**\n * The `useIsSpeaking` hook returns a `boolean` that indicates if the participant is speaking or not.\n * @example\n * ```tsx\n * const isSpeaking = useIsSpeaking(participant);\n * ```\n * @public\n */\nexport function useIsSpeaking(participant?: Participant) {\n  const p = useEnsureParticipant(participant);\n  const observable = React.useMemo(() => createIsSpeakingObserver(p), [p]);\n  const isSpeaking = useObservableState(observable, p.isSpeaking);\n\n  return isSpeaking;\n}\n","import * as React from 'react';\nimport { mergeProps as mergePropsReactAria } from './mergeProps';\nimport { log } from '@livekit/components-core';\nimport clsx from 'clsx';\n\n/** @internal */\nexport function isProp<U extends HTMLElement, T extends React.HTMLAttributes<U>>(\n  prop: T | undefined,\n): prop is T {\n  return prop !== undefined;\n}\n\n/** @internal */\nexport function mergeProps<\n  U extends HTMLElement,\n  T extends Array<React.HTMLAttributes<U> | undefined>,\n>(...props: T) {\n  return mergePropsReactAria(...props.filter(isProp));\n}\n\n/** @internal */\nexport function cloneSingleChild(\n  children: React.ReactNode | React.ReactNode[],\n  props?: Record<string, any>,\n  key?: any,\n) {\n  return React.Children.map(children, (child) => {\n    // Checking isValidElement is the safe way and avoids a typescript\n    // error too.\n    if (React.isValidElement(child) && React.Children.only(children)) {\n      if (child.props.className) {\n        // make sure we retain classnames of both passed props and child\n        props ??= {};\n        props.className = clsx(child.props.className, props.className);\n        props.style = { ...child.props.style, ...props.style };\n      }\n      return React.cloneElement(child, { ...props, key });\n    }\n    return child;\n  });\n}\n\n/**\n * @internal\n */\nexport function warnAboutMissingStyles(el?: HTMLElement) {\n  if (\n    typeof window !== 'undefined' &&\n    typeof process !== 'undefined' &&\n    // eslint-disable-next-line turbo/no-undeclared-env-vars\n    (process?.env?.NODE_ENV === 'dev' ||\n      // eslint-disable-next-line turbo/no-undeclared-env-vars\n      process?.env?.NODE_ENV === 'development')\n  ) {\n    const target = el ?? document.querySelector('.lk-room-container');\n    if (target && !getComputedStyle(target).getPropertyValue('--lk-has-imported-styles')) {\n      log.warn(\n        \"It looks like you're not using the `@livekit/components-styles package`. To render the UI with the default styling, please import it in your layout or page.\",\n      );\n    }\n  }\n}\n\n/**\n *\n * @internal\n * used to stringify room options to detect dependency changes for react hooks.\n * Replaces processors and e2ee options with strings.\n */\nexport function roomOptionsStringifyReplacer(key: string, val: unknown) {\n  if (key === 'processor' && val && typeof val === 'object' && 'name' in val) {\n    return val.name;\n  }\n  if (key === 'e2ee' && val) {\n    return 'e2ee-enabled';\n  }\n  return val;\n}\n","import { participantPermissionObserver } from '@livekit/components-core';\nimport type { ParticipantPermission } from '@livekit/protocol';\nimport * as React from 'react';\nimport { useRoomContext } from '../context';\nimport { useObservableState } from './internal';\n\n/**\n * The `useLocalParticipantPermissions` hook returns the local participant's permissions.\n *\n * @example\n * ```tsx\n * const { canPublish, canPublishData } = useLocalParticipantPermissions();\n * ```\n * @public\n */\nexport function useLocalParticipantPermissions(): ParticipantPermission | undefined {\n  const room = useRoomContext();\n  const permissionObserver = React.useMemo(\n    () => participantPermissionObserver(room.localParticipant),\n    [room],\n  );\n  const permissions = useObservableState(permissionObserver, room.localParticipant.permissions);\n  return permissions;\n}\n","import { createMediaDeviceObserver, setupDeviceSelector, log } from '@livekit/components-core';\nimport { Room, type LocalAudioTrack, type LocalVideoTrack } from 'livekit-client';\nimport * as React from 'react';\nimport { useMaybeRoomContext } from '../context';\nimport { useObservableState } from './internal';\n\n/** @public */\nexport interface UseMediaDeviceSelectProps {\n  kind: MediaDeviceKind;\n  room?: Room;\n  track?: LocalAudioTrack | LocalVideoTrack;\n  /**\n   * this will call getUserMedia if the permissions are not yet given to enumerate the devices with device labels.\n   * in some browsers multiple calls to getUserMedia result in multiple permission prompts.\n   * It's generally advised only flip this to true, once a (preview) track has been acquired successfully with the\n   * appropriate permissions.\n   *\n   * @see {@link MediaDeviceMenu}\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices | MDN enumerateDevices}\n   */\n  requestPermissions?: boolean;\n  /**\n   * this callback gets called if an error is thrown when failing to select a device and also if a user\n   * denied permissions, eventhough the `requestPermissions` option is set to `true`.\n   * Most commonly this will emit a MediaDeviceError\n   */\n  onError?: (e: Error) => void;\n}\n\n/**\n * The `useMediaDeviceSelect` hook is used to implement the `MediaDeviceSelect` component and\n * returns o.a. the list of devices of a given kind (audioinput or videoinput), the currently active device\n * and a function to set the the active device.\n *\n * @example\n * ```tsx\n * const { devices, activeDeviceId, setActiveMediaDevice } = useMediaDeviceSelect({kind: 'audioinput'});\n * ```\n * @public\n */\nexport function useMediaDeviceSelect({\n  kind,\n  room,\n  track,\n  requestPermissions,\n  onError,\n}: UseMediaDeviceSelectProps) {\n  const roomContext = useMaybeRoomContext();\n\n  const roomFallback = React.useMemo(() => room ?? roomContext ?? new Room(), [room, roomContext]);\n\n  // List of all devices.\n  const deviceObserver = React.useMemo(\n    () => createMediaDeviceObserver(kind, onError, requestPermissions),\n    [kind, requestPermissions, onError],\n  );\n  const devices = useObservableState(deviceObserver, [] as MediaDeviceInfo[]);\n  // Active device management.\n  const [currentDeviceId, setCurrentDeviceId] = React.useState<string>(\n    roomFallback?.getActiveDevice(kind) ?? 'default',\n  );\n  const { className, activeDeviceObservable, setActiveMediaDevice } = React.useMemo(\n    () => setupDeviceSelector(kind, roomFallback),\n    [kind, roomFallback, track],\n  );\n\n  React.useEffect(() => {\n    const listener = activeDeviceObservable.subscribe((deviceId) => {\n      if (!deviceId) {\n        return;\n      }\n      log.info('setCurrentDeviceId', deviceId);\n      setCurrentDeviceId(deviceId);\n    });\n    return () => {\n      listener?.unsubscribe();\n    };\n  }, [activeDeviceObservable]);\n\n  return { devices, className, activeDeviceId: currentDeviceId, setActiveMediaDevice };\n}\n","import * as React from 'react';\nimport { useObservableState } from './internal';\nimport { createMediaDeviceObserver } from '@livekit/components-core';\n\n/**\n * The `useMediaDevices` hook returns the list of media devices of a given kind.\n *\n * @example\n * ```tsx\n * const videoDevices = useMediaDevices({ kind: 'videoinput' });\n * const audioDevices = useMediaDevices({ kind: 'audioinput' });\n * ```\n * @public\n */\nexport function useMediaDevices({\n  kind,\n  onError,\n}: {\n  kind: MediaDeviceKind;\n  onError?: (e: Error) => void;\n}) {\n  const deviceObserver = React.useMemo(\n    () => createMediaDeviceObserver(kind, onError),\n    [kind, onError],\n  );\n  const devices = useObservableState(deviceObserver, [] as MediaDeviceInfo[]);\n  return devices;\n}\n","import type { TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport { log, sortTrackReferences, updatePages } from '@livekit/components-core';\nimport * as React from 'react';\n\n/** @public */\nexport interface UseVisualStableUpdateOptions {\n  /** Overwrites the default sort function. */\n  customSortFunction?: (\n    trackReferences: TrackReferenceOrPlaceholder[],\n  ) => TrackReferenceOrPlaceholder[];\n}\n\n/**\n * The `useVisualStableUpdate` hook is used to prevent visually jarring jumps and shifts of elements\n * in an array. The algorithm only starts to update when there are more items than visually fit\n * on a page. If this is the case, it will make sure that speaking participants move to the first\n * page and are always visible.\n * @remarks\n * Updating the array can occur because attendees leave or join a room, or because they mute/unmute\n * or start speaking.\n * The hook is used for the `GridLayout` and `CarouselLayout` components.\n *\n * @example\n * ```tsx\n * const trackRefs = useTracks();\n * const updatedTrackRefs = useVisualStableUpdate(trackRefs, itemPerPage);\n * ```\n * @public\n */\nexport function useVisualStableUpdate(\n  /** `TrackReference`s to display in the grid.  */\n  trackReferences: TrackReferenceOrPlaceholder[],\n  maxItemsOnPage: number,\n  options: UseVisualStableUpdateOptions = {},\n): TrackReferenceOrPlaceholder[] {\n  const lastTrackRefs = React.useRef<TrackReferenceOrPlaceholder[]>([]);\n  const lastMaxItemsOnPage = React.useRef<number>(-1);\n  const layoutChanged = maxItemsOnPage !== lastMaxItemsOnPage.current;\n\n  const sortedTrackRefs =\n    typeof options.customSortFunction === 'function'\n      ? options.customSortFunction(trackReferences)\n      : sortTrackReferences(trackReferences);\n\n  let updatedTrackRefs: TrackReferenceOrPlaceholder[] = [...sortedTrackRefs];\n  if (layoutChanged === false) {\n    try {\n      updatedTrackRefs = updatePages(lastTrackRefs.current, sortedTrackRefs, maxItemsOnPage);\n    } catch (error) {\n      log.error('Error while running updatePages(): ', error);\n    }\n  }\n\n  // Save info for to compare against in the next update cycle.\n  if (layoutChanged) {\n    lastTrackRefs.current = sortedTrackRefs;\n  } else {\n    lastTrackRefs.current = updatedTrackRefs;\n  }\n  lastMaxItemsOnPage.current = maxItemsOnPage;\n\n  return updatedTrackRefs;\n}\n","import type { TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport * as React from 'react';\nimport { useVisualStableUpdate } from './useVisualStableUpdate';\n\n/**\n * The `usePagination` hook implements simple pagination logic for use with arrays.\n * @example\n * ```tsx\n * const tracks = useTracks();\n * const pagination = usePagination(4, tracks);\n *\n * <TrackLoop tracks={pagination.tracks} />\n * ```\n * @alpha\n */\nexport function usePagination(itemPerPage: number, trackReferences: TrackReferenceOrPlaceholder[]) {\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const totalPageCount = Math.max(Math.ceil(trackReferences.length / itemPerPage), 1);\n  if (currentPage > totalPageCount) {\n    setCurrentPage(totalPageCount);\n  }\n  const lastItemIndex = currentPage * itemPerPage;\n  const firstItemIndex = lastItemIndex - itemPerPage;\n\n  const changePage = (direction: 'next' | 'previous') => {\n    setCurrentPage((state) => {\n      if (direction === 'next') {\n        if (state === totalPageCount) {\n          return state;\n        }\n        return state + 1;\n      } else {\n        if (state === 1) {\n          return state;\n        }\n        return state - 1;\n      }\n    });\n  };\n\n  const goToPage = (num: number) => {\n    if (num > totalPageCount) {\n      setCurrentPage(totalPageCount);\n    } else if (num < 1) {\n      setCurrentPage(1);\n    } else {\n      setCurrentPage(num);\n    }\n  };\n\n  const updatedTrackReferences = useVisualStableUpdate(trackReferences, itemPerPage);\n\n  const tracksOnPage = updatedTrackReferences.slice(firstItemIndex, lastItemIndex);\n\n  return {\n    totalPageCount,\n    nextPage: () => changePage('next'),\n    prevPage: () => changePage('previous'),\n    setPage: goToPage,\n    firstItemIndex,\n    lastItemIndex,\n    tracks: tracksOnPage,\n    currentPage,\n  };\n}\n\nexport default usePagination;\n","import type { ParticipantClickEvent, TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport { setupParticipantTile } from '@livekit/components-core';\nimport * as React from 'react';\nimport { useEnsureTrackRef } from '../context';\nimport { mergeProps } from '../mergeProps';\nimport { useFacingMode } from './useFacingMode';\nimport { useIsMuted } from './useIsMuted';\nimport { useIsSpeaking } from './useIsSpeaking';\nimport { Track } from 'livekit-client';\n\n/** @public */\nexport interface UseParticipantTileProps<T extends HTMLElement> extends React.HTMLAttributes<T> {\n  /** The track reference to display. */\n  trackRef?: TrackReferenceOrPlaceholder;\n  disableSpeakingIndicator?: boolean;\n  onParticipantClick?: (event: ParticipantClickEvent) => void;\n  htmlProps: React.HTMLAttributes<T>;\n}\n\n/**\n * The `useParticipantTile` hook is used to implement the `ParticipantTile` and returns the props needed to render the tile.\n * @remarks\n * The returned props include many data attributes that are useful for CSS styling purposes because they\n * indicate the state of the participant and the track.\n * For example: `data-lk-audio-muted`, `data-lk-video-muted`, `data-lk-speaking`, `data-lk-local-participant`, `data-lk-source`, `data-lk-facing-mode`.\n * @public\n */\nexport function useParticipantTile<T extends HTMLElement>({\n  trackRef,\n  onParticipantClick,\n  disableSpeakingIndicator,\n  htmlProps,\n}: UseParticipantTileProps<T>) {\n  const trackReference = useEnsureTrackRef(trackRef);\n\n  const mergedProps = React.useMemo(() => {\n    const { className } = setupParticipantTile();\n    return mergeProps(htmlProps, {\n      className,\n      onClick: (event: React.MouseEvent<T, MouseEvent>) => {\n        htmlProps.onClick?.(event);\n        if (typeof onParticipantClick === 'function') {\n          const track =\n            trackReference.publication ??\n            trackReference.participant.getTrackPublication(trackReference.source);\n          onParticipantClick({ participant: trackReference.participant, track });\n        }\n      },\n    });\n  }, [\n    htmlProps,\n    onParticipantClick,\n    trackReference.publication,\n    trackReference.source,\n    trackReference.participant,\n  ]);\n\n  const micTrack = trackReference.participant.getTrackPublication(Track.Source.Microphone);\n  const micRef = React.useMemo(() => {\n    return {\n      participant: trackReference.participant,\n      source: Track.Source.Microphone,\n      publication: micTrack,\n    };\n  }, [micTrack, trackReference.participant]);\n  const isVideoMuted = useIsMuted(trackReference);\n  const isAudioMuted = useIsMuted(micRef);\n  const isSpeaking = useIsSpeaking(trackReference.participant);\n  const facingMode = useFacingMode(trackReference);\n  return {\n    elementProps: {\n      'data-lk-audio-muted': isAudioMuted,\n      'data-lk-video-muted': isVideoMuted,\n      'data-lk-speaking': disableSpeakingIndicator === true ? false : isSpeaking,\n      'data-lk-local-participant': trackReference.participant.isLocal,\n      'data-lk-source': trackReference.source,\n      'data-lk-facing-mode': facingMode,\n      ...mergedProps,\n    } as React.HTMLAttributes<T>,\n  };\n}\n","import type { TrackReferenceOrPlaceholder } from '@livekit/components-core';\nimport * as React from 'react';\nimport type { LayoutContextType } from '../context';\nimport { useEnsureLayoutContext } from '../context';\n\n/**\n * The `usePinnedTracks` hook returns a array of the pinned tracks of the current room.\n * @remarks\n * To function properly, this hook must be called within a `LayoutContext`.\n * @example\n * ```tsx\n * const pinnedTracks = usePinnedTracks();\n * ```\n * @public\n */\nexport function usePinnedTracks(layoutContext?: LayoutContextType): TrackReferenceOrPlaceholder[] {\n  layoutContext = useEnsureLayoutContext(layoutContext);\n  return React.useMemo(() => {\n    if (layoutContext?.pin.state !== undefined && layoutContext.pin.state.length >= 1) {\n      return layoutContext.pin.state;\n    }\n    return [];\n  }, [layoutContext.pin.state]);\n}\n","import { setupStartAudio } from '@livekit/components-core';\nimport type { Room } from 'livekit-client';\nimport * as React from 'react';\nimport { useEnsureRoom } from '../context';\nimport { mergeProps } from '../mergeProps';\nimport { useObservableState } from './internal';\n\n/** @alpha */\nexport interface UseStartAudioProps {\n  room?: Room;\n  props: React.ButtonHTMLAttributes<HTMLButtonElement>;\n}\n\n/**\n * In many browsers to start audio playback, the user must perform a user-initiated event such as clicking a button.\n * The `useStatAudio` hook returns an object with a boolean `canPlayAudio` flag\n * that indicates whether audio playback is allowed in the current context,\n * as well as a `startAudio` function that can be called in a button `onClick` callback to start audio playback in the current context.\n *\n * @see Autoplay policy on MDN web docs for more info: {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Best_practices#autoplay_policy}\n * @alpha\n */\nexport function useStartAudio({ room, props }: UseStartAudioProps) {\n  const roomEnsured = useEnsureRoom(room);\n  const { className, roomAudioPlaybackAllowedObservable, handleStartAudioPlayback } = React.useMemo(\n    () => setupStartAudio(),\n    [],\n  );\n  const observable = React.useMemo(\n    () => roomAudioPlaybackAllowedObservable(roomEnsured),\n    [roomEnsured, roomAudioPlaybackAllowedObservable],\n  );\n  const { canPlayAudio } = useObservableState(observable, {\n    canPlayAudio: roomEnsured.canPlaybackAudio,\n  });\n\n  const mergedProps = React.useMemo(\n    () =>\n      mergeProps(props, {\n        className,\n        onClick: () => {\n          handleStartAudioPlayback(roomEnsured);\n        },\n        style: { display: canPlayAudio ? 'none' : 'block' },\n      }),\n    [props, className, canPlayAudio, handleStartAudioPlayback, roomEnsured],\n  );\n\n  return { mergedProps, canPlayAudio };\n}\n","import { setupStartVideo } from '@livekit/components-core';\nimport type { Room } from 'livekit-client';\nimport * as React from 'react';\nimport { useEnsureRoom } from '../context';\nimport { mergeProps } from '../mergeProps';\nimport { useObservableState } from './internal';\n\n/** @alpha */\nexport interface UseStartVideoProps {\n  room?: Room;\n  props: React.ButtonHTMLAttributes<HTMLButtonElement>;\n}\n\n/**\n * In some browsers to start video playback in low power mode, the user must perform a user-initiated event such as clicking a button.\n * The `useStartVideo` hook returns an object with a boolean `canPlayVideo` flag\n * that indicates whether video playback is allowed in the current context,\n * as well as a `startVideo` function that can be called in a button `onClick` callback to start video playback in the current context.\n *\n * @alpha\n */\nexport function useStartVideo({ room, props }: UseStartVideoProps) {\n  const roomEnsured = useEnsureRoom(room);\n  const { className, roomVideoPlaybackAllowedObservable, handleStartVideoPlayback } = React.useMemo(\n    () => setupStartVideo(),\n    [],\n  );\n  const observable = React.useMemo(\n    () => roomVideoPlaybackAllowedObservable(roomEnsured),\n    [roomEnsured, roomVideoPlaybackAllowedObservable],\n  );\n  const { canPlayVideo } = useObservableState(observable, {\n    canPlayVideo: roomEnsured.canPlaybackVideo,\n  });\n\n  const mergedProps = React.useMemo(\n    () =>\n      mergeProps(props, {\n        className,\n        onClick: () => {\n          handleStartVideoPlayback(roomEnsured);\n        },\n        style: { display: canPlayVideo ? 'none' : 'block' },\n      }),\n    [props, className, canPlayVideo, handleStartVideoPlayback, roomEnsured],\n  );\n\n  return { mergedProps, canPlayVideo };\n}\n","import * as React from 'react';\n\n/**\n * @alpha\n */\nexport type UseSwipeOptions = {\n  minSwipeDistance?: number;\n  onLeftSwipe?: () => void;\n  onRightSwipe?: () => void;\n};\n\n/**\n * Simple implementation to detect horizontal swipe actions.\n * Accepts callbacks for on right and left swipes.\n * @example\n * ```tsx\n *  <div\n      onTouchStart={onTouchStart}\n      onTouchMove={onTouchMove}\n      onTouchEnd={onTouchEnd}\n    >\n * ```\n * @alpha\n */\nexport function useSwipe(element: React.RefObject<HTMLElement>, options: UseSwipeOptions = {}) {\n  const touchStart = React.useRef<number | null>(null);\n  const touchEnd = React.useRef<number | null>(null);\n\n  // The required distance between touchStart and touchEnd to be detected as a swipe.\n  const minSwipeDistance = options.minSwipeDistance ?? 50;\n\n  const onTouchStart = (event: TouchEvent) => {\n    touchEnd.current = null; // Otherwise the swipe is fired even with usual touch events.\n    touchStart.current = event.targetTouches[0].clientX;\n  };\n\n  const onTouchMove = (event: TouchEvent) => {\n    touchEnd.current = event.targetTouches[0].clientX;\n  };\n\n  const onTouchEnd = React.useCallback(() => {\n    if (!touchStart.current || !touchEnd.current) {\n      return;\n    }\n    const distance = touchStart.current - touchEnd.current;\n    const isLeftSwipe = distance > minSwipeDistance;\n    const isRightSwipe = distance < -minSwipeDistance;\n\n    if (isLeftSwipe && options.onLeftSwipe) options.onLeftSwipe();\n    if (isRightSwipe && options.onRightSwipe) options.onRightSwipe();\n  }, [minSwipeDistance, options]);\n\n  React.useEffect(() => {\n    const elementCopy = element.current;\n    if (elementCopy) {\n      elementCopy.addEventListener('touchstart', onTouchStart, { passive: true });\n      elementCopy.addEventListener('touchmove', onTouchMove, { passive: true });\n      elementCopy.addEventListener('touchend', onTouchEnd, { passive: true });\n    }\n    return () => {\n      if (elementCopy) {\n        elementCopy.removeEventListener('touchstart', onTouchStart);\n        elementCopy.removeEventListener('touchmove', onTouchMove);\n        elementCopy.removeEventListener('touchend', onTouchEnd);\n      }\n    };\n  }, [element, onTouchEnd]);\n}\n","import { setupChatToggle } from '@livekit/components-core';\nimport { useLayoutContext } from '../context';\nimport { mergeProps } from '../mergeProps';\nimport * as React from 'react';\n\n/** @public */\nexport interface UseChatToggleProps {\n  props: React.ButtonHTMLAttributes<HTMLButtonElement>;\n}\n\n/**\n * The `useChatToggle` hook provides state and functions for toggling the chat window.\n * @remarks\n * Depends on the `LayoutContext` to work properly.\n * @see {@link ChatToggle}, {@link Chat}\n * @public\n */\nexport function useChatToggle({ props }: UseChatToggleProps) {\n  const { dispatch, state } = useLayoutContext().widget;\n  const { className } = React.useMemo(() => setupChatToggle(), []);\n\n  const mergedProps = React.useMemo(() => {\n    return mergeProps(props, {\n      className,\n      onClick: () => {\n        if (dispatch) dispatch({ msg: 'toggle_chat' });\n      },\n      'aria-pressed': state?.showChat ? 'true' : 'false',\n      'data-lk-unread-msgs': state\n        ? state.unreadMessages < 10\n          ? state.unreadMessages.toFixed(0)\n          : '9+'\n        : '0',\n    });\n  }, [props, className, dispatch, state]);\n\n  return { mergedProps };\n}\n","import {\n  type TrackReferenceOrPlaceholder,\n  setupTrackMutedIndicator,\n  getTrackReferenceId,\n} from '@livekit/components-core';\nimport * as React from 'react';\nimport { useEnsureTrackRef } from '../context';\nimport { useObservableState } from './internal';\n\ninterface TrackMutedIndicatorReturnType {\n  isMuted: boolean;\n  className: string;\n}\n\n/**\n * The `useTrackMutedIndicator` hook is used to implement the `TrackMutedIndicator` component\n * and returns the muted state of the given track.\n *\n * @example\n * ```tsx\n * const { isMuted } = useTrackMutedIndicator(trackRef);\n * ```\n * @public\n */\nexport function useTrackMutedIndicator(\n  trackRef?: TrackReferenceOrPlaceholder,\n): TrackMutedIndicatorReturnType {\n  const trackReference = useEnsureTrackRef(trackRef);\n\n  const { className, mediaMutedObserver } = React.useMemo(\n    () => setupTrackMutedIndicator(trackReference),\n    [getTrackReferenceId(trackReference)],\n  );\n\n  const isMuted = useObservableState(\n    mediaMutedObserver,\n    !!(\n      trackReference.publication?.isMuted ||\n      trackReference.participant.getTrackPublication(trackReference.source)?.isMuted\n    ),\n  );\n\n  return { isMuted, className };\n}\n","import type { ToggleSource } from '@livekit/components-core';\nimport { setupMediaToggle, setupManualToggle, log } from '@livekit/components-core';\nimport * as React from 'react';\nimport type { TrackToggleProps } from '../components';\nimport { useMaybeRoomContext } from '../context';\nimport { mergeProps } from '../mergeProps';\nimport { useObservableState } from './internal';\n\n/** @public */\nexport interface UseTrackToggleProps<T extends ToggleSource>\n  extends Omit<TrackToggleProps<T>, 'showIcon'> {}\n\n/**\n * The `useTrackToggle` hook is used to implement the `TrackToggle` component and returns state\n * and functionality of the given track.\n *\n * @example\n * ```tsx\n * const { buttonProps, enabled } = useTrackToggle(trackRef);\n * return <button {...buttonProps}>{enabled ? 'disable' : 'enable'}</button>;\n * ```\n * @public\n */\nexport function useTrackToggle<T extends ToggleSource>({\n  source,\n  onChange,\n  initialState,\n  captureOptions,\n  publishOptions,\n  onDeviceError,\n  ...rest\n}: UseTrackToggleProps<T>) {\n  const room = useMaybeRoomContext();\n  const track = room?.localParticipant?.getTrackPublication(source);\n  /** `true` if a user interaction such as a click on the TrackToggle button has occurred. */\n  const userInteractionRef = React.useRef(false);\n\n  const { toggle, className, pendingObserver, enabledObserver } = React.useMemo(\n    () =>\n      room\n        ? setupMediaToggle<T>(source, room, captureOptions, publishOptions, onDeviceError)\n        : setupManualToggle(),\n    [room, source, JSON.stringify(captureOptions), publishOptions],\n  );\n\n  const pending = useObservableState(pendingObserver, false);\n  const enabled = useObservableState(enabledObserver, initialState ?? !!track?.isEnabled);\n\n  React.useEffect(() => {\n    onChange?.(enabled, userInteractionRef.current);\n    userInteractionRef.current = false;\n  }, [enabled, onChange]);\n\n  React.useEffect(() => {\n    if (initialState !== undefined) {\n      log.debug('forcing initial toggle state', source, initialState);\n      toggle(initialState);\n    }\n    // only execute once at the beginning\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const newProps = React.useMemo(() => mergeProps(rest, { className }), [rest, className]);\n\n  const clickHandler: React.MouseEventHandler<HTMLButtonElement> = React.useCallback(\n    (evt) => {\n      userInteractionRef.current = true;\n      toggle().catch(() => (userInteractionRef.current = false));\n      rest.onClick?.(evt);\n    },\n    [rest, toggle],\n  );\n\n  return {\n    toggle,\n    enabled,\n    pending,\n    track,\n    buttonProps: {\n      ...newProps,\n      'aria-pressed': enabled,\n      'data-lk-source': source,\n      'data-lk-enabled': enabled,\n      disabled: pending,\n      onClick: clickHandler,\n    } as React.ButtonHTMLAttributes<HTMLButtonElement>,\n  };\n}\n","import type {\n  SourcesArray,\n  TrackReference,\n  TrackReferenceOrPlaceholder,\n  TrackSourceWithOptions,\n  TrackReferencePlaceholder,\n} from '@livekit/components-core';\nimport {\n  isSourcesWithOptions,\n  isSourceWitOptions,\n  log,\n  trackReferencesObservable,\n} from '@livekit/components-core';\nimport type { Participant, Room, RoomEvent } from 'livekit-client';\nimport { Track } from 'livekit-client';\nimport * as React from 'react';\nimport { useEnsureRoom } from '../context';\n\n/** @public */\nexport type UseTracksOptions = {\n  updateOnlyOn?: RoomEvent[];\n  onlySubscribed?: boolean;\n  room?: Room;\n};\n\n/** @public */\nexport type UseTracksHookReturnType<T> = T extends Track.Source[]\n  ? TrackReference[]\n  : T extends TrackSourceWithOptions[]\n    ? TrackReferenceOrPlaceholder[]\n    : never;\n\n/**\n * The `useTracks` hook returns an array of `TrackReference` or `TrackReferenceOrPlaceholder` depending on the provided `sources` property.\n * If only subscribed tracks are desired, set the `onlySubscribed` property to `true`.\n * @example\n * ```ts\n * // Return all camera track publications.\n * const trackReferences: TrackReference[] = useTracks([Track.Source.Camera])\n * ```\n * @example\n * ```ts\n * // Return all subscribed camera tracks as well as placeholders for\n * // participants without a camera subscription.\n * const trackReferencesWithPlaceholders: TrackReferenceOrPlaceholder[] = useTracks([{source: Track.Source.Camera, withPlaceholder: true}])\n * ```\n * @public\n */\nexport function useTracks<T extends SourcesArray = Track.Source[]>(\n  sources: T = [\n    Track.Source.Camera,\n    Track.Source.Microphone,\n    Track.Source.ScreenShare,\n    Track.Source.ScreenShareAudio,\n    Track.Source.Unknown,\n  ] as T,\n  options: UseTracksOptions = {},\n): UseTracksHookReturnType<T> {\n  const room = useEnsureRoom(options.room);\n  const [trackReferences, setTrackReferences] = React.useState<TrackReference[]>([]);\n  const [participants, setParticipants] = React.useState<Participant[]>([]);\n\n  const sources_ = React.useMemo(() => {\n    return sources.map((s) => (isSourceWitOptions(s) ? s.source : s));\n  }, [JSON.stringify(sources)]);\n\n  React.useEffect(() => {\n    const subscription = trackReferencesObservable(room, sources_, {\n      additionalRoomEvents: options.updateOnlyOn,\n      onlySubscribed: options.onlySubscribed,\n    }).subscribe(({ trackReferences, participants }) => {\n      log.debug('setting track bundles', trackReferences, participants);\n      setTrackReferences(trackReferences);\n      setParticipants(participants);\n    });\n    return () => subscription.unsubscribe();\n  }, [\n    room,\n    JSON.stringify(options.onlySubscribed),\n    JSON.stringify(options.updateOnlyOn),\n    JSON.stringify(sources),\n  ]);\n\n  const maybeTrackReferences = React.useMemo(() => {\n    if (isSourcesWithOptions(sources)) {\n      const requirePlaceholder = requiredPlaceholders(sources, participants);\n      const trackReferencesWithPlaceholders: TrackReferenceOrPlaceholder[] =\n        Array.from(trackReferences);\n      participants.forEach((participant) => {\n        if (requirePlaceholder.has(participant.identity)) {\n          const sourcesToAddPlaceholder = requirePlaceholder.get(participant.identity) ?? [];\n          sourcesToAddPlaceholder.forEach((placeholderSource) => {\n            if (\n              trackReferences.find(\n                ({ participant: p, publication }) =>\n                  participant.identity === p.identity && publication.source === placeholderSource,\n              )\n            ) {\n              return;\n            }\n            log.debug(\n              `Add ${placeholderSource} placeholder for participant ${participant.identity}.`,\n            );\n            const placeholder: TrackReferencePlaceholder = {\n              participant,\n              source: placeholderSource,\n            };\n            trackReferencesWithPlaceholders.push(placeholder);\n          });\n        }\n      });\n      return trackReferencesWithPlaceholders;\n    } else {\n      return trackReferences;\n    }\n  }, [trackReferences, participants, sources]);\n\n  return maybeTrackReferences as UseTracksHookReturnType<T>;\n}\n\nfunction difference<T>(setA: Set<T>, setB: Set<T>): Set<T> {\n  const _difference = new Set(setA);\n  for (const elem of setB) {\n    _difference.delete(elem);\n  }\n  return _difference;\n}\n\nexport function requiredPlaceholders<T extends SourcesArray>(\n  sources: T,\n  participants: Participant[],\n): Map<Participant['identity'], Track.Source[]> {\n  const placeholderMap = new Map<Participant['identity'], Track.Source[]>();\n  if (isSourcesWithOptions(sources)) {\n    const sourcesThatNeedPlaceholder = sources\n      .filter((sourceWithOption) => sourceWithOption.withPlaceholder)\n      .map((sourceWithOption) => sourceWithOption.source);\n\n    participants.forEach((participant) => {\n      const sourcesOfSubscribedTracks = participant\n        .getTrackPublications()\n        .map((pub) => pub.track?.source)\n        .filter((trackSource): trackSource is Track.Source => trackSource !== undefined);\n      const placeholderNeededForThisParticipant = Array.from(\n        difference(new Set(sourcesThatNeedPlaceholder), new Set(sourcesOfSubscribedTracks)),\n      );\n      // If the participant needs placeholder add it to the placeholder map.\n      if (placeholderNeededForThisParticipant.length > 0) {\n        placeholderMap.set(participant.identity, placeholderNeededForThisParticipant);\n      }\n    });\n  }\n  return placeholderMap;\n}\n","import * as React from 'react';\nimport type { ChatOptions, ReceivedChatMessage } from '@livekit/components-core';\nimport { setupChat } from '@livekit/components-core';\nimport { ConnectionState } from 'livekit-client';\nimport { useRoomContext } from '../context';\nimport { useObservableState } from './internal/useObservableState';\nimport { useConnectionState } from './useConnectionStatus';\n\n/**\n * The `useChat` hook provides chat functionality for a LiveKit room.\n *\n * @remarks\n * Message history is not persisted and will be lost if the component is refreshed.\n * You may want to persist message history in the browser, a cache or a database.\n *\n * @returns An object containing:\n * - `chatMessages` - Array of received chat messages\n * - `send` - Function to send a new message\n * - `isSending` - Boolean indicating if a message is currently being sent\n *\n * @example\n * ```tsx\n * function ChatComponent() {\n *   const { chatMessages, send, isSending } = useChat();\n *\n *   return (\n *     <div>\n *       {chatMessages.map((msg) => (\n *         <div key={msg.timestamp}>\n *           {msg.from?.identity}: {msg.message}\n *         </div>\n *       ))}\n *       <button disabled={isSending} onClick={() => send(\"Hello!\")}>\n *         Send Message\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n * @public\n */\nexport function useChat(options?: ChatOptions) {\n  const room = useRoomContext();\n  const connectionState = useConnectionState(room);\n  const isDisconnected = React.useMemo(\n    () => connectionState === ConnectionState.Disconnected,\n    [connectionState],\n  ); // used to reset the messages on room disconnect\n  const setup = React.useMemo<ReturnType<typeof setupChat>>(\n    () => setupChat(room, options),\n    [room, options, isDisconnected],\n  );\n  const isSending = useObservableState(setup.isSendingObservable, false);\n  const chatMessages = useObservableState<ReceivedChatMessage[]>(setup.messageObservable, []);\n\n  return { send: setup.send, chatMessages, isSending };\n}\n","import type { LocalUserChoices } from '@livekit/components-core';\nimport { loadUserChoices, saveUserChoices } from '@livekit/components-core';\nimport * as React from 'react';\n\n/**\n * Options for the `usePersistentDeviceSettings` hook.\n * @alpha\n */\nexport interface UsePersistentUserChoicesOptions {\n  /**\n   * The default value to use if reading from local storage returns no results or fails.\n   */\n  defaults?: Partial<LocalUserChoices>;\n  /**\n   * Whether to prevent saving to persistent storage.\n   * @defaultValue false\n   */\n  preventSave?: boolean;\n  /**\n   * Whether to prevent loading user choices from persistent storage and use `defaults` instead.\n   * @defaultValue false\n   */\n  preventLoad?: boolean;\n}\n\n/**\n * A hook that provides access to user choices stored in local storage, such as\n * selected media devices and their current state (on or off), as well as the user name.\n * @alpha\n */\nexport function usePersistentUserChoices(options: UsePersistentUserChoicesOptions = {}) {\n  const [userChoices, setSettings] = React.useState<LocalUserChoices>(\n    loadUserChoices(options.defaults, options.preventLoad ?? false),\n  );\n\n  const saveAudioInputEnabled = React.useCallback((isEnabled: boolean) => {\n    setSettings((prev) => ({ ...prev, audioEnabled: isEnabled }));\n  }, []);\n  const saveVideoInputEnabled = React.useCallback((isEnabled: boolean) => {\n    setSettings((prev) => ({ ...prev, videoEnabled: isEnabled }));\n  }, []);\n  const saveAudioInputDeviceId = React.useCallback((deviceId: string) => {\n    setSettings((prev) => ({ ...prev, audioDeviceId: deviceId }));\n  }, []);\n  const saveVideoInputDeviceId = React.useCallback((deviceId: string) => {\n    setSettings((prev) => ({ ...prev, videoDeviceId: deviceId }));\n  }, []);\n  const saveUsername = React.useCallback((username: string) => {\n    setSettings((prev) => ({ ...prev, username: username }));\n  }, []);\n\n  React.useEffect(() => {\n    saveUserChoices(userChoices, options.preventSave ?? false);\n  }, [userChoices, options.preventSave]);\n\n  return {\n    userChoices,\n    saveAudioInputEnabled,\n    saveVideoInputEnabled,\n    saveAudioInputDeviceId,\n    saveVideoInputDeviceId,\n    saveUsername,\n  };\n}\n","import * as React from 'react';\nimport { LocalParticipant } from 'livekit-client';\nimport type { Participant, Room } from 'livekit-client';\nimport { encryptionStatusObservable } from '@livekit/components-core';\nimport { useEnsureParticipant, useEnsureRoom } from '../context';\nimport { useObservableState } from './internal';\n\n/**\n * @alpha\n */\nexport interface UseIsEncryptedOptions {\n  room?: Room;\n}\n\n/**\n * @alpha\n */\nexport function useIsEncrypted(participant?: Participant, options: UseIsEncryptedOptions = {}) {\n  const p = useEnsureParticipant(participant);\n\n  const room = useEnsureRoom(options.room);\n\n  const observer = React.useMemo(() => encryptionStatusObservable(room, p), [room, p]);\n  const isEncrypted = useObservableState(\n    observer,\n    p.isLocal ? (p as LocalParticipant).isE2EEEnabled : !!p?.isEncrypted,\n  );\n  return isEncrypted;\n}\n","import * as React from 'react';\nimport type { LocalAudioTrack, RemoteAudioTrack, AudioAnalyserOptions } from 'livekit-client';\nimport { Track, createAudioAnalyser } from 'livekit-client';\nimport {\n  type TrackReference,\n  isTrackReference,\n  type TrackReferenceOrPlaceholder,\n} from '@livekit/components-core';\n\n/**\n * @alpha\n * Hook for tracking the volume of an audio track using the Web Audio API.\n */\nexport function useTrackVolume(\n  trackOrTrackReference?: LocalAudioTrack | RemoteAudioTrack | TrackReference,\n  options: AudioAnalyserOptions = { fftSize: 32, smoothingTimeConstant: 0 },\n) {\n  const track = isTrackReference(trackOrTrackReference)\n    ? <LocalAudioTrack | RemoteAudioTrack | undefined>trackOrTrackReference.publication.track\n    : trackOrTrackReference;\n  const [volume, setVolume] = React.useState(0);\n  React.useEffect(() => {\n    if (!track || !track.mediaStream) {\n      return;\n    }\n\n    const { cleanup, analyser } = createAudioAnalyser(track, options);\n\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    const updateVolume = () => {\n      analyser.getByteFrequencyData(dataArray);\n      let sum = 0;\n      for (let i = 0; i < dataArray.length; i++) {\n        const a = dataArray[i];\n        sum += a * a;\n      }\n      setVolume(Math.sqrt(sum / dataArray.length) / 255);\n    };\n\n    const interval = setInterval(updateVolume, 1000 / 30);\n\n    return () => {\n      cleanup();\n      clearInterval(interval);\n    };\n  }, [track, track?.mediaStream, JSON.stringify(options)]);\n\n  return volume;\n}\n\nconst normalizeFrequencies = (frequencies: Float32Array) => {\n  const normalizeDb = (value: number) => {\n    const minDb = -100;\n    const maxDb = -10;\n    let db = 1 - (Math.max(minDb, Math.min(maxDb, value)) * -1) / 100;\n    db = Math.sqrt(db);\n\n    return db;\n  };\n\n  // Normalize all frequency values\n  return frequencies.map((value) => {\n    if (value === -Infinity) {\n      return 0;\n    }\n    return normalizeDb(value);\n  });\n};\n\n/**\n * Interface for configuring options for the useMultibandTrackVolume hook.\n * @alpha\n */\nexport interface MultiBandTrackVolumeOptions {\n  bands?: number;\n  /**\n   * cut off of frequency bins on the lower end\n   * Note: this is not a frequency measure, but in relation to analyserOptions.fftSize,\n   */\n  loPass?: number;\n  /**\n   * cut off of frequency bins on the higher end\n   * Note: this is not a frequency measure, but in relation to analyserOptions.fftSize,\n   */\n  hiPass?: number;\n  /**\n   * update should run every x ms\n   */\n  updateInterval?: number;\n  analyserOptions?: AnalyserOptions;\n}\n\nconst multibandDefaults = {\n  bands: 5,\n  loPass: 100,\n  hiPass: 600,\n  updateInterval: 32,\n  analyserOptions: { fftSize: 2048 },\n} as const satisfies MultiBandTrackVolumeOptions;\n\n/**\n * Hook for tracking the volume of an audio track across multiple frequency bands using the Web Audio API.\n * @alpha\n */\nexport function useMultibandTrackVolume(\n  trackOrTrackReference?: LocalAudioTrack | RemoteAudioTrack | TrackReferenceOrPlaceholder,\n  options: MultiBandTrackVolumeOptions = {},\n) {\n  const track =\n    trackOrTrackReference instanceof Track\n      ? trackOrTrackReference\n      : <LocalAudioTrack | RemoteAudioTrack | undefined>trackOrTrackReference?.publication?.track;\n  const opts = { ...multibandDefaults, ...options };\n  const [frequencyBands, setFrequencyBands] = React.useState<Array<number>>(\n    new Array(opts.bands).fill(0),\n  );\n\n  React.useEffect(() => {\n    if (!track || !track?.mediaStream) {\n      return;\n    }\n    const { analyser, cleanup } = createAudioAnalyser(track, opts.analyserOptions);\n\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Float32Array(bufferLength);\n\n    const updateVolume = () => {\n      analyser.getFloatFrequencyData(dataArray);\n      let frequencies: Float32Array = new Float32Array(dataArray.length);\n      for (let i = 0; i < dataArray.length; i++) {\n        frequencies[i] = dataArray[i];\n      }\n      frequencies = frequencies.slice(options.loPass, options.hiPass);\n\n      const normalizedFrequencies = normalizeFrequencies(frequencies); // is this needed ?\n      const chunkSize = Math.ceil(normalizedFrequencies.length / opts.bands); // we want logarithmic chunking here\n      const chunks: Array<number> = [];\n      for (let i = 0; i < opts.bands; i++) {\n        const summedVolumes = normalizedFrequencies\n          .slice(i * chunkSize, (i + 1) * chunkSize)\n          .reduce((acc, val) => (acc += val), 0);\n        chunks.push(summedVolumes / chunkSize);\n      }\n\n      setFrequencyBands(chunks);\n    };\n\n    const interval = setInterval(updateVolume, opts.updateInterval);\n\n    return () => {\n      cleanup();\n      clearInterval(interval);\n    };\n  }, [track, track?.mediaStream, JSON.stringify(options)]);\n\n  return frequencyBands;\n}\n\n/**\n * @alpha\n */\nexport interface AudioWaveformOptions {\n  barCount?: number;\n  volMultiplier?: number;\n  updateInterval?: number;\n}\n\nconst waveformDefaults = {\n  barCount: 120,\n  volMultiplier: 5,\n  updateInterval: 20,\n} as const satisfies AudioWaveformOptions;\n\n/**\n * @alpha\n */\nexport function useAudioWaveform(\n  trackOrTrackReference?: LocalAudioTrack | RemoteAudioTrack | TrackReferenceOrPlaceholder,\n  options: AudioWaveformOptions = {},\n) {\n  const track =\n    trackOrTrackReference instanceof Track\n      ? trackOrTrackReference\n      : <LocalAudioTrack | RemoteAudioTrack | undefined>trackOrTrackReference?.publication?.track;\n  const opts = { ...waveformDefaults, ...options };\n\n  const aggregateWave = React.useRef(new Float32Array());\n  const timeRef = React.useRef(performance.now());\n  const updates = React.useRef(0);\n  const [bars, setBars] = React.useState<number[]>([]);\n\n  const onUpdate = React.useCallback((wave: Float32Array) => {\n    setBars(\n      Array.from(\n        filterData(wave, opts.barCount).map((v) => Math.sqrt(v) * opts.volMultiplier),\n        // wave.slice(0, opts.barCount).map((v) => sigmoid(v * opts.volMultiplier, 0.08, 0.2)),\n      ),\n    );\n  }, []);\n\n  React.useEffect(() => {\n    if (!track || !track?.mediaStream) {\n      return;\n    }\n    const { analyser, cleanup } = createAudioAnalyser(track, {\n      fftSize: getFFTSizeValue(opts.barCount),\n    });\n\n    const bufferLength = getFFTSizeValue(opts.barCount);\n    const dataArray = new Float32Array(bufferLength);\n\n    const update = () => {\n      updateWaveform = requestAnimationFrame(update);\n      analyser.getFloatTimeDomainData(dataArray);\n      aggregateWave.current.map((v, i) => v + dataArray[i]);\n      updates.current += 1;\n\n      if (performance.now() - timeRef.current >= opts.updateInterval) {\n        const newData = dataArray.map((v) => v / updates.current);\n        onUpdate(newData);\n        timeRef.current = performance.now();\n        updates.current = 0;\n      }\n    };\n\n    let updateWaveform = requestAnimationFrame(update);\n\n    return () => {\n      cleanup();\n      cancelAnimationFrame(updateWaveform);\n    };\n  }, [track, track?.mediaStream, JSON.stringify(options), onUpdate]);\n\n  return {\n    bars,\n  };\n}\n\nfunction getFFTSizeValue(x: number) {\n  if (x < 32) return 32;\n  else return pow2ceil(x);\n}\n\n// function sigmoid(x: number, k = 2, s = 0) {\n//   return 1 / (1 + Math.exp(-(x - s) / k));\n// }\n\nfunction pow2ceil(v: number) {\n  let p = 2;\n  while ((v >>= 1)) {\n    p <<= 1;\n  }\n  return p;\n}\n\nfunction filterData(audioData: Float32Array, numSamples: number) {\n  const blockSize = Math.floor(audioData.length / numSamples); // the number of samples in each subdivision\n  const filteredData = new Float32Array(numSamples);\n  for (let i = 0; i < numSamples; i++) {\n    const blockStart = blockSize * i; // the location of the first sample in the block\n    let sum = 0;\n    for (let j = 0; j < blockSize; j++) {\n      sum = sum + Math.abs(audioData[blockStart + j]); // find the sum of all the samples in the block\n    }\n    filteredData[i] = sum / blockSize; // divide the sum by the block size to get the average\n  }\n  return filteredData;\n}\n\n// function normalizeData(audioData: Float32Array) {\n//   const multiplier = Math.pow(Math.max(...audioData), -1);\n//   return audioData.map((n) => n * multiplier);\n// }\n"],"names":["useLatest","current","storedValue","React","useResizeObserver","target","callback","resizeObserver","getResizeObserver","storedCallback","didUnsubscribe","targetEl","cb","entry","observer","createResizeObserver","ticking","allEntries","callbacks","entries","obs","triggered","i","cbs","cbIndex","_resizeObserver","useSize","size","setSize","width","height","resizeCallback","useObservableState","observable","startWith","resetWhenObservableChanges","state","setState","subscription","chatReducer","action","newState","pinReducer","LayoutContext","useLayoutContext","layoutContext","useEnsureLayoutContext","layout","useMaybeLayoutContext","useCreateLayoutContext","pinState","pinDispatch","PIN_DEFAULT_STATE","widgetState","widgetDispatch","WIDGET_DEFAULT_STATE","useEnsureCreateLayoutContext","TrackRefContext","useTrackRefContext","trackReference","useMaybeTrackRefContext","useEnsureTrackRef","trackRef","context","ref","ParticipantContext","useParticipantContext","participant","useMaybeParticipantContext","useEnsureParticipant","trackContext","p","r","t","f","n","o","clsx","chain","args","e","mergeProps","result","props","key","a","b","useConnectionQualityIndicator","options","className","connectionQualityObserver","setupConnectionQualityIndicator","quality","ConnectionQuality","useConnectionState","room","useEnsureRoom","connectionStateObserver","useDisconnectButton","useRoomContext","connectionState","disconnect","setupDisconnectButton","ConnectionState","useFacingMode","LocalTrackPublication","localTrack","facingMode","facingModeFromLocalTrack","useFocusToggle","setupFocusToggle","inFocus","isTrackReferencePinned","event","_a","_c","_b","_e","_d","useGridLayout","gridElement","trackCount","gridLayouts","GRID_LAYOUTS","selectGridLayout","useIsMuted","sourceOrTrackRef","passedParticipant","isMuted","setIsMuted","listener","mutedObserver","getTrackReferenceId","useIsSpeaking","createIsSpeakingObserver","isProp","prop","mergePropsReactAria","cloneSingleChild","children","child","warnAboutMissingStyles","el","log","roomOptionsStringifyReplacer","val","useLocalParticipantPermissions","permissionObserver","participantPermissionObserver","useMediaDeviceSelect","kind","track","requestPermissions","onError","roomContext","useMaybeRoomContext","roomFallback","Room","deviceObserver","createMediaDeviceObserver","devices","currentDeviceId","setCurrentDeviceId","activeDeviceObservable","setActiveMediaDevice","setupDeviceSelector","deviceId","useMediaDevices","useVisualStableUpdate","trackReferences","maxItemsOnPage","lastTrackRefs","lastMaxItemsOnPage","layoutChanged","sortedTrackRefs","sortTrackReferences","updatedTrackRefs","updatePages","error","usePagination","itemPerPage","currentPage","setCurrentPage","totalPageCount","lastItemIndex","firstItemIndex","changePage","direction","goToPage","num","tracksOnPage","useParticipantTile","onParticipantClick","disableSpeakingIndicator","htmlProps","mergedProps","setupParticipantTile","micTrack","Track","micRef","isVideoMuted","isAudioMuted","isSpeaking","usePinnedTracks","useStartAudio","roomEnsured","roomAudioPlaybackAllowedObservable","handleStartAudioPlayback","setupStartAudio","canPlayAudio","useStartVideo","roomVideoPlaybackAllowedObservable","handleStartVideoPlayback","setupStartVideo","canPlayVideo","useSwipe","element","touchStart","touchEnd","minSwipeDistance","onTouchStart","onTouchMove","onTouchEnd","distance","isLeftSwipe","isRightSwipe","elementCopy","useChatToggle","dispatch","setupChatToggle","useTrackMutedIndicator","mediaMutedObserver","setupTrackMutedIndicator","useTrackToggle","source","onChange","initialState","captureOptions","publishOptions","onDeviceError","rest","userInteractionRef","toggle","pendingObserver","enabledObserver","setupMediaToggle","setupManualToggle","pending","enabled","newProps","clickHandler","evt","useTracks","sources","setTrackReferences","participants","setParticipants","sources_","s","isSourceWitOptions","trackReferencesObservable","isSourcesWithOptions","requirePlaceholder","requiredPlaceholders","trackReferencesWithPlaceholders","placeholderSource","publication","placeholder","difference","setA","setB","_difference","elem","placeholderMap","sourcesThatNeedPlaceholder","sourceWithOption","sourcesOfSubscribedTracks","pub","trackSource","placeholderNeededForThisParticipant","useChat","isDisconnected","setup","setupChat","isSending","chatMessages","usePersistentUserChoices","userChoices","setSettings","loadUserChoices","saveAudioInputEnabled","isEnabled","prev","saveVideoInputEnabled","saveAudioInputDeviceId","saveVideoInputDeviceId","saveUsername","username","saveUserChoices","useIsEncrypted","encryptionStatusObservable","useTrackVolume","trackOrTrackReference","isTrackReference","volume","setVolume","cleanup","analyser","createAudioAnalyser","bufferLength","dataArray","interval","sum","normalizeFrequencies","frequencies","normalizeDb","value","db","multibandDefaults","useMultibandTrackVolume","opts","frequencyBands","setFrequencyBands","normalizedFrequencies","chunkSize","chunks","summedVolumes","acc","waveformDefaults","useAudioWaveform","aggregateWave","timeRef","updates","bars","setBars","onUpdate","wave","filterData","v","getFFTSizeValue","update","updateWaveform","newData","x","pow2ceil","audioData","numSamples","blockSize","filteredData","blockStart","j"],"mappings":"8XAIMA,EAAgBC,GAAe,CAC7B,MAAAC,EAAcC,EAAM,OAAOF,CAAO,EACxCE,OAAAA,EAAM,UAAU,IAAM,CACpBD,EAAY,QAAUD,CAAA,CACvB,EACMC,CACT,EAQgB,SAAAE,EACdC,EACAC,EACA,CACA,MAAMC,EAAiBC,EAAkB,EACnCC,EAAiBT,EAAUM,CAAQ,EAEzCH,OAAAA,EAAM,gBAAgB,IAAM,CAC1B,IAAIO,EAAiB,GAErB,MAAMC,EAAWN,EAAO,QACxB,GAAI,CAACM,EAAU,OAEN,SAAAC,EAAGC,EAA4BC,EAA0B,CAC5DJ,GACWD,EAAA,QAAQI,EAAOC,CAAQ,CAAA,CAGxB,OAAAP,GAAA,MAAAA,EAAA,UAAUI,EAAyBC,GAE5C,IAAM,CACMF,EAAA,GACDH,GAAA,MAAAA,EAAA,YAAYI,EAAyBC,EACvD,GACC,CAACP,EAAO,QAASE,EAAgBE,CAAc,CAAC,EAE5CF,GAAA,YAAAA,EAAgB,QACzB,CAEA,SAASQ,GAAuB,CAC9B,IAAIC,EAAU,GACVC,EAAoC,CAAC,EAEnC,MAAAC,MAAgE,IAElE,GAAA,OAAO,OAAW,IACpB,OAGF,MAAMJ,EAAW,IAAI,eAAe,CAACK,EAAgCC,IAAwB,CAC9EH,EAAAA,EAAW,OAAOE,CAAO,EACjCH,GACH,OAAO,sBAAsB,IAAM,CAC3B,MAAAK,MAAgB,IACtB,QAASC,EAAI,EAAGA,EAAIL,EAAW,OAAQK,IAAK,CAC1C,GAAID,EAAU,IAAIJ,EAAWK,CAAC,EAAE,MAAM,EAAG,SACzCD,EAAU,IAAIJ,EAAWK,CAAC,EAAE,MAAM,EAClC,MAAMC,EAAML,EAAU,IAAID,EAAWK,CAAC,EAAE,MAAM,EACzCC,GAAA,MAAAA,EAAA,QAASX,GAAOA,EAAGK,EAAWK,CAAC,EAAGF,CAAG,EAAC,CAE7CH,EAAa,CAAC,EACJD,EAAA,EAAA,CACX,EAEOA,EAAA,EAAA,CACX,EAEM,MAAA,CACL,SAAAF,EACA,UAAUT,EAAqBC,EAAqC,CAClEQ,EAAS,QAAQT,CAAM,EACvB,MAAMkB,EAAML,EAAU,IAAIb,CAAM,GAAK,CAAC,EACtCkB,EAAI,KAAKjB,CAAQ,EACPY,EAAA,IAAIb,EAAQkB,CAAG,CAC3B,EACA,YAAYlB,EAAqBC,EAAqC,CACpE,MAAMiB,EAAML,EAAU,IAAIb,CAAM,GAAK,CAAC,EAClC,GAAAkB,EAAI,SAAW,EAAG,CACpBT,EAAS,UAAUT,CAAM,EACzBa,EAAU,OAAOb,CAAM,EACvB,MAAA,CAEI,MAAAmB,EAAUD,EAAI,QAAQjB,CAAQ,EAChCkB,IAAY,IAAQD,EAAA,OAAOC,EAAS,CAAC,EAC/BN,EAAA,IAAIb,EAAQkB,CAAG,CAAA,CAE7B,CACF,CAEA,IAAIE,EAEJ,MAAMjB,EAAoB,IACvBiB,IAAmBA,EAAkBV,EAA0B,GAOrDW,EAAWrB,GAA4C,CAC5D,KAAA,CAACsB,EAAMC,CAAO,EAAIzB,EAAM,SAAS,CAAE,MAAO,EAAG,OAAQ,EAAG,EAC9DA,EAAM,gBAAgB,IAAM,CAC1B,GAAIE,EAAO,QAAS,CAClB,KAAM,CAAE,MAAAwB,EAAO,OAAAC,CAAA,EAAWzB,EAAO,QAAQ,sBAAsB,EACvDuB,EAAA,CAAE,MAAAC,EAAO,OAAAC,EAAQ,CAAA,CAC3B,EACC,CAACzB,EAAO,OAAO,CAAC,EAEnB,MAAM0B,EAAiB5B,EAAM,YAC1BU,GAA+Be,EAAQf,EAAM,WAAW,EACzD,CAAA,CACF,EAEA,OAAAT,EAAkBC,EAAQ0B,CAAc,EACjCJ,CACT,ECpHO,SAASK,EACdC,EACAC,EACAC,EAA6B,GAC7B,CACA,KAAM,CAACC,EAAOC,CAAQ,EAAIlC,EAAM,SAAY+B,CAAS,EACrD/B,OAAAA,EAAM,UAAU,IAAM,CAKpB,GAJIgC,GACFE,EAASH,CAAS,EAGhB,OAAO,OAAW,KAAe,CAACD,EAAY,OAC5C,MAAAK,EAAeL,EAAW,UAAUI,CAAQ,EAC3C,MAAA,IAAMC,EAAa,YAAY,CAAA,EACrC,CAACL,EAAYE,CAA0B,CAAC,EACpCC,CACT,CCLgB,SAAAG,EAAYH,EAAoBI,EAAwC,CAClF,GAAAA,EAAO,MAAQ,YACjB,MAAO,CAAE,GAAGJ,EAAO,SAAU,GAAM,eAAgB,CAAE,EACvD,GAAWI,EAAO,MAAQ,YACxB,MAAO,CAAE,GAAGJ,EAAO,SAAU,EAAM,EACrC,GAAWI,EAAO,MAAQ,cAAe,CACvC,MAAMC,EAAW,CAAE,GAAGL,EAAO,SAAU,CAACA,EAAM,QAAS,EACnD,OAAAK,EAAS,WAAa,KACxBA,EAAS,eAAiB,GAErBA,CAAA,KACT,QAAWD,EAAO,MAAQ,aACjB,CAAE,GAAGJ,EAAO,eAAgBI,EAAO,KAAM,EACvCA,EAAO,MAAQ,kBACjB,CAAE,GAAGJ,EAAO,aAAc,CAACA,EAAM,YAAa,EAE9C,CAAE,GAAGA,CAAM,CAEtB,CClBgB,SAAAM,EAAWN,EAAiBI,EAA6B,CACnE,OAAAA,EAAO,MAAQ,UACV,CAACA,EAAO,cAAc,EACpBA,EAAO,MAAQ,YACjB,CAAC,EAED,CAAE,GAAGJ,CAAM,CAEtB,CCZa,MAAAO,EAAgBxC,EAAM,cAA6C,MAAS,EAOlF,SAASyC,GAAsC,CAC9C,MAAAC,EAAgB1C,EAAM,WAAWwC,CAAa,EACpD,GAAI,CAACE,EACH,MAAM,MAAM,iFAAiF,EAExF,OAAAA,CACT,CAOO,SAASC,EAAuBD,EAAmC,CACxE,MAAME,EAASC,EAAsB,EAErC,GADkBH,MAAAE,GACd,CAACF,EACH,MAAM,MAAM,iFAAiF,EAExF,OAAAA,CACT,CAGO,SAASI,IAA4C,CAC1D,KAAM,CAACC,EAAUC,CAAW,EAAIhD,EAAM,WAAWuC,EAAYU,mBAAiB,EACxE,CAACC,EAAaC,CAAc,EAAInD,EAAM,WAAWoC,EAAagB,sBAAoB,EACjF,MAAA,CACL,IAAK,CAAE,SAAUJ,EAAa,MAAOD,CAAS,EAC9C,OAAQ,CAAE,SAAUI,EAAgB,MAAOD,CAAY,CACzD,CACF,CAGO,SAASG,GAA6BX,EAAsD,CACjG,KAAM,CAACK,EAAUC,CAAW,EAAIhD,EAAM,WAAWuC,EAAYU,mBAAiB,EACxE,CAACC,EAAaC,CAAc,EAAInD,EAAM,WAAWoC,EAAagB,sBAAoB,EACxF,OACEV,GAAiB,CACf,IAAK,CAAE,SAAUM,EAAa,MAAOD,CAAS,EAC9C,OAAQ,CAAE,SAAUI,EAAgB,MAAOD,CAAY,CACzD,CAEJ,CAMO,SAASL,GAAuD,CAC9D,OAAA7C,EAAM,WAAWwC,CAAa,CACvC,CChEO,MAAMc,EAAkBtD,EAAM,cACnC,MACF,EAOO,SAASuD,IAAqB,CAC7B,MAAAC,EAAiBxD,EAAM,WAAWsD,CAAe,EACvD,GAAI,CAACE,EACH,MAAM,MAAM,iEAAiE,EAExE,OAAAA,CACT,CAMO,SAASC,GAA0B,CACjC,OAAAzD,EAAM,WAAWsD,CAAe,CACzC,CAOO,SAASI,EAAkBC,EAAwC,CACxE,MAAMC,EAAUH,EAAwB,EAClCI,EAAMF,GAAYC,EACxB,GAAI,CAACC,EACH,MAAM,IAAI,MACR,yFACF,EAEK,OAAAA,CACT,CCzCa,MAAAC,EAAqB9D,EAAM,cAAuC,MAAS,EAOjF,SAAS+D,IAAwB,CAChC,MAAAC,EAAchE,EAAM,WAAW8D,CAAkB,EACvD,GAAI,CAACE,EACH,MAAM,MAAM,6EAA6E,EAEpF,OAAAA,CACT,CAMO,SAASC,GAA6B,CACpC,OAAAjE,EAAM,WAAW8D,CAAkB,CAC5C,CAOO,SAASI,EAAqBF,EAA2B,CAC9D,MAAMJ,EAAUK,EAA2B,EACrCE,EAAeV,EAAwB,EACvCW,EAAIJ,GAAeJ,IAAWO,GAAA,YAAAA,EAAc,aAClD,GAAI,CAACC,EACH,MAAM,IAAI,MACR,4GACF,EAEK,OAAAA,CACT,CC3CA,SAASC,EAAE,EAAE,CAAC,IAAIC,EAAEC,EAAEC,EAAE,GAAG,GAAa,OAAO,GAAjB,UAA8B,OAAO,GAAjB,SAAmBA,GAAG,UAAoB,OAAO,GAAjB,SAAmB,GAAG,MAAM,QAAQ,CAAC,EAAE,CAAC,IAAIC,EAAE,EAAE,OAAO,IAAIH,EAAE,EAAEA,EAAEG,EAAEH,IAAI,EAAEA,CAAC,IAAIC,EAAEF,EAAE,EAAEC,CAAC,CAAC,KAAKE,IAAIA,GAAG,KAAKA,GAAGD,EAAE,KAAM,KAAIA,KAAK,EAAE,EAAEA,CAAC,IAAIC,IAAIA,GAAG,KAAKA,GAAGD,GAAG,OAAOC,CAAC,CAAQ,SAASE,GAAM,CAAC,QAAQ,EAAEJ,EAAEC,EAAE,EAAEC,EAAE,GAAGC,EAAE,UAAU,OAAOF,EAAEE,EAAEF,KAAK,EAAE,UAAUA,CAAC,KAAKD,EAAED,EAAE,CAAC,KAAKG,IAAIA,GAAG,KAAKA,GAAGF,GAAG,OAAOE,CAAC,CCkBxW,SAASG,MAAS5D,EAA4C,CACnE,MAAO,IAAI6D,IAAgB,CACzB,UAAWzE,KAAYY,EACjB,GAAA,OAAOZ,GAAa,WAClB,GAAA,CACFA,EAAS,GAAGyE,CAAI,QACTC,EAAG,CACV,QAAQ,MAAMA,CAAC,CAAA,CAIvB,CACF,CAoBO,SAASC,KAAiCF,EAA6C,CAG5F,MAAMG,EAAgB,CAAE,GAAGH,EAAK,CAAC,CAAE,EACnC,QAASzD,EAAI,EAAGA,EAAIyD,EAAK,OAAQzD,IAAK,CAC9B,MAAA6D,EAAQJ,EAAKzD,CAAC,EACpB,UAAW8D,KAAOD,EAAO,CACjB,MAAAE,EAAIH,EAAOE,CAAG,EACdE,EAAIH,EAAMC,CAAG,EAIjB,OAAOC,GAAM,YACb,OAAOC,GAAM,YAEbF,EAAI,CAAC,IAAM,KACXA,EAAI,CAAC,IAAM,KACXA,EAAI,WAAW,CAAC,GAAe,IAC/BA,EAAI,WAAW,CAAC,GAAe,GAE/BF,EAAOE,CAAG,EAAIN,GAAMO,EAAGC,CAAC,GAIvBF,IAAQ,aAAeA,IAAQ,qBAChC,OAAOC,GAAM,UACb,OAAOC,GAAM,SAEbJ,EAAOE,CAAG,EAAIP,EAAKQ,EAAGC,CAAC,EAEvBJ,EAAOE,CAAG,EAAIE,IAAM,OAAYA,EAAID,CACtC,CACF,CAGK,OAAAH,CACT,CChEgB,SAAAK,GAA8BC,EAA6C,GAAI,CACvF,MAAAjB,EAAIF,EAAqBmB,EAAQ,WAAW,EAE5C,CAAE,UAAAC,EAAW,0BAAAC,CAA0B,EAAIvF,EAAM,QACrD,IAAMwF,EAAAA,gCAAgCpB,CAAC,EACvC,CAACA,CAAC,CACJ,EAEMqB,EAAU5D,EAAmB0D,EAA2BG,EAAAA,kBAAkB,OAAO,EAEhF,MAAA,CAAE,UAAAJ,EAAW,QAAAG,CAAQ,CAC9B,CClBO,SAASE,EAAmBC,EAAa,CAExC,MAAAvB,EAAIwB,gBAAcD,CAAI,EACtB9D,EAAa9B,EAAM,QAAQ,IAAM8F,0BAAwBzB,CAAC,EAAG,CAACA,CAAC,CAAC,EAE/D,OADiBxC,EAAmBC,EAAYuC,EAAE,KAAK,CAEhE,CCDO,SAAS0B,GAAoBf,EAA8B,CAChE,MAAMY,EAAOI,EAAAA,eAAe,EACtBC,EAAkBN,EAAmBC,CAAI,EAY/C,MAAO,CAAE,YAVW5F,EAAM,QAAQ,IAAM,CACtC,KAAM,CAAE,UAAAsF,EAAW,WAAAY,GAAeC,EAAAA,sBAAsBP,CAAI,EAMrD,OALad,EAAWE,EAAO,CACpC,UAAAM,EACA,QAAS,IAAMY,EAAWlB,EAAM,YAAc,EAAI,EAClD,SAAUiB,IAAoBG,kBAAgB,YAAA,CAC/C,CAEA,EAAA,CAACR,EAAMZ,EAAOiB,CAAe,CAAC,CAEZ,CACvB,CCzBO,SAASI,EACd7C,EACyD,CACrD,GAAAA,EAAe,uBAAuB8C,wBAAuB,CACzD,MAAAC,EAAa/C,EAAe,YAAY,MAC9C,GAAI+C,EAAY,CACd,KAAM,CAAE,WAAAC,CAAA,EAAeC,EAAA,yBAAyBF,CAAU,EACnD,OAAAC,CAAA,CACT,CAEK,MAAA,WACT,CCEO,SAASE,GAAe,CAAE,SAAA/C,EAAU,MAAAqB,GAA8B,CACjE,MAAAxB,EAAiBE,EAAkBC,CAAQ,EAE3CjB,EAAgBG,EAAsB,EACtC,CAAE,UAAAyC,GAActF,EAAM,QAAQ,IAAM2G,EAAAA,iBAAoB,EAAA,EAAE,EAE1DC,EAAmB5G,EAAM,QAAQ,IAC9B6G,EAAuB,uBAAArD,EAAgBd,GAAA,YAAAA,EAAe,IAAI,KAAK,EACrE,CAACc,EAAgBd,GAAA,YAAAA,EAAe,IAAI,KAAK,CAAC,EA0BtC,MAAA,CAAE,YAxBW1C,EAAM,QACxB,IACE8E,EAAWE,EAAO,CAChB,UAAAM,EACA,QAAUwB,GAA2D,gBAEnEC,EAAA/B,EAAM,UAAN,MAAA+B,EAAA,KAAA/B,EAAgB8B,GAGZF,GACFI,EAAAtE,GAAA,aAAAuE,EAAAvE,EAAe,KAAI,WAAnB,MAAAsE,EAAA,KAAAC,EAA8B,CAC5B,IAAK,WAAA,IAGPC,EAAAxE,GAAA,aAAAyE,EAAAzE,EAAe,KAAI,WAAnB,MAAAwE,EAAA,KAAAC,EAA8B,CAC5B,IAAK,UACL,eAAA3D,CAAA,EAEJ,CACF,CACD,EACH,CAACwB,EAAOM,EAAW9B,EAAgBoD,EAASlE,GAAA,YAAAA,EAAe,GAAG,CAChE,EAEsB,QAAAkE,CAAQ,CAChC,CCxCO,SAASQ,GAEdC,EAEAC,EACAjC,EAEI,CAAA,EACyE,CACvE,MAAAkC,EAAclC,EAAQ,aAAemC,EAAA,aACrC,CAAE,MAAA9F,EAAO,OAAAC,GAAWJ,EAAQ8F,CAAW,EACvCzE,EAAS6E,EAAAA,iBAAiBF,EAAaD,EAAY5F,EAAOC,CAAM,EAEtE3B,OAAAA,EAAM,UAAU,IAAM,CAChBqH,EAAY,SAAWzE,IACzByE,EAAY,QAAQ,MAAM,YAAY,iBAAkBzE,GAAA,YAAAA,EAAQ,QAAQ,UAAU,EAClFyE,EAAY,QAAQ,MAAM,YAAY,iBAAkBzE,GAAA,YAAAA,EAAQ,KAAK,UAAU,EACjF,EACC,CAACyE,EAAazE,CAAM,CAAC,EAEjB,CACL,OAAAA,EACA,eAAgBlB,EAChB,gBAAiBC,CACnB,CACF,CCRO,SAAS+F,EACdC,EACAtC,EAA6B,GAC7B,SACA,MAAMuC,EACJ,OAAOD,GAAqB,SAAWtC,EAAQ,YAAcsC,EAAiB,YAC1EvD,EAAIF,EAAqB0D,CAAiB,EAC1C/D,EACJ,OAAO8D,GAAqB,SACxB,CAAE,YAAavD,EAAG,OAAQuD,CAAA,EAC1BA,EACA,CAACE,EAASC,CAAU,EAAI9H,EAAM,SAClC,CAAC,GAAE+G,EAAAlD,EAAI,cAAJ,MAAAkD,EAAiB,UAAWE,EAAA7C,EAAE,oBAAoBP,EAAI,MAAM,IAAhC,MAAAoD,EAAmC,QACpE,EAEAjH,OAAAA,EAAM,UAAU,IAAM,CACpB,MAAM+H,EAAWC,EAAA,cAAcnE,CAAG,EAAE,UAAUiE,CAAU,EACjD,MAAA,IAAMC,EAAS,YAAY,CAAA,EACjC,CAACE,EAAAA,oBAAoBpE,CAAG,CAAC,CAAC,EAEtBgE,CACT,CC1CO,SAASK,EAAclE,EAA2B,CACjD,MAAAI,EAAIF,EAAqBF,CAAW,EACpClC,EAAa9B,EAAM,QAAQ,IAAMmI,2BAAyB/D,CAAC,EAAG,CAACA,CAAC,CAAC,EAGhE,OAFYvC,EAAmBC,EAAYsC,EAAE,UAAU,CAGhE,CCdO,SAASgE,GACdC,EACW,CACX,OAAOA,IAAS,MAClB,CAGO,SAASvD,MAGXE,EAAU,CACb,OAAOsD,EAAoB,GAAGtD,EAAM,OAAOoD,EAAM,CAAC,CACpD,CAGgB,SAAAG,GACdC,EACAxD,EACAC,EACA,CACA,OAAOjF,EAAM,SAAS,IAAIwI,EAAWC,GAG/BzI,EAAM,eAAeyI,CAAK,GAAKzI,EAAM,SAAS,KAAKwI,CAAQ,GACzDC,EAAM,MAAM,YAEdzD,MAAU,CAAC,GACXA,EAAM,UAAYN,EAAK+D,EAAM,MAAM,UAAWzD,EAAM,SAAS,EACvDA,EAAA,MAAQ,CAAE,GAAGyD,EAAM,MAAM,MAAO,GAAGzD,EAAM,KAAM,GAEhDhF,EAAM,aAAayI,EAAO,CAAE,GAAGzD,EAAO,IAAAC,EAAK,GAE7CwD,CACR,CACH,CAKO,SAASC,GAAuBC,EAAkB,SACvD,GACE,OAAO,OAAW,KAClB,OAAO,QAAY,QAElB5B,EAAA,6BAAS,MAAT,YAAAA,EAAc,YAAa,SAE1BE,EAAA,6BAAS,MAAT,YAAAA,EAAc,YAAa,eAC7B,CACA,MAAM/G,EAAe,SAAS,cAAc,oBAAoB,EAC5DA,GAAU,CAAC,iBAAiBA,CAAM,EAAE,iBAAiB,0BAA0B,GAC7E0I,EAAAA,IAAA,KACF,8JACF,CACF,CAEJ,CAQgB,SAAAC,GAA6B5D,EAAa6D,EAAc,CACtE,OAAI7D,IAAQ,aAAe6D,GAAO,OAAOA,GAAQ,UAAY,SAAUA,EAC9DA,EAAI,KAET7D,IAAQ,QAAU6D,EACb,eAEFA,CACT,CC9DO,SAASC,IAAoE,CAClF,MAAMnD,EAAOI,EAAAA,eAAe,EACtBgD,EAAqBhJ,EAAM,QAC/B,IAAMiJ,EAA8B,8BAAArD,EAAK,gBAAgB,EACzD,CAACA,CAAI,CACP,EAEO,OADa/D,EAAmBmH,EAAoBpD,EAAK,iBAAiB,WAAW,CAE9F,CCiBO,SAASsD,GAAqB,CACnC,KAAAC,EACA,KAAAvD,EACA,MAAAwD,EACA,mBAAAC,EACA,QAAAC,CACF,EAA8B,CAC5B,MAAMC,EAAcC,EAAAA,oBAAoB,EAElCC,EAAezJ,EAAM,QAAQ,IAAM4F,GAAQ2D,GAAe,IAAIG,OAAQ,CAAC9D,EAAM2D,CAAW,CAAC,EAGzFI,EAAiB3J,EAAM,QAC3B,IAAM4J,4BAA0BT,EAAMG,EAASD,CAAkB,EACjE,CAACF,EAAME,EAAoBC,CAAO,CACpC,EACMO,EAAUhI,EAAmB8H,EAAgB,EAAuB,EAEpE,CAACG,EAAiBC,CAAkB,EAAI/J,EAAM,UAClDyJ,GAAA,YAAAA,EAAc,gBAAgBN,KAAS,SACzC,EACM,CAAE,UAAA7D,EAAW,uBAAA0E,EAAwB,qBAAAC,GAAyBjK,EAAM,QACxE,IAAMkK,EAAoB,oBAAAf,EAAMM,CAAY,EAC5C,CAACN,EAAMM,EAAcL,CAAK,CAC5B,EAEApJ,OAAAA,EAAM,UAAU,IAAM,CACpB,MAAM+H,EAAWiC,EAAuB,UAAWG,GAAa,CACzDA,IAGDvB,MAAA,KAAK,qBAAsBuB,CAAQ,EACvCJ,EAAmBI,CAAQ,EAAA,CAC5B,EACD,MAAO,IAAM,CACXpC,GAAA,MAAAA,EAAU,aACZ,CAAA,EACC,CAACiC,CAAsB,CAAC,EAEpB,CAAE,QAAAH,EAAS,UAAAvE,EAAW,eAAgBwE,EAAiB,qBAAAG,CAAqB,CACrF,CClEO,SAASG,GAAgB,CAC9B,KAAAjB,EACA,QAAAG,CACF,EAGG,CACD,MAAMK,EAAiB3J,EAAM,QAC3B,IAAM4J,EAA0B,0BAAAT,EAAMG,CAAO,EAC7C,CAACH,EAAMG,CAAO,CAChB,EAEO,OADSzH,EAAmB8H,EAAgB,EAAuB,CAE5E,CCEO,SAASU,EAEdC,EACAC,EACAlF,EAAwC,CAAA,EACT,CAC/B,MAAMmF,EAAgBxK,EAAM,OAAsC,EAAE,EAC9DyK,EAAqBzK,EAAM,OAAe,EAAE,EAC5C0K,EAAgBH,IAAmBE,EAAmB,QAEtDE,EACJ,OAAOtF,EAAQ,oBAAuB,WAClCA,EAAQ,mBAAmBiF,CAAe,EAC1CM,EAAA,oBAAoBN,CAAe,EAErC,IAAAO,EAAkD,CAAC,GAAGF,CAAe,EACzE,GAAID,IAAkB,GAChB,GAAA,CACFG,EAAmBC,EAAAA,YAAYN,EAAc,QAASG,EAAiBJ,CAAc,QAC9EQ,EAAO,CACVnC,MAAA,MAAM,sCAAuCmC,CAAK,CAAA,CAK1D,OAAIL,EACFF,EAAc,QAAUG,EAExBH,EAAc,QAAUK,EAE1BJ,EAAmB,QAAUF,EAEtBM,CACT,CC/CgB,SAAAG,GAAcC,EAAqBX,EAAgD,CACjG,KAAM,CAACY,EAAaC,CAAc,EAAInL,EAAM,SAAS,CAAC,EAChDoL,EAAiB,KAAK,IAAI,KAAK,KAAKd,EAAgB,OAASW,CAAW,EAAG,CAAC,EAC9EC,EAAcE,GAChBD,EAAeC,CAAc,EAE/B,MAAMC,EAAgBH,EAAcD,EAC9BK,EAAiBD,EAAgBJ,EAEjCM,EAAcC,GAAmC,CACrDL,EAAgBlJ,GACVuJ,IAAc,OACZvJ,IAAUmJ,EACLnJ,EAEFA,EAAQ,EAEXA,IAAU,EACLA,EAEFA,EAAQ,CAElB,CACH,EAEMwJ,EAAYC,GAAgB,CAC5BA,EAAMN,EACRD,EAAeC,CAAc,EACpBM,EAAM,EACfP,EAAe,CAAC,EAEhBA,EAAeO,CAAG,CAEtB,EAIMC,EAFyBtB,EAAsBC,EAAiBW,CAAW,EAErC,MAAMK,EAAgBD,CAAa,EAExE,MAAA,CACL,eAAAD,EACA,SAAU,IAAMG,EAAW,MAAM,EACjC,SAAU,IAAMA,EAAW,UAAU,EACrC,QAASE,EACT,eAAAH,EACA,cAAAD,EACA,OAAQM,EACR,YAAAT,CACF,CACF,CCrCO,SAASU,GAA0C,CACxD,SAAAjI,EACA,mBAAAkI,EACA,yBAAAC,EACA,UAAAC,CACF,EAA+B,CACvB,MAAAvI,EAAiBE,EAAkBC,CAAQ,EAE3CqI,EAAchM,EAAM,QAAQ,IAAM,CAChC,KAAA,CAAE,UAAAsF,CAAU,EAAI2G,uBAAqB,EAC3C,OAAOnH,EAAWiH,EAAW,CAC3B,UAAAzG,EACA,QAAUwB,GAA2C,OAE/C,IADJC,EAAAgF,EAAU,UAAV,MAAAhF,EAAA,KAAAgF,EAAoBjF,GAChB,OAAO+E,GAAuB,WAAY,CAC5C,MAAMzC,EACJ5F,EAAe,aACfA,EAAe,YAAY,oBAAoBA,EAAe,MAAM,EACtEqI,EAAmB,CAAE,YAAarI,EAAe,YAAa,MAAA4F,EAAO,CAAA,CACvE,CACF,CACD,CAAA,EACA,CACD2C,EACAF,EACArI,EAAe,YACfA,EAAe,OACfA,EAAe,WAAA,CAChB,EAEK0I,EAAW1I,EAAe,YAAY,oBAAoB2I,EAAA,MAAM,OAAO,UAAU,EACjFC,EAASpM,EAAM,QAAQ,KACpB,CACL,YAAawD,EAAe,YAC5B,OAAQ2I,EAAAA,MAAM,OAAO,WACrB,YAAaD,CACf,GACC,CAACA,EAAU1I,EAAe,WAAW,CAAC,EACnC6I,EAAe3E,EAAWlE,CAAc,EACxC8I,EAAe5E,EAAW0E,CAAM,EAChCG,EAAarE,EAAc1E,EAAe,WAAW,EACrDgD,EAAaH,EAAc7C,CAAc,EACxC,MAAA,CACL,aAAc,CACZ,sBAAuB8I,EACvB,sBAAuBD,EACvB,mBAAoBP,IAA6B,GAAO,GAAQS,EAChE,4BAA6B/I,EAAe,YAAY,QACxD,iBAAkBA,EAAe,OACjC,sBAAuBgD,EACvB,GAAGwF,CAAA,CAEP,CACF,CCjEO,SAASQ,GAAgB9J,EAAkE,CAChG,OAAAA,EAAgBC,EAAuBD,CAAa,EAC7C1C,EAAM,QAAQ,KACf0C,GAAA,YAAAA,EAAe,IAAI,SAAU,QAAaA,EAAc,IAAI,MAAM,QAAU,EACvEA,EAAc,IAAI,MAEpB,CAAC,EACP,CAACA,EAAc,IAAI,KAAK,CAAC,CAC9B,CCDO,SAAS+J,GAAc,CAAE,KAAA7G,EAAM,MAAAZ,GAA6B,CAC3D,MAAA0H,EAAc7G,gBAAcD,CAAI,EAChC,CAAE,UAAAN,EAAW,mCAAAqH,EAAoC,yBAAAC,GAA6B5M,EAAM,QACxF,IAAM6M,kBAAgB,EACtB,CAAA,CACF,EACM/K,EAAa9B,EAAM,QACvB,IAAM2M,EAAmCD,CAAW,EACpD,CAACA,EAAaC,CAAkC,CAClD,EACM,CAAE,aAAAG,CAAA,EAAiBjL,EAAmBC,EAAY,CACtD,aAAc4K,EAAY,gBAAA,CAC3B,EAcM,MAAA,CAAE,YAZW1M,EAAM,QACxB,IACE8E,EAAWE,EAAO,CAChB,UAAAM,EACA,QAAS,IAAM,CACbsH,EAAyBF,CAAW,CACtC,EACA,MAAO,CAAE,QAASI,EAAe,OAAS,OAAQ,CAAA,CACnD,EACH,CAAC9H,EAAOM,EAAWwH,EAAcF,EAA0BF,CAAW,CACxE,EAEsB,aAAAI,CAAa,CACrC,CC5BO,SAASC,GAAc,CAAE,KAAAnH,EAAM,MAAAZ,GAA6B,CAC3D,MAAA0H,EAAc7G,gBAAcD,CAAI,EAChC,CAAE,UAAAN,EAAW,mCAAA0H,EAAoC,yBAAAC,GAA6BjN,EAAM,QACxF,IAAMkN,kBAAgB,EACtB,CAAA,CACF,EACMpL,EAAa9B,EAAM,QACvB,IAAMgN,EAAmCN,CAAW,EACpD,CAACA,EAAaM,CAAkC,CAClD,EACM,CAAE,aAAAG,CAAA,EAAiBtL,EAAmBC,EAAY,CACtD,aAAc4K,EAAY,gBAAA,CAC3B,EAcM,MAAA,CAAE,YAZW1M,EAAM,QACxB,IACE8E,EAAWE,EAAO,CAChB,UAAAM,EACA,QAAS,IAAM,CACb2H,EAAyBP,CAAW,CACtC,EACA,MAAO,CAAE,QAASS,EAAe,OAAS,OAAQ,CAAA,CACnD,EACH,CAACnI,EAAOM,EAAW6H,EAAcF,EAA0BP,CAAW,CACxE,EAEsB,aAAAS,CAAa,CACrC,CCxBO,SAASC,GAASC,EAAuChI,EAA2B,GAAI,CACvF,MAAAiI,EAAatN,EAAM,OAAsB,IAAI,EAC7CuN,EAAWvN,EAAM,OAAsB,IAAI,EAG3CwN,EAAmBnI,EAAQ,kBAAoB,GAE/CoI,EAAgB3G,GAAsB,CAC1CyG,EAAS,QAAU,KACnBD,EAAW,QAAUxG,EAAM,cAAc,CAAC,EAAE,OAC9C,EAEM4G,EAAe5G,GAAsB,CACzCyG,EAAS,QAAUzG,EAAM,cAAc,CAAC,EAAE,OAC5C,EAEM6G,EAAa3N,EAAM,YAAY,IAAM,CACzC,GAAI,CAACsN,EAAW,SAAW,CAACC,EAAS,QACnC,OAEI,MAAAK,EAAWN,EAAW,QAAUC,EAAS,QACzCM,EAAcD,EAAWJ,EACzBM,EAAeF,EAAW,CAACJ,EAE7BK,GAAexI,EAAQ,aAAaA,EAAQ,YAAY,EACxDyI,GAAgBzI,EAAQ,cAAcA,EAAQ,aAAa,CAAA,EAC9D,CAACmI,EAAkBnI,CAAO,CAAC,EAE9BrF,EAAM,UAAU,IAAM,CACpB,MAAM+N,EAAcV,EAAQ,QAC5B,OAAIU,IACFA,EAAY,iBAAiB,aAAcN,EAAc,CAAE,QAAS,GAAM,EAC1EM,EAAY,iBAAiB,YAAaL,EAAa,CAAE,QAAS,GAAM,EACxEK,EAAY,iBAAiB,WAAYJ,EAAY,CAAE,QAAS,GAAM,GAEjE,IAAM,CACPI,IACUA,EAAA,oBAAoB,aAAcN,CAAY,EAC9CM,EAAA,oBAAoB,YAAaL,CAAW,EAC5CK,EAAA,oBAAoB,WAAYJ,CAAU,EAE1D,CAAA,EACC,CAACN,EAASM,CAAU,CAAC,CAC1B,CClDgB,SAAAK,GAAc,CAAE,MAAAhJ,GAA6B,CAC3D,KAAM,CAAE,SAAAiJ,EAAU,MAAAhM,GAAUQ,EAAmB,EAAA,OACzC,CAAE,UAAA6C,GAActF,EAAM,QAAQ,IAAMkO,EAAAA,gBAAmB,EAAA,EAAE,EAiB/D,MAAO,CAAE,YAfWlO,EAAM,QAAQ,IACzB8E,EAAWE,EAAO,CACvB,UAAAM,EACA,QAAS,IAAM,CACT2I,GAAUA,EAAS,CAAE,IAAK,cAAe,CAC/C,EACA,eAAgBhM,GAAA,MAAAA,EAAO,SAAW,OAAS,QAC3C,sBAAuBA,EACnBA,EAAM,eAAiB,GACrBA,EAAM,eAAe,QAAQ,CAAC,EAC9B,KACF,GAAA,CACL,EACA,CAAC+C,EAAOM,EAAW2I,EAAUhM,CAAK,CAAC,CAEjB,CACvB,CCbO,SAASkM,GACdxK,EAC+B,SACzB,MAAAH,EAAiBE,EAAkBC,CAAQ,EAE3C,CAAE,UAAA2B,EAAW,mBAAA8I,CAAmB,EAAIpO,EAAM,QAC9C,IAAMqO,EAAAA,yBAAyB7K,CAAc,EAC7C,CAACyE,EAAAA,oBAAoBzE,CAAc,CAAC,CACtC,EAUO,MAAA,CAAE,QARO3B,EACduM,EACA,CAAC,GACCrH,EAAAvD,EAAe,cAAf,MAAAuD,EAA4B,UAC5BE,EAAAzD,EAAe,YAAY,oBAAoBA,EAAe,MAAM,IAApE,MAAAyD,EAAuE,QAE3E,EAEkB,UAAA3B,CAAU,CAC9B,CCpBO,SAASgJ,GAAuC,CACrD,OAAAC,EACA,SAAAC,EACA,aAAAC,EACA,eAAAC,EACA,eAAAC,EACA,cAAAC,EACA,GAAGC,CACL,EAA2B,OACzB,MAAMjJ,EAAO4D,EAAAA,oBAAoB,EAC3BJ,GAAQrC,EAAAnB,GAAA,YAAAA,EAAM,mBAAN,YAAAmB,EAAwB,oBAAoBwH,GAEpDO,EAAqB9O,EAAM,OAAO,EAAK,EAEvC,CAAE,OAAA+O,EAAQ,UAAAzJ,EAAW,gBAAA0J,EAAiB,gBAAAC,CAAA,EAAoBjP,EAAM,QACpE,IACE4F,EACIsJ,EAAoB,iBAAAX,EAAQ3I,EAAM8I,EAAgBC,EAAgBC,CAAa,EAC/EO,oBAAkB,EACxB,CAACvJ,EAAM2I,EAAQ,KAAK,UAAUG,CAAc,EAAGC,CAAc,CAC/D,EAEMS,EAAUvN,EAAmBmN,EAAiB,EAAK,EACnDK,EAAUxN,EAAmBoN,EAAiBR,GAAgB,CAAC,EAACrF,GAAA,MAAAA,EAAO,UAAS,EAEtFpJ,EAAM,UAAU,IAAM,CACTwO,GAAA,MAAAA,EAAAa,EAASP,EAAmB,SACvCA,EAAmB,QAAU,EAAA,EAC5B,CAACO,EAASb,CAAQ,CAAC,EAEtBxO,EAAM,UAAU,IAAM,CAChByO,IAAiB,SACf7F,EAAAA,IAAA,MAAM,+BAAgC2F,EAAQE,CAAY,EAC9DM,EAAON,CAAY,EAIvB,EAAG,EAAE,EAEL,MAAMa,EAAWtP,EAAM,QAAQ,IAAM8E,EAAW+J,EAAM,CAAE,UAAAvJ,EAAW,EAAG,CAACuJ,EAAMvJ,CAAS,CAAC,EAEjFiK,EAA2DvP,EAAM,YACpEwP,GAAQ,OACPV,EAAmB,QAAU,GAC7BC,EAAS,EAAA,MAAM,IAAOD,EAAmB,QAAU,EAAM,GACzD/H,EAAA8H,EAAK,UAAL,MAAA9H,EAAA,KAAA8H,EAAeW,EACjB,EACA,CAACX,EAAME,CAAM,CACf,EAEO,MAAA,CACL,OAAAA,EACA,QAAAM,EACA,QAAAD,EACA,MAAAhG,EACA,YAAa,CACX,GAAGkG,EACH,eAAgBD,EAChB,iBAAkBd,EAClB,kBAAmBc,EACnB,SAAUD,EACV,QAASG,CAAA,CAEb,CACF,CCvCO,SAASE,GACdC,EAAa,CACXvD,QAAM,OAAO,OACbA,QAAM,OAAO,WACbA,QAAM,OAAO,YACbA,QAAM,OAAO,iBACbA,EAAAA,MAAM,OAAO,OACf,EACA9G,EAA4B,CAAA,EACA,CACtB,MAAAO,EAAOC,EAAAA,cAAcR,EAAQ,IAAI,EACjC,CAACiF,EAAiBqF,CAAkB,EAAI3P,EAAM,SAA2B,CAAA,CAAE,EAC3E,CAAC4P,EAAcC,CAAe,EAAI7P,EAAM,SAAwB,CAAA,CAAE,EAElE8P,EAAW9P,EAAM,QAAQ,IACtB0P,EAAQ,IAAKK,GAAOC,EAAAA,mBAAmBD,CAAC,EAAIA,EAAE,OAASA,CAAE,EAC/D,CAAC,KAAK,UAAUL,CAAO,CAAC,CAAC,EAE5B1P,OAAAA,EAAM,UAAU,IAAM,CACd,MAAAmC,EAAe8N,EAAAA,0BAA0BrK,EAAMkK,EAAU,CAC7D,qBAAsBzK,EAAQ,aAC9B,eAAgBA,EAAQ,cAAA,CACzB,EAAE,UAAU,CAAC,CAAE,gBAAAiF,EAAiB,aAAAsF,KAAmB,CAC9ChH,EAAAA,IAAA,MAAM,wBAAyB0B,EAAiBsF,CAAY,EAChED,EAAmBrF,CAAe,EAClCuF,EAAgBD,CAAY,CAAA,CAC7B,EACM,MAAA,IAAMzN,EAAa,YAAY,CAAA,EACrC,CACDyD,EACA,KAAK,UAAUP,EAAQ,cAAc,EACrC,KAAK,UAAUA,EAAQ,YAAY,EACnC,KAAK,UAAUqK,CAAO,CAAA,CACvB,EAE4B1P,EAAM,QAAQ,IAAM,CAC3C,GAAAkQ,EAAAA,qBAAqBR,CAAO,EAAG,CAC3B,MAAAS,EAAqBC,GAAqBV,EAASE,CAAY,EAC/DS,EACJ,MAAM,KAAK/F,CAAe,EACf,OAAAsF,EAAA,QAAS5L,GAAgB,CAChCmM,EAAmB,IAAInM,EAAY,QAAQ,IACbmM,EAAmB,IAAInM,EAAY,QAAQ,GAAK,CAAC,GACzD,QAASsM,GAAsB,CACrD,GACEhG,EAAgB,KACd,CAAC,CAAE,YAAalG,EAAG,YAAAmM,KACjBvM,EAAY,WAAaI,EAAE,UAAYmM,EAAY,SAAWD,CAAA,EAGlE,OAEE1H,EAAAA,IAAA,MACF,OAAO0H,CAAiB,gCAAgCtM,EAAY,QAAQ,GAC9E,EACA,MAAMwM,EAAyC,CAC7C,YAAAxM,EACA,OAAQsM,CACV,EACAD,EAAgC,KAAKG,CAAW,CAAA,CACjD,CACH,CACD,EACMH,CAAA,KAEA,QAAA/F,CAER,EAAA,CAACA,EAAiBsF,EAAcF,CAAO,CAAC,CAG7C,CAEA,SAASe,GAAcC,EAAcC,EAAsB,CACnD,MAAAC,EAAc,IAAI,IAAIF,CAAI,EAChC,UAAWG,KAAQF,EACjBC,EAAY,OAAOC,CAAI,EAElB,OAAAD,CACT,CAEgB,SAAAR,GACdV,EACAE,EAC8C,CACxC,MAAAkB,MAAqB,IACvB,GAAAZ,EAAAA,qBAAqBR,CAAO,EAAG,CACjC,MAAMqB,EAA6BrB,EAChC,OAAQsB,GAAqBA,EAAiB,eAAe,EAC7D,IAAKA,GAAqBA,EAAiB,MAAM,EAEvCpB,EAAA,QAAS5L,GAAgB,CACpC,MAAMiN,EAA4BjN,EAC/B,qBAAqB,EACrB,IAAKkN,GAAQ,OAAA,OAAAnK,EAAAmK,EAAI,QAAJ,YAAAnK,EAAW,OAAM,EAC9B,OAAQoK,GAA6CA,IAAgB,MAAS,EAC3EC,EAAsC,MAAM,KAChDX,GAAW,IAAI,IAAIM,CAA0B,EAAG,IAAI,IAAIE,CAAyB,CAAC,CACpF,EAEIG,EAAoC,OAAS,GAChCN,EAAA,IAAI9M,EAAY,SAAUoN,CAAmC,CAC9E,CACD,CAAA,CAEI,OAAAN,CACT,CChHO,SAASO,GAAQhM,EAAuB,CAC7C,MAAMO,EAAOI,EAAAA,eAAe,EACtBC,EAAkBN,EAAmBC,CAAI,EACzC0L,EAAiBtR,EAAM,QAC3B,IAAMiG,IAAoBG,EAAAA,gBAAgB,aAC1C,CAACH,CAAe,CAClB,EACMsL,EAAQvR,EAAM,QAClB,IAAMwR,EAAU,UAAA5L,EAAMP,CAAO,EAC7B,CAACO,EAAMP,EAASiM,CAAc,CAChC,EACMG,EAAY5P,EAAmB0P,EAAM,oBAAqB,EAAK,EAC/DG,EAAe7P,EAA0C0P,EAAM,kBAAmB,CAAA,CAAE,EAE1F,MAAO,CAAE,KAAMA,EAAM,KAAM,aAAAG,EAAc,UAAAD,CAAU,CACrD,CC1BgB,SAAAE,GAAyBtM,EAA2C,GAAI,CACtF,KAAM,CAACuM,EAAaC,CAAW,EAAI7R,EAAM,SACvC8R,EAAAA,gBAAgBzM,EAAQ,SAAUA,EAAQ,aAAe,EAAK,CAChE,EAEM0M,EAAwB/R,EAAM,YAAagS,GAAuB,CACtEH,EAAaI,IAAU,CAAE,GAAGA,EAAM,aAAcD,GAAY,CAC9D,EAAG,EAAE,EACCE,EAAwBlS,EAAM,YAAagS,GAAuB,CACtEH,EAAaI,IAAU,CAAE,GAAGA,EAAM,aAAcD,GAAY,CAC9D,EAAG,EAAE,EACCG,EAAyBnS,EAAM,YAAamK,GAAqB,CACrE0H,EAAaI,IAAU,CAAE,GAAGA,EAAM,cAAe9H,GAAW,CAC9D,EAAG,EAAE,EACCiI,EAAyBpS,EAAM,YAAamK,GAAqB,CACrE0H,EAAaI,IAAU,CAAE,GAAGA,EAAM,cAAe9H,GAAW,CAC9D,EAAG,EAAE,EACCkI,EAAerS,EAAM,YAAasS,GAAqB,CAC3DT,EAAaI,IAAU,CAAE,GAAGA,EAAM,SAAAK,CAAqB,EAAA,CACzD,EAAG,EAAE,EAELtS,OAAAA,EAAM,UAAU,IAAM,CACJuS,EAAAA,gBAAAX,EAAavM,EAAQ,aAAe,EAAK,CACxD,EAAA,CAACuM,EAAavM,EAAQ,WAAW,CAAC,EAE9B,CACL,YAAAuM,EACA,sBAAAG,EACA,sBAAAG,EACA,uBAAAC,EACA,uBAAAC,EACA,aAAAC,CACF,CACF,CC9CO,SAASG,GAAexO,EAA2BqB,EAAiC,GAAI,CACvF,MAAAjB,EAAIF,EAAqBF,CAAW,EAEpC4B,EAAOC,EAAAA,cAAcR,EAAQ,IAAI,EAEjC1E,EAAWX,EAAM,QAAQ,IAAMyS,EAAA,2BAA2B7M,EAAMxB,CAAC,EAAG,CAACwB,EAAMxB,CAAC,CAAC,EAK5E,OAJavC,EAClBlB,EACAyD,EAAE,QAAWA,EAAuB,cAAgB,CAAC,EAACA,GAAA,MAAAA,EAAG,YAC3D,CAEF,CCfgB,SAAAsO,GACdC,EACAtN,EAAgC,CAAE,QAAS,GAAI,sBAAuB,GACtE,CACA,MAAM+D,EAAQwJ,EAAAA,iBAAiBD,CAAqB,EACAA,EAAsB,YAAY,MAClFA,EACE,CAACE,EAAQC,CAAS,EAAI9S,EAAM,SAAS,CAAC,EAC5CA,OAAAA,EAAM,UAAU,IAAM,CACpB,GAAI,CAACoJ,GAAS,CAACA,EAAM,YACnB,OAGF,KAAM,CAAE,QAAA2J,EAAS,SAAAC,CAAA,EAAaC,EAAAA,oBAAoB7J,EAAO/D,CAAO,EAE1D6N,EAAeF,EAAS,kBACxBG,EAAY,IAAI,WAAWD,CAAY,EAYvCE,EAAW,YAVI,IAAM,CACzBJ,EAAS,qBAAqBG,CAAS,EACvC,IAAIE,EAAM,EACV,QAASlS,EAAI,EAAGA,EAAIgS,EAAU,OAAQhS,IAAK,CACnC,MAAA+D,EAAIiO,EAAUhS,CAAC,EACrBkS,GAAOnO,EAAIA,CAAA,CAEb4N,EAAU,KAAK,KAAKO,EAAMF,EAAU,MAAM,EAAI,GAAG,CACnD,EAE2C,IAAO,EAAE,EAEpD,MAAO,IAAM,CACHJ,EAAA,EACR,cAAcK,CAAQ,CACxB,CAAA,EACC,CAAChK,EAAOA,GAAA,YAAAA,EAAO,YAAa,KAAK,UAAU/D,CAAO,CAAC,CAAC,EAEhDwN,CACT,CAEA,MAAMS,GAAwBC,GAA8B,CACpD,MAAAC,EAAeC,GAAkB,CAGjC,IAAAC,EAAK,EAAK,KAAK,IAAI,KAAO,KAAK,IAAI,IAAOD,CAAK,CAAC,EAAI,GAAM,IACzD,OAAAC,EAAA,KAAK,KAAKA,CAAE,EAEVA,CACT,EAGO,OAAAH,EAAY,IAAKE,GAClBA,IAAU,KACL,EAEFD,EAAYC,CAAK,CACzB,CACH,EAyBME,GAAoB,CACxB,MAAO,EACP,OAAQ,IACR,OAAQ,IACR,eAAgB,GAChB,gBAAiB,CAAE,QAAS,IAAK,CACnC,EAMO,SAASC,GACdjB,EACAtN,EAAuC,GACvC,OACA,MAAM+D,EACJuJ,aAAiCxG,EAAAA,MAC7BwG,GACgD5L,EAAA4L,GAAA,YAAAA,EAAuB,cAAvB,YAAA5L,EAAoC,MACpF8M,EAAO,CAAE,GAAGF,GAAmB,GAAGtO,CAAQ,EAC1C,CAACyO,EAAgBC,CAAiB,EAAI/T,EAAM,SAChD,IAAI,MAAM6T,EAAK,KAAK,EAAE,KAAK,CAAC,CAC9B,EAEA7T,OAAAA,EAAM,UAAU,IAAM,CACpB,GAAI,CAACoJ,GAAS,EAACA,GAAA,MAAAA,EAAO,aACpB,OAEF,KAAM,CAAE,SAAA4J,EAAU,QAAAD,GAAYE,EAAoB,oBAAA7J,EAAOyK,EAAK,eAAe,EAEvEX,EAAeF,EAAS,kBACxBG,EAAY,IAAI,aAAaD,CAAY,EAuBzCE,EAAW,YArBI,IAAM,CACzBJ,EAAS,sBAAsBG,CAAS,EACxC,IAAII,EAA4B,IAAI,aAAaJ,EAAU,MAAM,EACjE,QAAShS,EAAI,EAAGA,EAAIgS,EAAU,OAAQhS,IACxBoS,EAAApS,CAAC,EAAIgS,EAAUhS,CAAC,EAE9BoS,EAAcA,EAAY,MAAMlO,EAAQ,OAAQA,EAAQ,MAAM,EAExD,MAAA2O,EAAwBV,GAAqBC,CAAW,EACxDU,EAAY,KAAK,KAAKD,EAAsB,OAASH,EAAK,KAAK,EAC/DK,EAAwB,CAAC,EAC/B,QAAS/S,EAAI,EAAGA,EAAI0S,EAAK,MAAO1S,IAAK,CACnC,MAAMgT,EAAgBH,EACnB,MAAM7S,EAAI8S,GAAY9S,EAAI,GAAK8S,CAAS,EACxC,OAAO,CAACG,EAAKtL,IAASsL,GAAOtL,EAAM,CAAC,EAChCoL,EAAA,KAAKC,EAAgBF,CAAS,CAAA,CAGvCF,EAAkBG,CAAM,CAC1B,EAE2CL,EAAK,cAAc,EAE9D,MAAO,IAAM,CACHd,EAAA,EACR,cAAcK,CAAQ,CACxB,CAAA,EACC,CAAChK,EAAOA,GAAA,YAAAA,EAAO,YAAa,KAAK,UAAU/D,CAAO,CAAC,CAAC,EAEhDyO,CACT,CAWA,MAAMO,GAAmB,CACvB,SAAU,IACV,cAAe,EACf,eAAgB,EAClB,EAKO,SAASC,GACd3B,EACAtN,EAAgC,GAChC,OACA,MAAM+D,EACJuJ,aAAiCxG,EAAAA,MAC7BwG,GACgD5L,EAAA4L,GAAA,YAAAA,EAAuB,cAAvB,YAAA5L,EAAoC,MACpF8M,EAAO,CAAE,GAAGQ,GAAkB,GAAGhP,CAAQ,EAEzCkP,EAAgBvU,EAAM,OAAO,IAAI,YAAc,EAC/CwU,EAAUxU,EAAM,OAAO,YAAY,KAAK,EACxCyU,EAAUzU,EAAM,OAAO,CAAC,EACxB,CAAC0U,EAAMC,CAAO,EAAI3U,EAAM,SAAmB,CAAA,CAAE,EAE7C4U,EAAW5U,EAAM,YAAa6U,GAAuB,CACzDF,EACE,MAAM,KACJG,GAAWD,EAAMhB,EAAK,QAAQ,EAAE,IAAKkB,GAAM,KAAK,KAAKA,CAAC,EAAIlB,EAAK,aAAa,CAAA,CAGhF,CACF,EAAG,EAAE,EAEL7T,OAAAA,EAAM,UAAU,IAAM,CACpB,GAAI,CAACoJ,GAAS,EAACA,GAAA,MAAAA,EAAO,aACpB,OAEF,KAAM,CAAE,SAAA4J,EAAU,QAAAD,GAAYE,EAAAA,oBAAoB7J,EAAO,CACvD,QAAS4L,EAAgBnB,EAAK,QAAQ,CAAA,CACvC,EAEKX,EAAe8B,EAAgBnB,EAAK,QAAQ,EAC5CV,EAAY,IAAI,aAAaD,CAAY,EAEzC+B,EAAS,IAAM,CAMnB,GALAC,EAAiB,sBAAsBD,CAAM,EAC7CjC,EAAS,uBAAuBG,CAAS,EAC3BoB,EAAA,QAAQ,IAAI,CAACQ,EAAG5T,IAAM4T,EAAI5B,EAAUhS,CAAC,CAAC,EACpDsT,EAAQ,SAAW,EAEf,YAAY,IAAI,EAAID,EAAQ,SAAWX,EAAK,eAAgB,CAC9D,MAAMsB,EAAUhC,EAAU,IAAK4B,GAAMA,EAAIN,EAAQ,OAAO,EACxDG,EAASO,CAAO,EACRX,EAAA,QAAU,YAAY,IAAI,EAClCC,EAAQ,QAAU,CAAA,CAEtB,EAEI,IAAAS,EAAiB,sBAAsBD,CAAM,EAEjD,MAAO,IAAM,CACHlC,EAAA,EACR,qBAAqBmC,CAAc,CACrC,CAAA,EACC,CAAC9L,EAAOA,GAAA,YAAAA,EAAO,YAAa,KAAK,UAAU/D,CAAO,EAAGuP,CAAQ,CAAC,EAE1D,CACL,KAAAF,CACF,CACF,CAEA,SAASM,EAAgBI,EAAW,CAC9B,OAAAA,EAAI,GAAW,GACPC,GAASD,CAAC,CACxB,CAMA,SAASC,GAASN,EAAW,CAC3B,IAAI3Q,EAAI,EACR,KAAQ2Q,IAAM,GACN3Q,IAAA,EAED,OAAAA,CACT,CAEA,SAAS0Q,GAAWQ,EAAyBC,EAAoB,CAC/D,MAAMC,EAAY,KAAK,MAAMF,EAAU,OAASC,CAAU,EACpDE,EAAe,IAAI,aAAaF,CAAU,EAChD,QAASpU,EAAI,EAAGA,EAAIoU,EAAYpU,IAAK,CACnC,MAAMuU,EAAaF,EAAYrU,EAC/B,IAAIkS,EAAM,EACV,QAASsC,EAAI,EAAGA,EAAIH,EAAWG,IAC7BtC,EAAMA,EAAM,KAAK,IAAIiC,EAAUI,EAAaC,CAAC,CAAC,EAEnCF,EAAAtU,CAAC,EAAIkS,EAAMmC,CAAA,CAEnB,OAAAC,CACT","x_google_ignoreList":[7]}