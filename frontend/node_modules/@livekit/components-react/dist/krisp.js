"use strict";var P=Object.create;var d=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var y=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of S(t))!h.call(e,s)&&s!==r&&d(e,s,{get:()=>t[s],enumerable:!(n=N(t,s))||n.enumerable});return e};var E=(e,t,r)=>(r=e!=null?P(F(e)):{},y(t||!e||!e.__esModule?d(r,"default",{value:e,enumerable:!0}):r,e));Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const K=require("react"),m=require("livekit-client"),p=require("./shared-BVVr9jJ4.js");function O(e){const t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e){for(const r in e)if(r!=="default"){const n=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(t,r,n.get?n:{enumerable:!0,get:()=>e[r]})}}return t.default=e,Object.freeze(t)}const c=O(K);function j(e={}){const[t,r]=c.useState(!1),[n,s]=c.useState(!1),[b,u]=c.useState(!1);let i=p.useLocalParticipant().microphoneTrack;const[a,g]=c.useState();e.trackRef&&(i=e.trackRef.publication);const k=c.useCallback(async l=>{if(l){const{KrispNoiseFilter:o,isKrispNoiseFilterSupported:f}=await import("@livekit/krisp-noise-filter");if(!f()){p.log.warn("LiveKit-Krisp noise filter is not supported in this browser");return}a||g(o(e.filterOptions))}r(o=>(o!==l&&s(!0),l))},[]);return c.useEffect(()=>{var l;if(i&&i.track instanceof m.LocalAudioTrack&&a){const o=i.track.getProcessor();o&&o.name==="livekit-noise-filter"?(s(!0),o.setEnabled(t).finally(()=>{s(!1),u(t)})):!o&&t&&(s(!0),(l=i==null?void 0:i.track)==null||l.setProcessor(a).then(()=>a.setEnabled(t)).then(()=>{u(!0)}).catch(f=>{u(!1),p.log.error("Krisp hook: error enabling filter",f)}).finally(()=>{s(!1)}))}},[t,i,a]),{setNoiseFilterEnabled:k,isNoiseFilterEnabled:b,isNoiseFilterPending:n,processor:a}}exports.useKrispNoiseFilter=j;
//# sourceMappingURL=krisp.js.map
