"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/livekit-client";
exports.ids = ["vendor-chunks/livekit-client"];
exports.modules = {

/***/ "(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/livekit-client/dist/livekit-client.esm.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioPresets: () => (/* binding */ AudioPresets),\n/* harmony export */   BackupCodecPolicy: () => (/* binding */ BackupCodecPolicy),\n/* harmony export */   BaseKeyProvider: () => (/* binding */ BaseKeyProvider),\n/* harmony export */   CheckStatus: () => (/* binding */ CheckStatus),\n/* harmony export */   Checker: () => (/* binding */ Checker),\n/* harmony export */   ConnectionCheck: () => (/* binding */ ConnectionCheck),\n/* harmony export */   ConnectionError: () => (/* binding */ ConnectionError),\n/* harmony export */   ConnectionErrorReason: () => (/* binding */ ConnectionErrorReason),\n/* harmony export */   ConnectionQuality: () => (/* binding */ ConnectionQuality),\n/* harmony export */   ConnectionState: () => (/* binding */ ConnectionState),\n/* harmony export */   CriticalTimers: () => (/* binding */ CriticalTimers),\n/* harmony export */   CryptorError: () => (/* binding */ CryptorError),\n/* harmony export */   CryptorErrorReason: () => (/* binding */ CryptorErrorReason),\n/* harmony export */   CryptorEvent: () => (/* binding */ CryptorEvent),\n/* harmony export */   DataPacket_Kind: () => (/* binding */ DataPacket_Kind),\n/* harmony export */   DefaultReconnectPolicy: () => (/* binding */ DefaultReconnectPolicy),\n/* harmony export */   DeviceUnsupportedError: () => (/* binding */ DeviceUnsupportedError),\n/* harmony export */   DisconnectReason: () => (/* binding */ DisconnectReason),\n/* harmony export */   EncryptionEvent: () => (/* binding */ EncryptionEvent),\n/* harmony export */   EngineEvent: () => (/* binding */ EngineEvent),\n/* harmony export */   ExternalE2EEKeyProvider: () => (/* binding */ ExternalE2EEKeyProvider),\n/* harmony export */   KeyHandlerEvent: () => (/* binding */ KeyHandlerEvent),\n/* harmony export */   KeyProviderEvent: () => (/* binding */ KeyProviderEvent),\n/* harmony export */   LivekitError: () => (/* binding */ LivekitError),\n/* harmony export */   LocalAudioTrack: () => (/* binding */ LocalAudioTrack),\n/* harmony export */   LocalParticipant: () => (/* binding */ LocalParticipant),\n/* harmony export */   LocalTrack: () => (/* binding */ LocalTrack),\n/* harmony export */   LocalTrackPublication: () => (/* binding */ LocalTrackPublication),\n/* harmony export */   LocalTrackRecorder: () => (/* binding */ LocalTrackRecorder),\n/* harmony export */   LocalVideoTrack: () => (/* binding */ LocalVideoTrack),\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   LoggerNames: () => (/* binding */ LoggerNames),\n/* harmony export */   MediaDeviceFailure: () => (/* binding */ MediaDeviceFailure),\n/* harmony export */   Mutex: () => (/* binding */ _),\n/* harmony export */   NegotiationError: () => (/* binding */ NegotiationError),\n/* harmony export */   Participant: () => (/* binding */ Participant),\n/* harmony export */   ParticipantEvent: () => (/* binding */ ParticipantEvent),\n/* harmony export */   ParticipantKind: () => (/* binding */ ParticipantInfo_Kind),\n/* harmony export */   PublishDataError: () => (/* binding */ PublishDataError),\n/* harmony export */   PublishTrackError: () => (/* binding */ PublishTrackError),\n/* harmony export */   RemoteAudioTrack: () => (/* binding */ RemoteAudioTrack),\n/* harmony export */   RemoteParticipant: () => (/* binding */ RemoteParticipant),\n/* harmony export */   RemoteTrack: () => (/* binding */ RemoteTrack),\n/* harmony export */   RemoteTrackPublication: () => (/* binding */ RemoteTrackPublication),\n/* harmony export */   RemoteVideoTrack: () => (/* binding */ RemoteVideoTrack),\n/* harmony export */   Room: () => (/* binding */ Room),\n/* harmony export */   RoomEvent: () => (/* binding */ RoomEvent),\n/* harmony export */   RpcError: () => (/* binding */ RpcError),\n/* harmony export */   ScreenSharePresets: () => (/* binding */ ScreenSharePresets),\n/* harmony export */   SignalRequestError: () => (/* binding */ SignalRequestError),\n/* harmony export */   SubscriptionError: () => (/* binding */ SubscriptionError),\n/* harmony export */   Track: () => (/* binding */ Track),\n/* harmony export */   TrackEvent: () => (/* binding */ TrackEvent),\n/* harmony export */   TrackInvalidError: () => (/* binding */ TrackInvalidError),\n/* harmony export */   TrackPublication: () => (/* binding */ TrackPublication),\n/* harmony export */   TrackType: () => (/* binding */ TrackType),\n/* harmony export */   UnexpectedConnectionState: () => (/* binding */ UnexpectedConnectionState),\n/* harmony export */   UnsupportedServer: () => (/* binding */ UnsupportedServer),\n/* harmony export */   VideoPreset: () => (/* binding */ VideoPreset),\n/* harmony export */   VideoPresets: () => (/* binding */ VideoPresets),\n/* harmony export */   VideoPresets43: () => (/* binding */ VideoPresets43),\n/* harmony export */   VideoQuality: () => (/* binding */ VideoQuality),\n/* harmony export */   attachToElement: () => (/* binding */ attachToElement),\n/* harmony export */   attributes: () => (/* binding */ attributeTypings),\n/* harmony export */   compareVersions: () => (/* binding */ compareVersions),\n/* harmony export */   createAudioAnalyser: () => (/* binding */ createAudioAnalyser),\n/* harmony export */   createE2EEKey: () => (/* binding */ createE2EEKey),\n/* harmony export */   createKeyMaterialFromBuffer: () => (/* binding */ createKeyMaterialFromBuffer),\n/* harmony export */   createKeyMaterialFromString: () => (/* binding */ createKeyMaterialFromString),\n/* harmony export */   createLocalAudioTrack: () => (/* binding */ createLocalAudioTrack),\n/* harmony export */   createLocalScreenTracks: () => (/* binding */ createLocalScreenTracks),\n/* harmony export */   createLocalTracks: () => (/* binding */ createLocalTracks),\n/* harmony export */   createLocalVideoTrack: () => (/* binding */ createLocalVideoTrack),\n/* harmony export */   deriveKeys: () => (/* binding */ deriveKeys),\n/* harmony export */   detachTrack: () => (/* binding */ detachTrack),\n/* harmony export */   facingModeFromDeviceLabel: () => (/* binding */ facingModeFromDeviceLabel),\n/* harmony export */   facingModeFromLocalTrack: () => (/* binding */ facingModeFromLocalTrack),\n/* harmony export */   getBrowser: () => (/* binding */ getBrowser),\n/* harmony export */   getEmptyAudioStreamTrack: () => (/* binding */ getEmptyAudioStreamTrack),\n/* harmony export */   getEmptyVideoStreamTrack: () => (/* binding */ getEmptyVideoStreamTrack),\n/* harmony export */   getLogger: () => (/* binding */ getLogger),\n/* harmony export */   importKey: () => (/* binding */ importKey),\n/* harmony export */   isAudioTrack: () => (/* binding */ isAudioTrack),\n/* harmony export */   isBackupCodec: () => (/* binding */ isBackupCodec),\n/* harmony export */   isBrowserSupported: () => (/* binding */ isBrowserSupported),\n/* harmony export */   isE2EESupported: () => (/* binding */ isE2EESupported),\n/* harmony export */   isInsertableStreamSupported: () => (/* binding */ isInsertableStreamSupported),\n/* harmony export */   isLocalParticipant: () => (/* binding */ isLocalParticipant),\n/* harmony export */   isLocalTrack: () => (/* binding */ isLocalTrack),\n/* harmony export */   isRemoteParticipant: () => (/* binding */ isRemoteParticipant),\n/* harmony export */   isRemoteTrack: () => (/* binding */ isRemoteTrack),\n/* harmony export */   isScriptTransformSupported: () => (/* binding */ isScriptTransformSupported),\n/* harmony export */   isVideoFrame: () => (/* binding */ isVideoFrame),\n/* harmony export */   isVideoTrack: () => (/* binding */ isVideoTrack),\n/* harmony export */   needsRbspUnescaping: () => (/* binding */ needsRbspUnescaping),\n/* harmony export */   parseRbsp: () => (/* binding */ parseRbsp),\n/* harmony export */   protocolVersion: () => (/* binding */ protocolVersion),\n/* harmony export */   ratchet: () => (/* binding */ ratchet),\n/* harmony export */   setLogExtension: () => (/* binding */ setLogExtension),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   supportsAV1: () => (/* binding */ supportsAV1),\n/* harmony export */   supportsAdaptiveStream: () => (/* binding */ supportsAdaptiveStream),\n/* harmony export */   supportsDynacast: () => (/* binding */ supportsDynacast),\n/* harmony export */   supportsVP9: () => (/* binding */ supportsVP9),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   videoCodecs: () => (/* binding */ videoCodecs),\n/* harmony export */   writeRbsp: () => (/* binding */ writeRbsp)\n/* harmony export */ });\nfunction _mergeNamespaces(n, m) {\r\n  m.forEach(function (e) {\r\n    e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {\r\n      if (k !== 'default' && !(k in n)) {\r\n        var d = Object.getOwnPropertyDescriptor(e, k);\r\n        Object.defineProperty(n, k, d.get ? d : {\r\n          enumerable: true,\r\n          get: function () { return e[k]; }\r\n        });\r\n      }\r\n    });\r\n  });\r\n  return Object.freeze(n);\r\n}\r\n\r\nvar e = Object.defineProperty;\r\nvar h = (i, s, t) => s in i ? e(i, s, {\r\n  enumerable: true,\r\n  configurable: true,\r\n  writable: true,\r\n  value: t\r\n}) : i[s] = t;\r\nvar o = (i, s, t) => h(i, typeof s != \"symbol\" ? s + \"\" : s, t);\r\nclass _ {\r\n  constructor() {\r\n    o(this, \"_locking\");\r\n    o(this, \"_locks\");\r\n    this._locking = Promise.resolve(), this._locks = 0;\r\n  }\r\n  isLocked() {\r\n    return this._locks > 0;\r\n  }\r\n  lock() {\r\n    this._locks += 1;\r\n    let s;\r\n    const t = new Promise(l => s = () => {\r\n        this._locks -= 1, l();\r\n      }),\r\n      c = this._locking.then(() => s);\r\n    return this._locking = this._locking.then(() => t), c;\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Assert that condition is truthy or throw error (with message)\r\n */\r\nfunction assert(condition, msg) {\r\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean\r\n  if (!condition) {\r\n    throw new Error(msg);\r\n  }\r\n}\r\nconst FLOAT32_MAX = 3.4028234663852886e38,\r\n  FLOAT32_MIN = -34028234663852886e22,\r\n  UINT32_MAX = 0xffffffff,\r\n  INT32_MAX = 0x7fffffff,\r\n  INT32_MIN = -2147483648;\r\n/**\r\n * Assert a valid signed protobuf 32-bit integer.\r\n */\r\nfunction assertInt32(arg) {\r\n  if (typeof arg !== \"number\") throw new Error(\"invalid int 32: \" + typeof arg);\r\n  if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error(\"invalid int 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\r\n}\r\n/**\r\n * Assert a valid unsigned protobuf 32-bit integer.\r\n */\r\nfunction assertUInt32(arg) {\r\n  if (typeof arg !== \"number\") throw new Error(\"invalid uint 32: \" + typeof arg);\r\n  if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error(\"invalid uint 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\r\n}\r\n/**\r\n * Assert a valid protobuf float value.\r\n */\r\nfunction assertFloat32(arg) {\r\n  if (typeof arg !== \"number\") throw new Error(\"invalid float 32: \" + typeof arg);\r\n  if (!Number.isFinite(arg)) return;\r\n  if (arg > FLOAT32_MAX || arg < FLOAT32_MIN) throw new Error(\"invalid float 32: \" + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nconst enumTypeSymbol = Symbol(\"@bufbuild/protobuf/enum-type\");\r\n/**\r\n * Get reflection information from a generated enum.\r\n * If this function is called on something other than a generated\r\n * enum, it raises an error.\r\n */\r\nfunction getEnumType(enumObject) {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any\r\n  const t = enumObject[enumTypeSymbol];\r\n  assert(t, \"missing enum type on enum object\");\r\n  return t; // eslint-disable-line @typescript-eslint/no-unsafe-return\r\n}\r\n/**\r\n * Sets reflection information on a generated enum.\r\n */\r\nfunction setEnumType(enumObject, typeName, values, opt) {\r\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\r\n  enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map(v => ({\r\n    no: v.no,\r\n    name: v.name,\r\n    localName: enumObject[v.no]\r\n  })));\r\n}\r\n/**\r\n * Create a new EnumType with the given values.\r\n */\r\nfunction makeEnumType(typeName, values,\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n_opt) {\r\n  const names = Object.create(null);\r\n  const numbers = Object.create(null);\r\n  const normalValues = [];\r\n  for (const value of values) {\r\n    // We do not surface options at this time\r\n    // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};\r\n    const n = normalizeEnumValue(value);\r\n    normalValues.push(n);\r\n    names[value.name] = n;\r\n    numbers[value.no] = n;\r\n  }\r\n  return {\r\n    typeName,\r\n    values: normalValues,\r\n    // We do not surface options at this time\r\n    // options: opt?.options ?? Object.create(null),\r\n    findName(name) {\r\n      return names[name];\r\n    },\r\n    findNumber(no) {\r\n      return numbers[no];\r\n    }\r\n  };\r\n}\r\n/**\r\n * Create a new enum object with the given values.\r\n * Sets reflection information.\r\n */\r\nfunction makeEnum(typeName, values, opt) {\r\n  const enumObject = {};\r\n  for (const value of values) {\r\n    const n = normalizeEnumValue(value);\r\n    enumObject[n.localName] = n.no;\r\n    enumObject[n.no] = n.localName;\r\n  }\r\n  setEnumType(enumObject, typeName, values);\r\n  return enumObject;\r\n}\r\nfunction normalizeEnumValue(value) {\r\n  if (\"localName\" in value) {\r\n    return value;\r\n  }\r\n  return Object.assign(Object.assign({}, value), {\r\n    localName: value.name\r\n  });\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Message is the base class of every message, generated, or created at\r\n * runtime.\r\n *\r\n * It is _not_ safe to extend this class. If you want to create a message at\r\n * run time, use proto3.makeMessageType().\r\n */\r\nclass Message {\r\n  /**\r\n   * Compare with a message of the same type.\r\n   * Note that this function disregards extensions and unknown fields.\r\n   */\r\n  equals(other) {\r\n    return this.getType().runtime.util.equals(this.getType(), this, other);\r\n  }\r\n  /**\r\n   * Create a deep copy.\r\n   */\r\n  clone() {\r\n    return this.getType().runtime.util.clone(this);\r\n  }\r\n  /**\r\n   * Parse from binary data, merging fields.\r\n   *\r\n   * Repeated fields are appended. Map entries are added, overwriting\r\n   * existing keys.\r\n   *\r\n   * If a message field is already present, it will be merged with the\r\n   * new data.\r\n   */\r\n  fromBinary(bytes, options) {\r\n    const type = this.getType(),\r\n      format = type.runtime.bin,\r\n      opt = format.makeReadOptions(options);\r\n    format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);\r\n    return this;\r\n  }\r\n  /**\r\n   * Parse a message from a JSON value.\r\n   */\r\n  fromJson(jsonValue, options) {\r\n    const type = this.getType(),\r\n      format = type.runtime.json,\r\n      opt = format.makeReadOptions(options);\r\n    format.readMessage(type, jsonValue, opt, this);\r\n    return this;\r\n  }\r\n  /**\r\n   * Parse a message from a JSON string.\r\n   */\r\n  fromJsonString(jsonString, options) {\r\n    let json;\r\n    try {\r\n      json = JSON.parse(jsonString);\r\n    } catch (e) {\r\n      throw new Error(\"cannot decode \".concat(this.getType().typeName, \" from JSON: \").concat(e instanceof Error ? e.message : String(e)));\r\n    }\r\n    return this.fromJson(json, options);\r\n  }\r\n  /**\r\n   * Serialize the message to binary data.\r\n   */\r\n  toBinary(options) {\r\n    const type = this.getType(),\r\n      bin = type.runtime.bin,\r\n      opt = bin.makeWriteOptions(options),\r\n      writer = opt.writerFactory();\r\n    bin.writeMessage(this, writer, opt);\r\n    return writer.finish();\r\n  }\r\n  /**\r\n   * Serialize the message to a JSON value, a JavaScript value that can be\r\n   * passed to JSON.stringify().\r\n   */\r\n  toJson(options) {\r\n    const type = this.getType(),\r\n      json = type.runtime.json,\r\n      opt = json.makeWriteOptions(options);\r\n    return json.writeMessage(this, opt);\r\n  }\r\n  /**\r\n   * Serialize the message to a JSON string.\r\n   */\r\n  toJsonString(options) {\r\n    var _a;\r\n    const value = this.toJson(options);\r\n    return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\r\n  }\r\n  /**\r\n   * Override for serialization behavior. This will be invoked when calling\r\n   * JSON.stringify on this message (i.e. JSON.stringify(msg)).\r\n   *\r\n   * Note that this will not serialize google.protobuf.Any with a packed\r\n   * message because the protobuf JSON format specifies that it needs to be\r\n   * unpacked, and this is only possible with a type registry to look up the\r\n   * message type.  As a result, attempting to serialize a message with this\r\n   * type will throw an Error.\r\n   *\r\n   * This method is protected because you should not need to invoke it\r\n   * directly -- instead use JSON.stringify or toJsonString for\r\n   * stringified JSON.  Alternatively, if actual JSON is desired, you should\r\n   * use toJson.\r\n   */\r\n  toJSON() {\r\n    return this.toJson({\r\n      emitDefaultValues: true\r\n    });\r\n  }\r\n  /**\r\n   * Retrieve the MessageType of this message - a singleton that represents\r\n   * the protobuf message declaration and provides metadata for reflection-\r\n   * based operations.\r\n   */\r\n  getType() {\r\n    // Any class that extends Message _must_ provide a complete static\r\n    // implementation of MessageType.\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return\r\n    return Object.getPrototypeOf(this).constructor;\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Create a new message type using the given runtime.\r\n */\r\nfunction makeMessageType(runtime, typeName, fields, opt) {\r\n  var _a;\r\n  const localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(\".\") + 1);\r\n  const type = {\r\n    [localName]: function (data) {\r\n      runtime.util.initFields(this);\r\n      runtime.util.initPartial(data, this);\r\n    }\r\n  }[localName];\r\n  Object.setPrototypeOf(type.prototype, new Message());\r\n  Object.assign(type, {\r\n    runtime,\r\n    typeName,\r\n    fields: runtime.util.newFieldList(fields),\r\n    fromBinary(bytes, options) {\r\n      return new type().fromBinary(bytes, options);\r\n    },\r\n    fromJson(jsonValue, options) {\r\n      return new type().fromJson(jsonValue, options);\r\n    },\r\n    fromJsonString(jsonString, options) {\r\n      return new type().fromJsonString(jsonString, options);\r\n    },\r\n    equals(a, b) {\r\n      return runtime.util.equals(type, a, b);\r\n    }\r\n  });\r\n  return type;\r\n}\r\n\r\n// Copyright 2008 Google Inc.  All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n// * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n// * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n// * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n//\r\n// Code generated by the Protocol Buffer compiler is owned by the owner\r\n// of the input file used when generating it.  This code is not\r\n// standalone and requires a support library to be linked with it.  This\r\n// support library is itself covered by the above license.\r\n/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */\r\n/**\r\n * Read a 64 bit varint as two JS numbers.\r\n *\r\n * Returns tuple:\r\n * [0]: low bits\r\n * [1]: high bits\r\n *\r\n * Copyright 2008 Google Inc.  All rights reserved.\r\n *\r\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\r\n */\r\nfunction varint64read() {\r\n  let lowBits = 0;\r\n  let highBits = 0;\r\n  for (let shift = 0; shift < 28; shift += 7) {\r\n    let b = this.buf[this.pos++];\r\n    lowBits |= (b & 0x7f) << shift;\r\n    if ((b & 0x80) == 0) {\r\n      this.assertBounds();\r\n      return [lowBits, highBits];\r\n    }\r\n  }\r\n  let middleByte = this.buf[this.pos++];\r\n  // last four bits of the first 32 bit number\r\n  lowBits |= (middleByte & 0x0f) << 28;\r\n  // 3 upper bits are part of the next 32 bit number\r\n  highBits = (middleByte & 0x70) >> 4;\r\n  if ((middleByte & 0x80) == 0) {\r\n    this.assertBounds();\r\n    return [lowBits, highBits];\r\n  }\r\n  for (let shift = 3; shift <= 31; shift += 7) {\r\n    let b = this.buf[this.pos++];\r\n    highBits |= (b & 0x7f) << shift;\r\n    if ((b & 0x80) == 0) {\r\n      this.assertBounds();\r\n      return [lowBits, highBits];\r\n    }\r\n  }\r\n  throw new Error(\"invalid varint\");\r\n}\r\n/**\r\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\r\n *\r\n * Copyright 2008 Google Inc.  All rights reserved.\r\n *\r\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\r\n */\r\nfunction varint64write(lo, hi, bytes) {\r\n  for (let i = 0; i < 28; i = i + 7) {\r\n    const shift = lo >>> i;\r\n    const hasNext = !(shift >>> 7 == 0 && hi == 0);\r\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\r\n    bytes.push(byte);\r\n    if (!hasNext) {\r\n      return;\r\n    }\r\n  }\r\n  const splitBits = lo >>> 28 & 0x0f | (hi & 0x07) << 4;\r\n  const hasMoreBits = !(hi >> 3 == 0);\r\n  bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);\r\n  if (!hasMoreBits) {\r\n    return;\r\n  }\r\n  for (let i = 3; i < 31; i = i + 7) {\r\n    const shift = hi >>> i;\r\n    const hasNext = !(shift >>> 7 == 0);\r\n    const byte = (hasNext ? shift | 0x80 : shift) & 0xff;\r\n    bytes.push(byte);\r\n    if (!hasNext) {\r\n      return;\r\n    }\r\n  }\r\n  bytes.push(hi >>> 31 & 0x01);\r\n}\r\n// constants for binary math\r\nconst TWO_PWR_32_DBL = 0x100000000;\r\n/**\r\n * Parse decimal string of 64 bit integer value as two JS numbers.\r\n *\r\n * Copyright 2008 Google Inc.  All rights reserved.\r\n *\r\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\r\n */\r\nfunction int64FromString(dec) {\r\n  // Check for minus sign.\r\n  const minus = dec[0] === \"-\";\r\n  if (minus) {\r\n    dec = dec.slice(1);\r\n  }\r\n  // Work 6 decimal digits at a time, acting like we're converting base 1e6\r\n  // digits to binary. This is safe to do with floating point math because\r\n  // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\r\n  const base = 1e6;\r\n  let lowBits = 0;\r\n  let highBits = 0;\r\n  function add1e6digit(begin, end) {\r\n    // Note: Number('') is 0.\r\n    const digit1e6 = Number(dec.slice(begin, end));\r\n    highBits *= base;\r\n    lowBits = lowBits * base + digit1e6;\r\n    // Carry bits from lowBits to\r\n    if (lowBits >= TWO_PWR_32_DBL) {\r\n      highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);\r\n      lowBits = lowBits % TWO_PWR_32_DBL;\r\n    }\r\n  }\r\n  add1e6digit(-24, -18);\r\n  add1e6digit(-18, -12);\r\n  add1e6digit(-12, -6);\r\n  add1e6digit(-6);\r\n  return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);\r\n}\r\n/**\r\n * Losslessly converts a 64-bit signed integer in 32:32 split representation\r\n * into a decimal string.\r\n *\r\n * Copyright 2008 Google Inc.  All rights reserved.\r\n *\r\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\r\n */\r\nfunction int64ToString(lo, hi) {\r\n  let bits = newBits(lo, hi);\r\n  // If we're treating the input as a signed value and the high bit is set, do\r\n  // a manual two's complement conversion before the decimal conversion.\r\n  const negative = bits.hi & 0x80000000;\r\n  if (negative) {\r\n    bits = negate(bits.lo, bits.hi);\r\n  }\r\n  const result = uInt64ToString(bits.lo, bits.hi);\r\n  return negative ? \"-\" + result : result;\r\n}\r\n/**\r\n * Losslessly converts a 64-bit unsigned integer in 32:32 split representation\r\n * into a decimal string.\r\n *\r\n * Copyright 2008 Google Inc.  All rights reserved.\r\n *\r\n * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10\r\n */\r\nfunction uInt64ToString(lo, hi) {\r\n  ({\r\n    lo,\r\n    hi\r\n  } = toUnsigned(lo, hi));\r\n  // Skip the expensive conversion if the number is small enough to use the\r\n  // built-in conversions.\r\n  // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with\r\n  // highBits <= 0x1FFFFF can be safely expressed with a double and retain\r\n  // integer precision.\r\n  // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.\r\n  if (hi <= 0x1FFFFF) {\r\n    return String(TWO_PWR_32_DBL * hi + lo);\r\n  }\r\n  // What this code is doing is essentially converting the input number from\r\n  // base-2 to base-1e7, which allows us to represent the 64-bit range with\r\n  // only 3 (very large) digits. Those digits are then trivial to convert to\r\n  // a base-10 string.\r\n  // The magic numbers used here are -\r\n  // 2^24 = 16777216 = (1,6777216) in base-1e7.\r\n  // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\r\n  // Split 32:32 representation into 16:24:24 representation so our\r\n  // intermediate digits don't overflow.\r\n  const low = lo & 0xFFFFFF;\r\n  const mid = (lo >>> 24 | hi << 8) & 0xFFFFFF;\r\n  const high = hi >> 16 & 0xFFFF;\r\n  // Assemble our three base-1e7 digits, ignoring carries. The maximum\r\n  // value in a digit at this step is representable as a 48-bit integer, which\r\n  // can be stored in a 64-bit floating point number.\r\n  let digitA = low + mid * 6777216 + high * 6710656;\r\n  let digitB = mid + high * 8147497;\r\n  let digitC = high * 2;\r\n  // Apply carries from A to B and from B to C.\r\n  const base = 10000000;\r\n  if (digitA >= base) {\r\n    digitB += Math.floor(digitA / base);\r\n    digitA %= base;\r\n  }\r\n  if (digitB >= base) {\r\n    digitC += Math.floor(digitB / base);\r\n    digitB %= base;\r\n  }\r\n  // If digitC is 0, then we should have returned in the trivial code path\r\n  // at the top for non-safe integers. Given this, we can assume both digitB\r\n  // and digitA need leading zeros.\r\n  return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);\r\n}\r\nfunction toUnsigned(lo, hi) {\r\n  return {\r\n    lo: lo >>> 0,\r\n    hi: hi >>> 0\r\n  };\r\n}\r\nfunction newBits(lo, hi) {\r\n  return {\r\n    lo: lo | 0,\r\n    hi: hi | 0\r\n  };\r\n}\r\n/**\r\n * Returns two's compliment negation of input.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\r\n */\r\nfunction negate(lowBits, highBits) {\r\n  highBits = ~highBits;\r\n  if (lowBits) {\r\n    lowBits = ~lowBits + 1;\r\n  } else {\r\n    // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,\r\n    // adding 1 to that, results in 0x100000000, which leaves\r\n    // the low bits 0x0 and simply adds one to the high bits.\r\n    highBits += 1;\r\n  }\r\n  return newBits(lowBits, highBits);\r\n}\r\n/**\r\n * Returns decimal representation of digit1e7 with leading zeros.\r\n */\r\nconst decimalFrom1e7WithLeadingZeros = digit1e7 => {\r\n  const partial = String(digit1e7);\r\n  return \"0000000\".slice(partial.length) + partial;\r\n};\r\n/**\r\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\r\n *\r\n * Copyright 2008 Google Inc.  All rights reserved.\r\n *\r\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\r\n */\r\nfunction varint32write(value, bytes) {\r\n  if (value >= 0) {\r\n    // write value as varint 32\r\n    while (value > 0x7f) {\r\n      bytes.push(value & 0x7f | 0x80);\r\n      value = value >>> 7;\r\n    }\r\n    bytes.push(value);\r\n  } else {\r\n    for (let i = 0; i < 9; i++) {\r\n      bytes.push(value & 127 | 128);\r\n      value = value >> 7;\r\n    }\r\n    bytes.push(1);\r\n  }\r\n}\r\n/**\r\n * Read an unsigned 32 bit varint.\r\n *\r\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\r\n */\r\nfunction varint32read() {\r\n  let b = this.buf[this.pos++];\r\n  let result = b & 0x7f;\r\n  if ((b & 0x80) == 0) {\r\n    this.assertBounds();\r\n    return result;\r\n  }\r\n  b = this.buf[this.pos++];\r\n  result |= (b & 0x7f) << 7;\r\n  if ((b & 0x80) == 0) {\r\n    this.assertBounds();\r\n    return result;\r\n  }\r\n  b = this.buf[this.pos++];\r\n  result |= (b & 0x7f) << 14;\r\n  if ((b & 0x80) == 0) {\r\n    this.assertBounds();\r\n    return result;\r\n  }\r\n  b = this.buf[this.pos++];\r\n  result |= (b & 0x7f) << 21;\r\n  if ((b & 0x80) == 0) {\r\n    this.assertBounds();\r\n    return result;\r\n  }\r\n  // Extract only last 4 bits\r\n  b = this.buf[this.pos++];\r\n  result |= (b & 0x0f) << 28;\r\n  for (let readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++) b = this.buf[this.pos++];\r\n  if ((b & 0x80) != 0) throw new Error(\"invalid varint\");\r\n  this.assertBounds();\r\n  // Result can have 32 bits, convert it to unsigned\r\n  return result >>> 0;\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nfunction makeInt64Support() {\r\n  const dv = new DataView(new ArrayBuffer(8));\r\n  // note that Safari 14 implements BigInt, but not the DataView methods\r\n  const ok = typeof BigInt === \"function\" && typeof dv.getBigInt64 === \"function\" && typeof dv.getBigUint64 === \"function\" && typeof dv.setBigInt64 === \"function\" && typeof dv.setBigUint64 === \"function\" && (typeof process != \"object\" || typeof process.env != \"object\" || process.env.BUF_BIGINT_DISABLE !== \"1\");\r\n  if (ok) {\r\n    const MIN = BigInt(\"-9223372036854775808\"),\r\n      MAX = BigInt(\"9223372036854775807\"),\r\n      UMIN = BigInt(\"0\"),\r\n      UMAX = BigInt(\"18446744073709551615\");\r\n    return {\r\n      zero: BigInt(0),\r\n      supported: true,\r\n      parse(value) {\r\n        const bi = typeof value == \"bigint\" ? value : BigInt(value);\r\n        if (bi > MAX || bi < MIN) {\r\n          throw new Error(\"int64 invalid: \".concat(value));\r\n        }\r\n        return bi;\r\n      },\r\n      uParse(value) {\r\n        const bi = typeof value == \"bigint\" ? value : BigInt(value);\r\n        if (bi > UMAX || bi < UMIN) {\r\n          throw new Error(\"uint64 invalid: \".concat(value));\r\n        }\r\n        return bi;\r\n      },\r\n      enc(value) {\r\n        dv.setBigInt64(0, this.parse(value), true);\r\n        return {\r\n          lo: dv.getInt32(0, true),\r\n          hi: dv.getInt32(4, true)\r\n        };\r\n      },\r\n      uEnc(value) {\r\n        dv.setBigInt64(0, this.uParse(value), true);\r\n        return {\r\n          lo: dv.getInt32(0, true),\r\n          hi: dv.getInt32(4, true)\r\n        };\r\n      },\r\n      dec(lo, hi) {\r\n        dv.setInt32(0, lo, true);\r\n        dv.setInt32(4, hi, true);\r\n        return dv.getBigInt64(0, true);\r\n      },\r\n      uDec(lo, hi) {\r\n        dv.setInt32(0, lo, true);\r\n        dv.setInt32(4, hi, true);\r\n        return dv.getBigUint64(0, true);\r\n      }\r\n    };\r\n  }\r\n  const assertInt64String = value => assert(/^-?[0-9]+$/.test(value), \"int64 invalid: \".concat(value));\r\n  const assertUInt64String = value => assert(/^[0-9]+$/.test(value), \"uint64 invalid: \".concat(value));\r\n  return {\r\n    zero: \"0\",\r\n    supported: false,\r\n    parse(value) {\r\n      if (typeof value != \"string\") {\r\n        value = value.toString();\r\n      }\r\n      assertInt64String(value);\r\n      return value;\r\n    },\r\n    uParse(value) {\r\n      if (typeof value != \"string\") {\r\n        value = value.toString();\r\n      }\r\n      assertUInt64String(value);\r\n      return value;\r\n    },\r\n    enc(value) {\r\n      if (typeof value != \"string\") {\r\n        value = value.toString();\r\n      }\r\n      assertInt64String(value);\r\n      return int64FromString(value);\r\n    },\r\n    uEnc(value) {\r\n      if (typeof value != \"string\") {\r\n        value = value.toString();\r\n      }\r\n      assertUInt64String(value);\r\n      return int64FromString(value);\r\n    },\r\n    dec(lo, hi) {\r\n      return int64ToString(lo, hi);\r\n    },\r\n    uDec(lo, hi) {\r\n      return uInt64ToString(lo, hi);\r\n    }\r\n  };\r\n}\r\nconst protoInt64 = makeInt64Support();\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Scalar value types. This is a subset of field types declared by protobuf\r\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\r\n * are omitted, but the numerical values are identical.\r\n */\r\nvar ScalarType;\r\n(function (ScalarType) {\r\n  // 0 is reserved for errors.\r\n  // Order is weird for historical reasons.\r\n  ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\r\n  ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\r\n  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\r\n  // negative values are likely.\r\n  ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\r\n  ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\r\n  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\r\n  // negative values are likely.\r\n  ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\r\n  ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\r\n  ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\r\n  ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\r\n  ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\r\n  // Tag-delimited aggregate.\r\n  // Group type is deprecated and not supported in proto3. However, Proto3\r\n  // implementations should still be able to parse the group wire format and\r\n  // treat group fields as unknown fields.\r\n  // TYPE_GROUP = 10,\r\n  // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\r\n  // New in version 2.\r\n  ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\r\n  ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\r\n  // TYPE_ENUM = 14,\r\n  ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\r\n  ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\r\n  ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\r\n  ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\r\n})(ScalarType || (ScalarType = {}));\r\n/**\r\n * JavaScript representation of fields with 64 bit integral types (int64, uint64,\r\n * sint64, fixed64, sfixed64).\r\n *\r\n * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,\r\n * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use\r\n * String if `[jstype = JS_STRING]` is specified.\r\n *\r\n * ```protobuf\r\n * uint64 field_a = 1; // BigInt\r\n * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt\r\n * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt\r\n * uint64 field_b = 2 [jstype = JS_STRING]; // String\r\n * ```\r\n */\r\nvar LongType;\r\n(function (LongType) {\r\n  /**\r\n   * Use JavaScript BigInt.\r\n   */\r\n  LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\r\n  /**\r\n   * Use JavaScript String.\r\n   *\r\n   * Field option `[jstype = JS_STRING]`.\r\n   */\r\n  LongType[LongType[\"STRING\"] = 1] = \"STRING\";\r\n})(LongType || (LongType = {}));\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Returns true if both scalar values are equal.\r\n */\r\nfunction scalarEquals(type, a, b) {\r\n  if (a === b) {\r\n    // This correctly matches equal values except BYTES and (possibly) 64-bit integers.\r\n    return true;\r\n  }\r\n  // Special case BYTES - we need to compare each byte individually\r\n  if (type == ScalarType.BYTES) {\r\n    if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {\r\n      return false;\r\n    }\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0; i < a.length; i++) {\r\n      if (a[i] !== b[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  // Special case 64-bit integers - we support number, string and bigint representation.\r\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\r\n  switch (type) {\r\n    case ScalarType.UINT64:\r\n    case ScalarType.FIXED64:\r\n    case ScalarType.INT64:\r\n    case ScalarType.SFIXED64:\r\n    case ScalarType.SINT64:\r\n      // Loose comparison will match between 0n, 0 and \"0\".\r\n      return a == b;\r\n  }\r\n  // Anything that hasn't been caught by strict comparison or special cased\r\n  // BYTES and 64-bit integers is not equal.\r\n  return false;\r\n}\r\n/**\r\n * Returns the zero value for the given scalar type.\r\n */\r\nfunction scalarZeroValue(type, longType) {\r\n  switch (type) {\r\n    case ScalarType.BOOL:\r\n      return false;\r\n    case ScalarType.UINT64:\r\n    case ScalarType.FIXED64:\r\n    case ScalarType.INT64:\r\n    case ScalarType.SFIXED64:\r\n    case ScalarType.SINT64:\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\r\n      return longType == 0 ? protoInt64.zero : \"0\";\r\n    case ScalarType.DOUBLE:\r\n    case ScalarType.FLOAT:\r\n      return 0.0;\r\n    case ScalarType.BYTES:\r\n      return new Uint8Array(0);\r\n    case ScalarType.STRING:\r\n      return \"\";\r\n    default:\r\n      // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.\r\n      // We do not use individual cases to save a few bytes code size.\r\n      return 0;\r\n  }\r\n}\r\n/**\r\n * Returns true for a zero-value. For example, an integer has the zero-value `0`,\r\n * a boolean is `false`, a string is `\"\"`, and bytes is an empty Uint8Array.\r\n *\r\n * In proto3, zero-values are not written to the wire, unless the field is\r\n * optional or repeated.\r\n */\r\nfunction isScalarZeroValue(type, value) {\r\n  switch (type) {\r\n    case ScalarType.BOOL:\r\n      return value === false;\r\n    case ScalarType.STRING:\r\n      return value === \"\";\r\n    case ScalarType.BYTES:\r\n      return value instanceof Uint8Array && !value.byteLength;\r\n    default:\r\n      return value == 0;\r\n    // Loose comparison matches 0n, 0 and \"0\"\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */\r\n/**\r\n * Protobuf binary format wire types.\r\n *\r\n * A wire type provides just enough information to find the length of the\r\n * following value.\r\n *\r\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\r\n */\r\nvar WireType;\r\n(function (WireType) {\r\n  /**\r\n   * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\r\n   */\r\n  WireType[WireType[\"Varint\"] = 0] = \"Varint\";\r\n  /**\r\n   * Used for fixed64, sfixed64, double.\r\n   * Always 8 bytes with little-endian byte order.\r\n   */\r\n  WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\r\n  /**\r\n   * Used for string, bytes, embedded messages, packed repeated fields\r\n   *\r\n   * Only repeated numeric types (types which use the varint, 32-bit,\r\n   * or 64-bit wire types) can be packed. In proto3, such fields are\r\n   * packed by default.\r\n   */\r\n  WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\r\n  /**\r\n   * Start of a tag-delimited aggregate, such as a proto2 group, or a message\r\n   * in editions with message_encoding = DELIMITED.\r\n   */\r\n  WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\r\n  /**\r\n   * End of a tag-delimited aggregate.\r\n   */\r\n  WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\r\n  /**\r\n   * Used for fixed32, sfixed32, float.\r\n   * Always 4 bytes with little-endian byte order.\r\n   */\r\n  WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\r\n})(WireType || (WireType = {}));\r\nclass BinaryWriter {\r\n  constructor(textEncoder) {\r\n    /**\r\n     * Previous fork states.\r\n     */\r\n    this.stack = [];\r\n    this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\r\n    this.chunks = [];\r\n    this.buf = [];\r\n  }\r\n  /**\r\n   * Return all bytes written and reset this writer.\r\n   */\r\n  finish() {\r\n    this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\r\n    let len = 0;\r\n    for (let i = 0; i < this.chunks.length; i++) len += this.chunks[i].length;\r\n    let bytes = new Uint8Array(len);\r\n    let offset = 0;\r\n    for (let i = 0; i < this.chunks.length; i++) {\r\n      bytes.set(this.chunks[i], offset);\r\n      offset += this.chunks[i].length;\r\n    }\r\n    this.chunks = [];\r\n    return bytes;\r\n  }\r\n  /**\r\n   * Start a new fork for length-delimited data like a message\r\n   * or a packed repeated field.\r\n   *\r\n   * Must be joined later with `join()`.\r\n   */\r\n  fork() {\r\n    this.stack.push({\r\n      chunks: this.chunks,\r\n      buf: this.buf\r\n    });\r\n    this.chunks = [];\r\n    this.buf = [];\r\n    return this;\r\n  }\r\n  /**\r\n   * Join the last fork. Write its length and bytes, then\r\n   * return to the previous state.\r\n   */\r\n  join() {\r\n    // get chunk of fork\r\n    let chunk = this.finish();\r\n    // restore previous state\r\n    let prev = this.stack.pop();\r\n    if (!prev) throw new Error(\"invalid state, fork stack empty\");\r\n    this.chunks = prev.chunks;\r\n    this.buf = prev.buf;\r\n    // write length of chunk as varint\r\n    this.uint32(chunk.byteLength);\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Writes a tag (field number and wire type).\r\n   *\r\n   * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\r\n   *\r\n   * Generated code should compute the tag ahead of time and call `uint32()`.\r\n   */\r\n  tag(fieldNo, type) {\r\n    return this.uint32((fieldNo << 3 | type) >>> 0);\r\n  }\r\n  /**\r\n   * Write a chunk of raw bytes.\r\n   */\r\n  raw(chunk) {\r\n    if (this.buf.length) {\r\n      this.chunks.push(new Uint8Array(this.buf));\r\n      this.buf = [];\r\n    }\r\n    this.chunks.push(chunk);\r\n    return this;\r\n  }\r\n  /**\r\n   * Write a `uint32` value, an unsigned 32 bit varint.\r\n   */\r\n  uint32(value) {\r\n    assertUInt32(value);\r\n    // write value as varint 32, inlined for speed\r\n    while (value > 0x7f) {\r\n      this.buf.push(value & 0x7f | 0x80);\r\n      value = value >>> 7;\r\n    }\r\n    this.buf.push(value);\r\n    return this;\r\n  }\r\n  /**\r\n   * Write a `int32` value, a signed 32 bit varint.\r\n   */\r\n  int32(value) {\r\n    assertInt32(value);\r\n    varint32write(value, this.buf);\r\n    return this;\r\n  }\r\n  /**\r\n   * Write a `bool` value, a variant.\r\n   */\r\n  bool(value) {\r\n    this.buf.push(value ? 1 : 0);\r\n    return this;\r\n  }\r\n  /**\r\n   * Write a `bytes` value, length-delimited arbitrary data.\r\n   */\r\n  bytes(value) {\r\n    this.uint32(value.byteLength); // write length of chunk as varint\r\n    return this.raw(value);\r\n  }\r\n  /**\r\n   * Write a `string` value, length-delimited data converted to UTF-8 text.\r\n   */\r\n  string(value) {\r\n    let chunk = this.textEncoder.encode(value);\r\n    this.uint32(chunk.byteLength); // write length of chunk as varint\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Write a `float` value, 32-bit floating point number.\r\n   */\r\n  float(value) {\r\n    assertFloat32(value);\r\n    let chunk = new Uint8Array(4);\r\n    new DataView(chunk.buffer).setFloat32(0, value, true);\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Write a `double` value, a 64-bit floating point number.\r\n   */\r\n  double(value) {\r\n    let chunk = new Uint8Array(8);\r\n    new DataView(chunk.buffer).setFloat64(0, value, true);\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\r\n   */\r\n  fixed32(value) {\r\n    assertUInt32(value);\r\n    let chunk = new Uint8Array(4);\r\n    new DataView(chunk.buffer).setUint32(0, value, true);\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\r\n   */\r\n  sfixed32(value) {\r\n    assertInt32(value);\r\n    let chunk = new Uint8Array(4);\r\n    new DataView(chunk.buffer).setInt32(0, value, true);\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\r\n   */\r\n  sint32(value) {\r\n    assertInt32(value);\r\n    // zigzag encode\r\n    value = (value << 1 ^ value >> 31) >>> 0;\r\n    varint32write(value, this.buf);\r\n    return this;\r\n  }\r\n  /**\r\n   * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\r\n   */\r\n  sfixed64(value) {\r\n    let chunk = new Uint8Array(8),\r\n      view = new DataView(chunk.buffer),\r\n      tc = protoInt64.enc(value);\r\n    view.setInt32(0, tc.lo, true);\r\n    view.setInt32(4, tc.hi, true);\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\r\n   */\r\n  fixed64(value) {\r\n    let chunk = new Uint8Array(8),\r\n      view = new DataView(chunk.buffer),\r\n      tc = protoInt64.uEnc(value);\r\n    view.setInt32(0, tc.lo, true);\r\n    view.setInt32(4, tc.hi, true);\r\n    return this.raw(chunk);\r\n  }\r\n  /**\r\n   * Write a `int64` value, a signed 64-bit varint.\r\n   */\r\n  int64(value) {\r\n    let tc = protoInt64.enc(value);\r\n    varint64write(tc.lo, tc.hi, this.buf);\r\n    return this;\r\n  }\r\n  /**\r\n   * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\r\n   */\r\n  sint64(value) {\r\n    let tc = protoInt64.enc(value),\r\n      // zigzag encode\r\n      sign = tc.hi >> 31,\r\n      lo = tc.lo << 1 ^ sign,\r\n      hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;\r\n    varint64write(lo, hi, this.buf);\r\n    return this;\r\n  }\r\n  /**\r\n   * Write a `uint64` value, an unsigned 64-bit varint.\r\n   */\r\n  uint64(value) {\r\n    let tc = protoInt64.uEnc(value);\r\n    varint64write(tc.lo, tc.hi, this.buf);\r\n    return this;\r\n  }\r\n}\r\nclass BinaryReader {\r\n  constructor(buf, textDecoder) {\r\n    this.varint64 = varint64read; // dirty cast for `this`\r\n    /**\r\n     * Read a `uint32` field, an unsigned 32 bit varint.\r\n     */\r\n    this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\r\n    this.buf = buf;\r\n    this.len = buf.length;\r\n    this.pos = 0;\r\n    this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\r\n    this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();\r\n  }\r\n  /**\r\n   * Reads a tag - field number and wire type.\r\n   */\r\n  tag() {\r\n    let tag = this.uint32(),\r\n      fieldNo = tag >>> 3,\r\n      wireType = tag & 7;\r\n    if (fieldNo <= 0 || wireType < 0 || wireType > 5) throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\r\n    return [fieldNo, wireType];\r\n  }\r\n  /**\r\n   * Skip one element and return the skipped data.\r\n   *\r\n   * When skipping StartGroup, provide the tags field number to check for\r\n   * matching field number in the EndGroup tag.\r\n   */\r\n  skip(wireType, fieldNo) {\r\n    let start = this.pos;\r\n    switch (wireType) {\r\n      case WireType.Varint:\r\n        while (this.buf[this.pos++] & 0x80) {\r\n          // ignore\r\n        }\r\n        break;\r\n      // eslint-disable-next-line\r\n      // @ts-ignore TS7029: Fallthrough case in switch\r\n      case WireType.Bit64:\r\n        this.pos += 4;\r\n      // eslint-disable-next-line\r\n      // @ts-ignore TS7029: Fallthrough case in switch\r\n      case WireType.Bit32:\r\n        this.pos += 4;\r\n        break;\r\n      case WireType.LengthDelimited:\r\n        let len = this.uint32();\r\n        this.pos += len;\r\n        break;\r\n      case WireType.StartGroup:\r\n        for (;;) {\r\n          const [fn, wt] = this.tag();\r\n          if (wt === WireType.EndGroup) {\r\n            if (fieldNo !== undefined && fn !== fieldNo) {\r\n              throw new Error(\"invalid end group tag\");\r\n            }\r\n            break;\r\n          }\r\n          this.skip(wt, fn);\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(\"cant skip wire type \" + wireType);\r\n    }\r\n    this.assertBounds();\r\n    return this.buf.subarray(start, this.pos);\r\n  }\r\n  /**\r\n   * Throws error if position in byte array is out of range.\r\n   */\r\n  assertBounds() {\r\n    if (this.pos > this.len) throw new RangeError(\"premature EOF\");\r\n  }\r\n  /**\r\n   * Read a `int32` field, a signed 32 bit varint.\r\n   */\r\n  int32() {\r\n    return this.uint32() | 0;\r\n  }\r\n  /**\r\n   * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\r\n   */\r\n  sint32() {\r\n    let zze = this.uint32();\r\n    // decode zigzag\r\n    return zze >>> 1 ^ -(zze & 1);\r\n  }\r\n  /**\r\n   * Read a `int64` field, a signed 64-bit varint.\r\n   */\r\n  int64() {\r\n    return protoInt64.dec(...this.varint64());\r\n  }\r\n  /**\r\n   * Read a `uint64` field, an unsigned 64-bit varint.\r\n   */\r\n  uint64() {\r\n    return protoInt64.uDec(...this.varint64());\r\n  }\r\n  /**\r\n   * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\r\n   */\r\n  sint64() {\r\n    let [lo, hi] = this.varint64();\r\n    // decode zig zag\r\n    let s = -(lo & 1);\r\n    lo = (lo >>> 1 | (hi & 1) << 31) ^ s;\r\n    hi = hi >>> 1 ^ s;\r\n    return protoInt64.dec(lo, hi);\r\n  }\r\n  /**\r\n   * Read a `bool` field, a variant.\r\n   */\r\n  bool() {\r\n    let [lo, hi] = this.varint64();\r\n    return lo !== 0 || hi !== 0;\r\n  }\r\n  /**\r\n   * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\r\n   */\r\n  fixed32() {\r\n    return this.view.getUint32((this.pos += 4) - 4, true);\r\n  }\r\n  /**\r\n   * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\r\n   */\r\n  sfixed32() {\r\n    return this.view.getInt32((this.pos += 4) - 4, true);\r\n  }\r\n  /**\r\n   * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\r\n   */\r\n  fixed64() {\r\n    return protoInt64.uDec(this.sfixed32(), this.sfixed32());\r\n  }\r\n  /**\r\n   * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\r\n   */\r\n  sfixed64() {\r\n    return protoInt64.dec(this.sfixed32(), this.sfixed32());\r\n  }\r\n  /**\r\n   * Read a `float` field, 32-bit floating point number.\r\n   */\r\n  float() {\r\n    return this.view.getFloat32((this.pos += 4) - 4, true);\r\n  }\r\n  /**\r\n   * Read a `double` field, a 64-bit floating point number.\r\n   */\r\n  double() {\r\n    return this.view.getFloat64((this.pos += 8) - 8, true);\r\n  }\r\n  /**\r\n   * Read a `bytes` field, length-delimited arbitrary data.\r\n   */\r\n  bytes() {\r\n    let len = this.uint32(),\r\n      start = this.pos;\r\n    this.pos += len;\r\n    this.assertBounds();\r\n    return this.buf.subarray(start, start + len);\r\n  }\r\n  /**\r\n   * Read a `string` field, length-delimited data converted to UTF-8 text.\r\n   */\r\n  string() {\r\n    return this.textDecoder.decode(this.bytes());\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Create a new extension using the given runtime.\r\n */\r\nfunction makeExtension(runtime, typeName, extendee, field) {\r\n  let fi;\r\n  return {\r\n    typeName,\r\n    extendee,\r\n    get field() {\r\n      if (!fi) {\r\n        const i = typeof field == \"function\" ? field() : field;\r\n        i.name = typeName.split(\".\").pop();\r\n        i.jsonName = \"[\".concat(typeName, \"]\");\r\n        fi = runtime.util.newFieldList([i]).list()[0];\r\n      }\r\n      return fi;\r\n    },\r\n    runtime\r\n  };\r\n}\r\n/**\r\n * Create a container that allows us to read extension fields into it with the\r\n * same logic as regular fields.\r\n */\r\nfunction createExtensionContainer(extension) {\r\n  const localName = extension.field.localName;\r\n  const container = Object.create(null);\r\n  container[localName] = initExtensionField(extension);\r\n  return [container, () => container[localName]];\r\n}\r\nfunction initExtensionField(ext) {\r\n  const field = ext.field;\r\n  if (field.repeated) {\r\n    return [];\r\n  }\r\n  if (field.default !== undefined) {\r\n    return field.default;\r\n  }\r\n  switch (field.kind) {\r\n    case \"enum\":\r\n      return field.T.values[0].no;\r\n    case \"scalar\":\r\n      return scalarZeroValue(field.T, field.L);\r\n    case \"message\":\r\n      // eslint-disable-next-line no-case-declarations\r\n      const T = field.T,\r\n        value = new T();\r\n      return T.fieldWrapper ? T.fieldWrapper.unwrapField(value) : value;\r\n    case \"map\":\r\n      throw \"map fields are not allowed to be extensions\";\r\n  }\r\n}\r\n/**\r\n * Helper to filter unknown fields, optimized based on field type.\r\n */\r\nfunction filterUnknownFields(unknownFields, field) {\r\n  if (!field.repeated && (field.kind == \"enum\" || field.kind == \"scalar\")) {\r\n    // singular scalar fields do not merge, we pick the last\r\n    for (let i = unknownFields.length - 1; i >= 0; --i) {\r\n      if (unknownFields[i].no == field.no) {\r\n        return [unknownFields[i]];\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n  return unknownFields.filter(uf => uf.no === field.no);\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */\r\n// lookup table from base64 character to byte\r\nlet encTable = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\r\n// lookup table from base64 character *code* to byte because lookup by number is fast\r\nlet decTable = [];\r\nfor (let i = 0; i < encTable.length; i++) decTable[encTable[i].charCodeAt(0)] = i;\r\n// support base64url variants\r\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\r\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\r\nconst protoBase64 = {\r\n  /**\r\n   * Decodes a base64 string to a byte array.\r\n   *\r\n   * - ignores white-space, including line breaks and tabs\r\n   * - allows inner padding (can decode concatenated base64 strings)\r\n   * - does not require padding\r\n   * - understands base64url encoding:\r\n   *   \"-\" instead of \"+\",\r\n   *   \"_\" instead of \"/\",\r\n   *   no padding\r\n   */\r\n  dec(base64Str) {\r\n    // estimate byte size, not accounting for inner padding and whitespace\r\n    let es = base64Str.length * 3 / 4;\r\n    if (base64Str[base64Str.length - 2] == \"=\") es -= 2;else if (base64Str[base64Str.length - 1] == \"=\") es -= 1;\r\n    let bytes = new Uint8Array(es),\r\n      bytePos = 0,\r\n      // position in byte array\r\n      groupPos = 0,\r\n      // position in base64 group\r\n      b,\r\n      // current byte\r\n      p = 0; // previous byte\r\n    for (let i = 0; i < base64Str.length; i++) {\r\n      b = decTable[base64Str.charCodeAt(i)];\r\n      if (b === undefined) {\r\n        switch (base64Str[i]) {\r\n          // @ts-ignore TS7029: Fallthrough case in switch\r\n          case \"=\":\r\n            groupPos = 0;\r\n          // reset state when padding found\r\n          // @ts-ignore TS7029: Fallthrough case in switch\r\n          case \"\\n\":\r\n          case \"\\r\":\r\n          case \"\\t\":\r\n          case \" \":\r\n            continue;\r\n          // skip white-space, and padding\r\n          default:\r\n            throw Error(\"invalid base64 string.\");\r\n        }\r\n      }\r\n      switch (groupPos) {\r\n        case 0:\r\n          p = b;\r\n          groupPos = 1;\r\n          break;\r\n        case 1:\r\n          bytes[bytePos++] = p << 2 | (b & 48) >> 4;\r\n          p = b;\r\n          groupPos = 2;\r\n          break;\r\n        case 2:\r\n          bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\r\n          p = b;\r\n          groupPos = 3;\r\n          break;\r\n        case 3:\r\n          bytes[bytePos++] = (p & 3) << 6 | b;\r\n          groupPos = 0;\r\n          break;\r\n      }\r\n    }\r\n    if (groupPos == 1) throw Error(\"invalid base64 string.\");\r\n    return bytes.subarray(0, bytePos);\r\n  },\r\n  /**\r\n   * Encode a byte array to a base64 string.\r\n   */\r\n  enc(bytes) {\r\n    let base64 = \"\",\r\n      groupPos = 0,\r\n      // position in base64 group\r\n      b,\r\n      // current byte\r\n      p = 0; // carry over from previous byte\r\n    for (let i = 0; i < bytes.length; i++) {\r\n      b = bytes[i];\r\n      switch (groupPos) {\r\n        case 0:\r\n          base64 += encTable[b >> 2];\r\n          p = (b & 3) << 4;\r\n          groupPos = 1;\r\n          break;\r\n        case 1:\r\n          base64 += encTable[p | b >> 4];\r\n          p = (b & 15) << 2;\r\n          groupPos = 2;\r\n          break;\r\n        case 2:\r\n          base64 += encTable[p | b >> 6];\r\n          base64 += encTable[b & 63];\r\n          groupPos = 0;\r\n          break;\r\n      }\r\n    }\r\n    // add output padding\r\n    if (groupPos) {\r\n      base64 += encTable[p];\r\n      base64 += \"=\";\r\n      if (groupPos == 1) base64 += \"=\";\r\n    }\r\n    return base64;\r\n  }\r\n};\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Retrieve an extension value from a message.\r\n *\r\n * The function never returns undefined. Use hasExtension() to check whether an\r\n * extension is set. If the extension is not set, this function returns the\r\n * default value (if one was specified in the protobuf source), or the zero value\r\n * (for example `0` for numeric types, `[]` for repeated extension fields, and\r\n * an empty message instance for message fields).\r\n *\r\n * Extensions are stored as unknown fields on a message. To mutate an extension\r\n * value, make sure to store the new value with setExtension() after mutating.\r\n *\r\n * If the extension does not extend the given message, an error is raised.\r\n */\r\nfunction getExtension(message, extension, options) {\r\n  assertExtendee(extension, message);\r\n  const opt = extension.runtime.bin.makeReadOptions(options);\r\n  const ufs = filterUnknownFields(message.getType().runtime.bin.listUnknownFields(message), extension.field);\r\n  const [container, get] = createExtensionContainer(extension);\r\n  for (const uf of ufs) {\r\n    extension.runtime.bin.readField(container, opt.readerFactory(uf.data), extension.field, uf.wireType, opt);\r\n  }\r\n  return get();\r\n}\r\n/**\r\n * Set an extension value on a message. If the message already has a value for\r\n * this extension, the value is replaced.\r\n *\r\n * If the extension does not extend the given message, an error is raised.\r\n */\r\nfunction setExtension(message, extension, value, options) {\r\n  assertExtendee(extension, message);\r\n  const readOpt = extension.runtime.bin.makeReadOptions(options);\r\n  const writeOpt = extension.runtime.bin.makeWriteOptions(options);\r\n  if (hasExtension(message, extension)) {\r\n    const ufs = message.getType().runtime.bin.listUnknownFields(message).filter(uf => uf.no != extension.field.no);\r\n    message.getType().runtime.bin.discardUnknownFields(message);\r\n    for (const uf of ufs) {\r\n      message.getType().runtime.bin.onUnknownField(message, uf.no, uf.wireType, uf.data);\r\n    }\r\n  }\r\n  const writer = writeOpt.writerFactory();\r\n  let f = extension.field;\r\n  // Implicit presence does not apply to extensions, see https://github.com/protocolbuffers/protobuf/issues/8234\r\n  // We patch the field info to use explicit presence:\r\n  if (!f.opt && !f.repeated && (f.kind == \"enum\" || f.kind == \"scalar\")) {\r\n    f = Object.assign(Object.assign({}, extension.field), {\r\n      opt: true\r\n    });\r\n  }\r\n  extension.runtime.bin.writeField(f, value, writer, writeOpt);\r\n  const reader = readOpt.readerFactory(writer.finish());\r\n  while (reader.pos < reader.len) {\r\n    const [no, wireType] = reader.tag();\r\n    const data = reader.skip(wireType, no);\r\n    message.getType().runtime.bin.onUnknownField(message, no, wireType, data);\r\n  }\r\n}\r\n/**\r\n * Check whether an extension is set on a message.\r\n */\r\nfunction hasExtension(message, extension) {\r\n  const messageType = message.getType();\r\n  return extension.extendee.typeName === messageType.typeName && !!messageType.runtime.bin.listUnknownFields(message).find(uf => uf.no == extension.field.no);\r\n}\r\nfunction assertExtendee(extension, message) {\r\n  assert(extension.extendee.typeName == message.getType().typeName, \"extension \".concat(extension.typeName, \" can only be applied to message \").concat(extension.extendee.typeName));\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Returns true if the field is set.\r\n */\r\nfunction isFieldSet(field, target) {\r\n  const localName = field.localName;\r\n  if (field.repeated) {\r\n    return target[localName].length > 0;\r\n  }\r\n  if (field.oneof) {\r\n    return target[field.oneof.localName].case === localName; // eslint-disable-line @typescript-eslint/no-unsafe-member-access\r\n  }\r\n  switch (field.kind) {\r\n    case \"enum\":\r\n    case \"scalar\":\r\n      if (field.opt || field.req) {\r\n        // explicit presence\r\n        return target[localName] !== undefined;\r\n      }\r\n      // implicit presence\r\n      if (field.kind == \"enum\") {\r\n        return target[localName] !== field.T.values[0].no;\r\n      }\r\n      return !isScalarZeroValue(field.T, target[localName]);\r\n    case \"message\":\r\n      return target[localName] !== undefined;\r\n    case \"map\":\r\n      return Object.keys(target[localName]).length > 0;\r\n    // eslint-disable-line @typescript-eslint/no-unsafe-argument\r\n  }\r\n}\r\n/**\r\n * Resets the field, so that isFieldSet() will return false.\r\n */\r\nfunction clearField(field, target) {\r\n  const localName = field.localName;\r\n  const implicitPresence = !field.opt && !field.req;\r\n  if (field.repeated) {\r\n    target[localName] = [];\r\n  } else if (field.oneof) {\r\n    target[field.oneof.localName] = {\r\n      case: undefined\r\n    };\r\n  } else {\r\n    switch (field.kind) {\r\n      case \"map\":\r\n        target[localName] = {};\r\n        break;\r\n      case \"enum\":\r\n        target[localName] = implicitPresence ? field.T.values[0].no : undefined;\r\n        break;\r\n      case \"scalar\":\r\n        target[localName] = implicitPresence ? scalarZeroValue(field.T, field.L) : undefined;\r\n        break;\r\n      case \"message\":\r\n        target[localName] = undefined;\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Check whether the given object is any subtype of Message or is a specific\r\n * Message by passing the type.\r\n *\r\n * Just like `instanceof`, `isMessage` narrows the type. The advantage of\r\n * `isMessage` is that it compares identity by the message type name, not by\r\n * class identity. This makes it robust against the dual package hazard and\r\n * similar situations, where the same message is duplicated.\r\n *\r\n * This function is _mostly_ equivalent to the `instanceof` operator. For\r\n * example, `isMessage(foo, MyMessage)` is the same as `foo instanceof MyMessage`,\r\n * and `isMessage(foo)` is the same as `foo instanceof Message`. In most cases,\r\n * `isMessage` should be preferred over `instanceof`.\r\n *\r\n * However, due to the fact that `isMessage` does not use class identity, there\r\n * are subtle differences between this function and `instanceof`. Notably,\r\n * calling `isMessage` on an explicit type of Message will return false.\r\n */\r\nfunction isMessage(arg, type) {\r\n  if (arg === null || typeof arg != \"object\") {\r\n    return false;\r\n  }\r\n  if (!Object.getOwnPropertyNames(Message.prototype).every(m => m in arg && typeof arg[m] == \"function\")) {\r\n    return false;\r\n  }\r\n  const actualType = arg.getType();\r\n  if (actualType === null || typeof actualType != \"function\" || !(\"typeName\" in actualType) || typeof actualType.typeName != \"string\") {\r\n    return false;\r\n  }\r\n  return type === undefined ? true : actualType.typeName == type.typeName;\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Wrap a primitive message field value in its corresponding wrapper\r\n * message. This function is idempotent.\r\n */\r\nfunction wrapField(type, value) {\r\n  if (isMessage(value) || !type.fieldWrapper) {\r\n    return value;\r\n  }\r\n  return type.fieldWrapper.wrapField(value);\r\n}\r\n({\r\n  \"google.protobuf.DoubleValue\": ScalarType.DOUBLE,\r\n  \"google.protobuf.FloatValue\": ScalarType.FLOAT,\r\n  \"google.protobuf.Int64Value\": ScalarType.INT64,\r\n  \"google.protobuf.UInt64Value\": ScalarType.UINT64,\r\n  \"google.protobuf.Int32Value\": ScalarType.INT32,\r\n  \"google.protobuf.UInt32Value\": ScalarType.UINT32,\r\n  \"google.protobuf.BoolValue\": ScalarType.BOOL,\r\n  \"google.protobuf.StringValue\": ScalarType.STRING,\r\n  \"google.protobuf.BytesValue\": ScalarType.BYTES\r\n});\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/* eslint-disable no-case-declarations,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call */\r\n// Default options for parsing JSON.\r\nconst jsonReadDefaults = {\r\n  ignoreUnknownFields: false\r\n};\r\n// Default options for serializing to JSON.\r\nconst jsonWriteDefaults = {\r\n  emitDefaultValues: false,\r\n  enumAsInteger: false,\r\n  useProtoFieldName: false,\r\n  prettySpaces: 0\r\n};\r\nfunction makeReadOptions$1(options) {\r\n  return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;\r\n}\r\nfunction makeWriteOptions$1(options) {\r\n  return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;\r\n}\r\nconst tokenNull = Symbol();\r\nconst tokenIgnoredUnknownEnum = Symbol();\r\nfunction makeJsonFormat() {\r\n  return {\r\n    makeReadOptions: makeReadOptions$1,\r\n    makeWriteOptions: makeWriteOptions$1,\r\n    readMessage(type, json, options, message) {\r\n      if (json == null || Array.isArray(json) || typeof json != \"object\") {\r\n        throw new Error(\"cannot decode message \".concat(type.typeName, \" from JSON: \").concat(debugJsonValue(json)));\r\n      }\r\n      message = message !== null && message !== void 0 ? message : new type();\r\n      const oneofSeen = new Map();\r\n      const registry = options.typeRegistry;\r\n      for (const [jsonKey, jsonValue] of Object.entries(json)) {\r\n        const field = type.fields.findJsonName(jsonKey);\r\n        if (field) {\r\n          if (field.oneof) {\r\n            if (jsonValue === null && field.kind == \"scalar\") {\r\n              // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}\r\n              continue;\r\n            }\r\n            const seen = oneofSeen.get(field.oneof);\r\n            if (seen !== undefined) {\r\n              throw new Error(\"cannot decode message \".concat(type.typeName, \" from JSON: multiple keys for oneof \\\"\").concat(field.oneof.name, \"\\\" present: \\\"\").concat(seen, \"\\\", \\\"\").concat(jsonKey, \"\\\"\"));\r\n            }\r\n            oneofSeen.set(field.oneof, jsonKey);\r\n          }\r\n          readField$1(message, jsonValue, field, options, type);\r\n        } else {\r\n          let found = false;\r\n          if ((registry === null || registry === void 0 ? void 0 : registry.findExtension) && jsonKey.startsWith(\"[\") && jsonKey.endsWith(\"]\")) {\r\n            const ext = registry.findExtension(jsonKey.substring(1, jsonKey.length - 1));\r\n            if (ext && ext.extendee.typeName == type.typeName) {\r\n              found = true;\r\n              const [container, get] = createExtensionContainer(ext);\r\n              readField$1(container, jsonValue, ext.field, options, ext);\r\n              // We pass on the options as BinaryReadOptions/BinaryWriteOptions,\r\n              // so that users can bring their own binary reader and writer factories\r\n              // if necessary.\r\n              setExtension(message, ext, get(), options);\r\n            }\r\n          }\r\n          if (!found && !options.ignoreUnknownFields) {\r\n            throw new Error(\"cannot decode message \".concat(type.typeName, \" from JSON: key \\\"\").concat(jsonKey, \"\\\" is unknown\"));\r\n          }\r\n        }\r\n      }\r\n      return message;\r\n    },\r\n    writeMessage(message, options) {\r\n      const type = message.getType();\r\n      const json = {};\r\n      let field;\r\n      try {\r\n        for (field of type.fields.byNumber()) {\r\n          if (!isFieldSet(field, message)) {\r\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n            if (field.req) {\r\n              throw \"required field not set\";\r\n            }\r\n            if (!options.emitDefaultValues) {\r\n              continue;\r\n            }\r\n            if (!canEmitFieldDefaultValue(field)) {\r\n              continue;\r\n            }\r\n          }\r\n          const value = field.oneof ? message[field.oneof.localName].value : message[field.localName];\r\n          const jsonValue = writeField$1(field, value, options);\r\n          if (jsonValue !== undefined) {\r\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\r\n          }\r\n        }\r\n        const registry = options.typeRegistry;\r\n        if (registry === null || registry === void 0 ? void 0 : registry.findExtensionFor) {\r\n          for (const uf of type.runtime.bin.listUnknownFields(message)) {\r\n            const ext = registry.findExtensionFor(type.typeName, uf.no);\r\n            if (ext && hasExtension(message, ext)) {\r\n              // We pass on the options as BinaryReadOptions, so that users can bring their own\r\n              // binary reader factory if necessary.\r\n              const value = getExtension(message, ext, options);\r\n              const jsonValue = writeField$1(ext.field, value, options);\r\n              if (jsonValue !== undefined) {\r\n                json[ext.field.jsonName] = jsonValue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {\r\n        const m = field ? \"cannot encode field \".concat(type.typeName, \".\").concat(field.name, \" to JSON\") : \"cannot encode message \".concat(type.typeName, \" to JSON\");\r\n        const r = e instanceof Error ? e.message : String(e);\r\n        throw new Error(m + (r.length > 0 ? \": \".concat(r) : \"\"));\r\n      }\r\n      return json;\r\n    },\r\n    readScalar(type, json, longType) {\r\n      // The signature of our internal function has changed. For backwards-\r\n      // compatibility, we support the old form that is part of the public API\r\n      // through the interface JsonFormat.\r\n      return readScalar$1(type, json, longType !== null && longType !== void 0 ? longType : LongType.BIGINT, true);\r\n    },\r\n    writeScalar(type, value, emitDefaultValues) {\r\n      // The signature of our internal function has changed. For backwards-\r\n      // compatibility, we support the old form that is part of the public API\r\n      // through the interface JsonFormat.\r\n      if (value === undefined) {\r\n        return undefined;\r\n      }\r\n      if (emitDefaultValues || isScalarZeroValue(type, value)) {\r\n        return writeScalar$1(type, value);\r\n      }\r\n      return undefined;\r\n    },\r\n    debug: debugJsonValue\r\n  };\r\n}\r\nfunction debugJsonValue(json) {\r\n  if (json === null) {\r\n    return \"null\";\r\n  }\r\n  switch (typeof json) {\r\n    case \"object\":\r\n      return Array.isArray(json) ? \"array\" : \"object\";\r\n    case \"string\":\r\n      return json.length > 100 ? \"string\" : \"\\\"\".concat(json.split('\"').join('\\\\\"'), \"\\\"\");\r\n    default:\r\n      return String(json);\r\n  }\r\n}\r\n// Read a JSON value for a field.\r\n// The \"parentType\" argument is only used to provide context in errors.\r\nfunction readField$1(target, jsonValue, field, options, parentType) {\r\n  let localName = field.localName;\r\n  if (field.repeated) {\r\n    assert(field.kind != \"map\");\r\n    if (jsonValue === null) {\r\n      return;\r\n    }\r\n    if (!Array.isArray(jsonValue)) {\r\n      throw new Error(\"cannot decode field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: \").concat(debugJsonValue(jsonValue)));\r\n    }\r\n    const targetArray = target[localName];\r\n    for (const jsonItem of jsonValue) {\r\n      if (jsonItem === null) {\r\n        throw new Error(\"cannot decode field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: \").concat(debugJsonValue(jsonItem)));\r\n      }\r\n      switch (field.kind) {\r\n        case \"message\":\r\n          targetArray.push(field.T.fromJson(jsonItem, options));\r\n          break;\r\n        case \"enum\":\r\n          const enumValue = readEnum(field.T, jsonItem, options.ignoreUnknownFields, true);\r\n          if (enumValue !== tokenIgnoredUnknownEnum) {\r\n            targetArray.push(enumValue);\r\n          }\r\n          break;\r\n        case \"scalar\":\r\n          try {\r\n            targetArray.push(readScalar$1(field.T, jsonItem, field.L, true));\r\n          } catch (e) {\r\n            let m = \"cannot decode field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: \").concat(debugJsonValue(jsonItem));\r\n            if (e instanceof Error && e.message.length > 0) {\r\n              m += \": \".concat(e.message);\r\n            }\r\n            throw new Error(m);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  } else if (field.kind == \"map\") {\r\n    if (jsonValue === null) {\r\n      return;\r\n    }\r\n    if (typeof jsonValue != \"object\" || Array.isArray(jsonValue)) {\r\n      throw new Error(\"cannot decode field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: \").concat(debugJsonValue(jsonValue)));\r\n    }\r\n    const targetMap = target[localName];\r\n    for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {\r\n      if (jsonMapValue === null) {\r\n        throw new Error(\"cannot decode field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: map value null\"));\r\n      }\r\n      let key;\r\n      try {\r\n        key = readMapKey(field.K, jsonMapKey);\r\n      } catch (e) {\r\n        let m = \"cannot decode map key for field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: \").concat(debugJsonValue(jsonValue));\r\n        if (e instanceof Error && e.message.length > 0) {\r\n          m += \": \".concat(e.message);\r\n        }\r\n        throw new Error(m);\r\n      }\r\n      switch (field.V.kind) {\r\n        case \"message\":\r\n          targetMap[key] = field.V.T.fromJson(jsonMapValue, options);\r\n          break;\r\n        case \"enum\":\r\n          const enumValue = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields, true);\r\n          if (enumValue !== tokenIgnoredUnknownEnum) {\r\n            targetMap[key] = enumValue;\r\n          }\r\n          break;\r\n        case \"scalar\":\r\n          try {\r\n            targetMap[key] = readScalar$1(field.V.T, jsonMapValue, LongType.BIGINT, true);\r\n          } catch (e) {\r\n            let m = \"cannot decode map value for field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: \").concat(debugJsonValue(jsonValue));\r\n            if (e instanceof Error && e.message.length > 0) {\r\n              m += \": \".concat(e.message);\r\n            }\r\n            throw new Error(m);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  } else {\r\n    if (field.oneof) {\r\n      target = target[field.oneof.localName] = {\r\n        case: localName\r\n      };\r\n      localName = \"value\";\r\n    }\r\n    switch (field.kind) {\r\n      case \"message\":\r\n        const messageType = field.T;\r\n        if (jsonValue === null && messageType.typeName != \"google.protobuf.Value\") {\r\n          return;\r\n        }\r\n        let currentValue = target[localName];\r\n        if (isMessage(currentValue)) {\r\n          currentValue.fromJson(jsonValue, options);\r\n        } else {\r\n          target[localName] = currentValue = messageType.fromJson(jsonValue, options);\r\n          if (messageType.fieldWrapper && !field.oneof) {\r\n            target[localName] = messageType.fieldWrapper.unwrapField(currentValue);\r\n          }\r\n        }\r\n        break;\r\n      case \"enum\":\r\n        const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields, false);\r\n        switch (enumValue) {\r\n          case tokenNull:\r\n            clearField(field, target);\r\n            break;\r\n          case tokenIgnoredUnknownEnum:\r\n            break;\r\n          default:\r\n            target[localName] = enumValue;\r\n            break;\r\n        }\r\n        break;\r\n      case \"scalar\":\r\n        try {\r\n          const scalarValue = readScalar$1(field.T, jsonValue, field.L, false);\r\n          switch (scalarValue) {\r\n            case tokenNull:\r\n              clearField(field, target);\r\n              break;\r\n            default:\r\n              target[localName] = scalarValue;\r\n              break;\r\n          }\r\n        } catch (e) {\r\n          let m = \"cannot decode field \".concat(parentType.typeName, \".\").concat(field.name, \" from JSON: \").concat(debugJsonValue(jsonValue));\r\n          if (e instanceof Error && e.message.length > 0) {\r\n            m += \": \".concat(e.message);\r\n          }\r\n          throw new Error(m);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n}\r\nfunction readMapKey(type, json) {\r\n  if (type === ScalarType.BOOL) {\r\n    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\r\n    switch (json) {\r\n      case \"true\":\r\n        json = true;\r\n        break;\r\n      case \"false\":\r\n        json = false;\r\n        break;\r\n    }\r\n  }\r\n  return readScalar$1(type, json, LongType.BIGINT, true).toString();\r\n}\r\nfunction readScalar$1(type, json, longType, nullAsZeroValue) {\r\n  if (json === null) {\r\n    if (nullAsZeroValue) {\r\n      return scalarZeroValue(type, longType);\r\n    }\r\n    return tokenNull;\r\n  }\r\n  // every valid case in the switch below returns, and every fall\r\n  // through is regarded as a failure.\r\n  switch (type) {\r\n    // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\r\n    // Either numbers or strings are accepted. Exponent notation is also accepted.\r\n    case ScalarType.DOUBLE:\r\n    case ScalarType.FLOAT:\r\n      if (json === \"NaN\") return Number.NaN;\r\n      if (json === \"Infinity\") return Number.POSITIVE_INFINITY;\r\n      if (json === \"-Infinity\") return Number.NEGATIVE_INFINITY;\r\n      if (json === \"\") {\r\n        // empty string is not a number\r\n        break;\r\n      }\r\n      if (typeof json == \"string\" && json.trim().length !== json.length) {\r\n        // extra whitespace\r\n        break;\r\n      }\r\n      if (typeof json != \"string\" && typeof json != \"number\") {\r\n        break;\r\n      }\r\n      const float = Number(json);\r\n      if (Number.isNaN(float)) {\r\n        // not a number\r\n        break;\r\n      }\r\n      if (!Number.isFinite(float)) {\r\n        // infinity and -infinity are handled by string representation above, so this is an error\r\n        break;\r\n      }\r\n      if (type == ScalarType.FLOAT) assertFloat32(float);\r\n      return float;\r\n    // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\r\n    case ScalarType.INT32:\r\n    case ScalarType.FIXED32:\r\n    case ScalarType.SFIXED32:\r\n    case ScalarType.SINT32:\r\n    case ScalarType.UINT32:\r\n      let int32;\r\n      if (typeof json == \"number\") int32 = json;else if (typeof json == \"string\" && json.length > 0) {\r\n        if (json.trim().length === json.length) int32 = Number(json);\r\n      }\r\n      if (int32 === undefined) break;\r\n      if (type == ScalarType.UINT32 || type == ScalarType.FIXED32) assertUInt32(int32);else assertInt32(int32);\r\n      return int32;\r\n    // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\r\n    case ScalarType.INT64:\r\n    case ScalarType.SFIXED64:\r\n    case ScalarType.SINT64:\r\n      if (typeof json != \"number\" && typeof json != \"string\") break;\r\n      const long = protoInt64.parse(json);\r\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n      return longType ? long.toString() : long;\r\n    case ScalarType.FIXED64:\r\n    case ScalarType.UINT64:\r\n      if (typeof json != \"number\" && typeof json != \"string\") break;\r\n      const uLong = protoInt64.uParse(json);\r\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n      return longType ? uLong.toString() : uLong;\r\n    // bool:\r\n    case ScalarType.BOOL:\r\n      if (typeof json !== \"boolean\") break;\r\n      return json;\r\n    // string:\r\n    case ScalarType.STRING:\r\n      if (typeof json !== \"string\") {\r\n        break;\r\n      }\r\n      // A string must always contain UTF-8 encoded or 7-bit ASCII.\r\n      // We validate with encodeURIComponent, which appears to be the fastest widely available option.\r\n      try {\r\n        encodeURIComponent(json);\r\n      } catch (e) {\r\n        throw new Error(\"invalid UTF8\");\r\n      }\r\n      return json;\r\n    // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\r\n    // Either standard or URL-safe base64 encoding with/without paddings are accepted.\r\n    case ScalarType.BYTES:\r\n      if (json === \"\") return new Uint8Array(0);\r\n      if (typeof json !== \"string\") break;\r\n      return protoBase64.dec(json);\r\n  }\r\n  throw new Error();\r\n}\r\nfunction readEnum(type, json, ignoreUnknownFields, nullAsZeroValue) {\r\n  if (json === null) {\r\n    if (type.typeName == \"google.protobuf.NullValue\") {\r\n      return 0; // google.protobuf.NullValue.NULL_VALUE = 0\r\n    }\r\n    return nullAsZeroValue ? type.values[0].no : tokenNull;\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\r\n  switch (typeof json) {\r\n    case \"number\":\r\n      if (Number.isInteger(json)) {\r\n        return json;\r\n      }\r\n      break;\r\n    case \"string\":\r\n      const value = type.findName(json);\r\n      if (value !== undefined) {\r\n        return value.no;\r\n      }\r\n      if (ignoreUnknownFields) {\r\n        return tokenIgnoredUnknownEnum;\r\n      }\r\n      break;\r\n  }\r\n  throw new Error(\"cannot decode enum \".concat(type.typeName, \" from JSON: \").concat(debugJsonValue(json)));\r\n}\r\n// Decide whether an unset field should be emitted with JSON write option `emitDefaultValues`\r\nfunction canEmitFieldDefaultValue(field) {\r\n  if (field.repeated || field.kind == \"map\") {\r\n    // maps are {}, repeated fields are []\r\n    return true;\r\n  }\r\n  if (field.oneof) {\r\n    // oneof fields are never emitted\r\n    return false;\r\n  }\r\n  if (field.kind == \"message\") {\r\n    // singular message field are allowed to emit JSON null, but we do not\r\n    return false;\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n  if (field.opt || field.req) {\r\n    // the field uses explicit presence, so we cannot emit a zero value\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\nfunction writeField$1(field, value, options) {\r\n  if (field.kind == \"map\") {\r\n    assert(typeof value == \"object\" && value != null);\r\n    const jsonObj = {};\r\n    const entries = Object.entries(value);\r\n    switch (field.V.kind) {\r\n      case \"scalar\":\r\n        for (const [entryKey, entryValue] of entries) {\r\n          jsonObj[entryKey.toString()] = writeScalar$1(field.V.T, entryValue); // JSON standard allows only (double quoted) string as property key\r\n        }\r\n        break;\r\n      case \"message\":\r\n        for (const [entryKey, entryValue] of entries) {\r\n          // JSON standard allows only (double quoted) string as property key\r\n          jsonObj[entryKey.toString()] = entryValue.toJson(options);\r\n        }\r\n        break;\r\n      case \"enum\":\r\n        const enumType = field.V.T;\r\n        for (const [entryKey, entryValue] of entries) {\r\n          // JSON standard allows only (double quoted) string as property key\r\n          jsonObj[entryKey.toString()] = writeEnum(enumType, entryValue, options.enumAsInteger);\r\n        }\r\n        break;\r\n    }\r\n    return options.emitDefaultValues || entries.length > 0 ? jsonObj : undefined;\r\n  }\r\n  if (field.repeated) {\r\n    assert(Array.isArray(value));\r\n    const jsonArr = [];\r\n    switch (field.kind) {\r\n      case \"scalar\":\r\n        for (let i = 0; i < value.length; i++) {\r\n          jsonArr.push(writeScalar$1(field.T, value[i]));\r\n        }\r\n        break;\r\n      case \"enum\":\r\n        for (let i = 0; i < value.length; i++) {\r\n          jsonArr.push(writeEnum(field.T, value[i], options.enumAsInteger));\r\n        }\r\n        break;\r\n      case \"message\":\r\n        for (let i = 0; i < value.length; i++) {\r\n          jsonArr.push(value[i].toJson(options));\r\n        }\r\n        break;\r\n    }\r\n    return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : undefined;\r\n  }\r\n  switch (field.kind) {\r\n    case \"scalar\":\r\n      return writeScalar$1(field.T, value);\r\n    case \"enum\":\r\n      return writeEnum(field.T, value, options.enumAsInteger);\r\n    case \"message\":\r\n      return wrapField(field.T, value).toJson(options);\r\n  }\r\n}\r\nfunction writeEnum(type, value, enumAsInteger) {\r\n  var _a;\r\n  assert(typeof value == \"number\");\r\n  if (type.typeName == \"google.protobuf.NullValue\") {\r\n    return null;\r\n  }\r\n  if (enumAsInteger) {\r\n    return value;\r\n  }\r\n  const val = type.findNumber(value);\r\n  return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number\r\n}\r\nfunction writeScalar$1(type, value) {\r\n  switch (type) {\r\n    // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\r\n    case ScalarType.INT32:\r\n    case ScalarType.SFIXED32:\r\n    case ScalarType.SINT32:\r\n    case ScalarType.FIXED32:\r\n    case ScalarType.UINT32:\r\n      assert(typeof value == \"number\");\r\n      return value;\r\n    // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\r\n    // Either numbers or strings are accepted. Exponent notation is also accepted.\r\n    case ScalarType.FLOAT:\r\n    // assertFloat32(value);\r\n    case ScalarType.DOUBLE:\r\n      // eslint-disable-line no-fallthrough\r\n      assert(typeof value == \"number\");\r\n      if (Number.isNaN(value)) return \"NaN\";\r\n      if (value === Number.POSITIVE_INFINITY) return \"Infinity\";\r\n      if (value === Number.NEGATIVE_INFINITY) return \"-Infinity\";\r\n      return value;\r\n    // string:\r\n    case ScalarType.STRING:\r\n      assert(typeof value == \"string\");\r\n      return value;\r\n    // bool:\r\n    case ScalarType.BOOL:\r\n      assert(typeof value == \"boolean\");\r\n      return value;\r\n    // JSON value will be a decimal string. Either numbers or strings are accepted.\r\n    case ScalarType.UINT64:\r\n    case ScalarType.FIXED64:\r\n    case ScalarType.INT64:\r\n    case ScalarType.SFIXED64:\r\n    case ScalarType.SINT64:\r\n      assert(typeof value == \"bigint\" || typeof value == \"string\" || typeof value == \"number\");\r\n      return value.toString();\r\n    // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\r\n    // Either standard or URL-safe base64 encoding with/without paddings are accepted.\r\n    case ScalarType.BYTES:\r\n      assert(value instanceof Uint8Array);\r\n      return protoBase64.enc(value);\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return */\r\nconst unknownFieldsSymbol = Symbol(\"@bufbuild/protobuf/unknown-fields\");\r\n// Default options for parsing binary data.\r\nconst readDefaults = {\r\n  readUnknownFields: true,\r\n  readerFactory: bytes => new BinaryReader(bytes)\r\n};\r\n// Default options for serializing binary data.\r\nconst writeDefaults = {\r\n  writeUnknownFields: true,\r\n  writerFactory: () => new BinaryWriter()\r\n};\r\nfunction makeReadOptions(options) {\r\n  return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;\r\n}\r\nfunction makeWriteOptions(options) {\r\n  return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;\r\n}\r\nfunction makeBinaryFormat() {\r\n  return {\r\n    makeReadOptions,\r\n    makeWriteOptions,\r\n    listUnknownFields(message) {\r\n      var _a;\r\n      return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];\r\n    },\r\n    discardUnknownFields(message) {\r\n      delete message[unknownFieldsSymbol];\r\n    },\r\n    writeUnknownFields(message, writer) {\r\n      const m = message;\r\n      const c = m[unknownFieldsSymbol];\r\n      if (c) {\r\n        for (const f of c) {\r\n          writer.tag(f.no, f.wireType).raw(f.data);\r\n        }\r\n      }\r\n    },\r\n    onUnknownField(message, no, wireType, data) {\r\n      const m = message;\r\n      if (!Array.isArray(m[unknownFieldsSymbol])) {\r\n        m[unknownFieldsSymbol] = [];\r\n      }\r\n      m[unknownFieldsSymbol].push({\r\n        no,\r\n        wireType,\r\n        data\r\n      });\r\n    },\r\n    readMessage(message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {\r\n      const type = message.getType();\r\n      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n      const end = delimitedMessageEncoding ? reader.len : reader.pos + lengthOrEndTagFieldNo;\r\n      let fieldNo, wireType;\r\n      while (reader.pos < end) {\r\n        [fieldNo, wireType] = reader.tag();\r\n        if (delimitedMessageEncoding === true && wireType == WireType.EndGroup) {\r\n          break;\r\n        }\r\n        const field = type.fields.find(fieldNo);\r\n        if (!field) {\r\n          const data = reader.skip(wireType, fieldNo);\r\n          if (options.readUnknownFields) {\r\n            this.onUnknownField(message, fieldNo, wireType, data);\r\n          }\r\n          continue;\r\n        }\r\n        readField(message, reader, field, wireType, options);\r\n      }\r\n      if (delimitedMessageEncoding && (\r\n      // eslint-disable-line @typescript-eslint/strict-boolean-expressions\r\n      wireType != WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {\r\n        throw new Error(\"invalid end group tag\");\r\n      }\r\n    },\r\n    readField,\r\n    writeMessage(message, writer, options) {\r\n      const type = message.getType();\r\n      for (const field of type.fields.byNumber()) {\r\n        if (!isFieldSet(field, message)) {\r\n          if (field.req) {\r\n            throw new Error(\"cannot encode field \".concat(type.typeName, \".\").concat(field.name, \" to binary: required field not set\"));\r\n          }\r\n          continue;\r\n        }\r\n        const value = field.oneof ? message[field.oneof.localName].value : message[field.localName];\r\n        writeField(field, value, writer, options);\r\n      }\r\n      if (options.writeUnknownFields) {\r\n        this.writeUnknownFields(message, writer);\r\n      }\r\n      return writer;\r\n    },\r\n    writeField(field, value, writer, options) {\r\n      // The behavior of our internal function has changed, it does no longer\r\n      // accept `undefined` values for singular scalar and map.\r\n      // For backwards-compatibility, we support the old form that is part of\r\n      // the public API through the interface BinaryFormat.\r\n      if (value === undefined) {\r\n        return undefined;\r\n      }\r\n      writeField(field, value, writer, options);\r\n    }\r\n  };\r\n}\r\nfunction readField(target,\r\n// eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access\r\nreader, field, wireType, options) {\r\n  let {\r\n    repeated,\r\n    localName\r\n  } = field;\r\n  if (field.oneof) {\r\n    target = target[field.oneof.localName];\r\n    if (target.case != localName) {\r\n      delete target.value;\r\n    }\r\n    target.case = localName;\r\n    localName = \"value\";\r\n  }\r\n  switch (field.kind) {\r\n    case \"scalar\":\r\n    case \"enum\":\r\n      const scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\r\n      let read = readScalar;\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests\r\n      if (field.kind == \"scalar\" && field.L > 0) {\r\n        read = readScalarLTString;\r\n      }\r\n      if (repeated) {\r\n        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\r\n        const isPacked = wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES;\r\n        if (isPacked) {\r\n          let e = reader.uint32() + reader.pos;\r\n          while (reader.pos < e) {\r\n            arr.push(read(reader, scalarType));\r\n          }\r\n        } else {\r\n          arr.push(read(reader, scalarType));\r\n        }\r\n      } else {\r\n        target[localName] = read(reader, scalarType);\r\n      }\r\n      break;\r\n    case \"message\":\r\n      const messageType = field.T;\r\n      if (repeated) {\r\n        // safe to assume presence of array, oneof cannot contain repeated values\r\n        target[localName].push(readMessageField(reader, new messageType(), options, field));\r\n      } else {\r\n        if (isMessage(target[localName])) {\r\n          readMessageField(reader, target[localName], options, field);\r\n        } else {\r\n          target[localName] = readMessageField(reader, new messageType(), options, field);\r\n          if (messageType.fieldWrapper && !field.oneof && !field.repeated) {\r\n            target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    case \"map\":\r\n      let [mapKey, mapVal] = readMapEntry(field, reader, options);\r\n      // safe to assume presence of map object, oneof cannot contain repeated values\r\n      target[localName][mapKey] = mapVal;\r\n      break;\r\n  }\r\n}\r\n// Read a message, avoiding MessageType.fromBinary() to re-use the\r\n// BinaryReadOptions and the IBinaryReader.\r\nfunction readMessageField(reader, message, options, field) {\r\n  const format = message.getType().runtime.bin;\r\n  const delimited = field === null || field === void 0 ? void 0 : field.delimited;\r\n  format.readMessage(message, reader, delimited ? field.no : reader.uint32(),\r\n  // eslint-disable-line @typescript-eslint/strict-boolean-expressions\r\n  options, delimited);\r\n  return message;\r\n}\r\n// Read a map field, expecting key field = 1, value field = 2\r\nfunction readMapEntry(field, reader, options) {\r\n  const length = reader.uint32(),\r\n    end = reader.pos + length;\r\n  let key, val;\r\n  while (reader.pos < end) {\r\n    const [fieldNo] = reader.tag();\r\n    switch (fieldNo) {\r\n      case 1:\r\n        key = readScalar(reader, field.K);\r\n        break;\r\n      case 2:\r\n        switch (field.V.kind) {\r\n          case \"scalar\":\r\n            val = readScalar(reader, field.V.T);\r\n            break;\r\n          case \"enum\":\r\n            val = reader.int32();\r\n            break;\r\n          case \"message\":\r\n            val = readMessageField(reader, new field.V.T(), options, undefined);\r\n            break;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  if (key === undefined) {\r\n    key = scalarZeroValue(field.K, LongType.BIGINT);\r\n  }\r\n  if (typeof key != \"string\" && typeof key != \"number\") {\r\n    key = key.toString();\r\n  }\r\n  if (val === undefined) {\r\n    switch (field.V.kind) {\r\n      case \"scalar\":\r\n        val = scalarZeroValue(field.V.T, LongType.BIGINT);\r\n        break;\r\n      case \"enum\":\r\n        val = field.V.T.values[0].no;\r\n        break;\r\n      case \"message\":\r\n        val = new field.V.T();\r\n        break;\r\n    }\r\n  }\r\n  return [key, val];\r\n}\r\n// Read a scalar value, but return 64 bit integral types (int64, uint64,\r\n// sint64, fixed64, sfixed64) as string instead of bigint.\r\nfunction readScalarLTString(reader, type) {\r\n  const v = readScalar(reader, type);\r\n  return typeof v == \"bigint\" ? v.toString() : v;\r\n}\r\n// Does not use scalarTypeInfo() for better performance.\r\nfunction readScalar(reader, type) {\r\n  switch (type) {\r\n    case ScalarType.STRING:\r\n      return reader.string();\r\n    case ScalarType.BOOL:\r\n      return reader.bool();\r\n    case ScalarType.DOUBLE:\r\n      return reader.double();\r\n    case ScalarType.FLOAT:\r\n      return reader.float();\r\n    case ScalarType.INT32:\r\n      return reader.int32();\r\n    case ScalarType.INT64:\r\n      return reader.int64();\r\n    case ScalarType.UINT64:\r\n      return reader.uint64();\r\n    case ScalarType.FIXED64:\r\n      return reader.fixed64();\r\n    case ScalarType.BYTES:\r\n      return reader.bytes();\r\n    case ScalarType.FIXED32:\r\n      return reader.fixed32();\r\n    case ScalarType.SFIXED32:\r\n      return reader.sfixed32();\r\n    case ScalarType.SFIXED64:\r\n      return reader.sfixed64();\r\n    case ScalarType.SINT64:\r\n      return reader.sint64();\r\n    case ScalarType.UINT32:\r\n      return reader.uint32();\r\n    case ScalarType.SINT32:\r\n      return reader.sint32();\r\n  }\r\n}\r\nfunction writeField(field, value, writer, options) {\r\n  assert(value !== undefined);\r\n  const repeated = field.repeated;\r\n  switch (field.kind) {\r\n    case \"scalar\":\r\n    case \"enum\":\r\n      let scalarType = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\r\n      if (repeated) {\r\n        assert(Array.isArray(value));\r\n        if (field.packed) {\r\n          writePacked(writer, scalarType, field.no, value);\r\n        } else {\r\n          for (const item of value) {\r\n            writeScalar(writer, scalarType, field.no, item);\r\n          }\r\n        }\r\n      } else {\r\n        writeScalar(writer, scalarType, field.no, value);\r\n      }\r\n      break;\r\n    case \"message\":\r\n      if (repeated) {\r\n        assert(Array.isArray(value));\r\n        for (const item of value) {\r\n          writeMessageField(writer, options, field, item);\r\n        }\r\n      } else {\r\n        writeMessageField(writer, options, field, value);\r\n      }\r\n      break;\r\n    case \"map\":\r\n      assert(typeof value == \"object\" && value != null);\r\n      for (const [key, val] of Object.entries(value)) {\r\n        writeMapEntry(writer, options, field, key, val);\r\n      }\r\n      break;\r\n  }\r\n}\r\nfunction writeMapEntry(writer, options, field, key, value) {\r\n  writer.tag(field.no, WireType.LengthDelimited);\r\n  writer.fork();\r\n  // javascript only allows number or string for object properties\r\n  // we convert from our representation to the protobuf type\r\n  let keyValue = key;\r\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys\r\n  switch (field.K) {\r\n    case ScalarType.INT32:\r\n    case ScalarType.FIXED32:\r\n    case ScalarType.UINT32:\r\n    case ScalarType.SFIXED32:\r\n    case ScalarType.SINT32:\r\n      keyValue = Number.parseInt(key);\r\n      break;\r\n    case ScalarType.BOOL:\r\n      assert(key == \"true\" || key == \"false\");\r\n      keyValue = key == \"true\";\r\n      break;\r\n  }\r\n  // write key, expecting key field number = 1\r\n  writeScalar(writer, field.K, 1, keyValue);\r\n  // write value, expecting value field number = 2\r\n  switch (field.V.kind) {\r\n    case \"scalar\":\r\n      writeScalar(writer, field.V.T, 2, value);\r\n      break;\r\n    case \"enum\":\r\n      writeScalar(writer, ScalarType.INT32, 2, value);\r\n      break;\r\n    case \"message\":\r\n      assert(value !== undefined);\r\n      writer.tag(2, WireType.LengthDelimited).bytes(value.toBinary(options));\r\n      break;\r\n  }\r\n  writer.join();\r\n}\r\n// Value must not be undefined\r\nfunction writeMessageField(writer, options, field, value) {\r\n  const message = wrapField(field.T, value);\r\n  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\r\n  if (field.delimited) writer.tag(field.no, WireType.StartGroup).raw(message.toBinary(options)).tag(field.no, WireType.EndGroup);else writer.tag(field.no, WireType.LengthDelimited).bytes(message.toBinary(options));\r\n}\r\nfunction writeScalar(writer, type, fieldNo, value) {\r\n  assert(value !== undefined);\r\n  let [wireType, method] = scalarTypeInfo(type);\r\n  writer.tag(fieldNo, wireType)[method](value);\r\n}\r\nfunction writePacked(writer, type, fieldNo, value) {\r\n  if (!value.length) {\r\n    return;\r\n  }\r\n  writer.tag(fieldNo, WireType.LengthDelimited).fork();\r\n  let [, method] = scalarTypeInfo(type);\r\n  for (let i = 0; i < value.length; i++) {\r\n    writer[method](value[i]);\r\n  }\r\n  writer.join();\r\n}\r\n/**\r\n * Get information for writing a scalar value.\r\n *\r\n * Returns tuple:\r\n * [0]: appropriate WireType\r\n * [1]: name of the appropriate method of IBinaryWriter\r\n * [2]: whether the given value is a default value for proto3 semantics\r\n *\r\n * If argument `value` is omitted, [2] is always false.\r\n */\r\n// TODO replace call-sites writeScalar() and writePacked(), then remove\r\nfunction scalarTypeInfo(type) {\r\n  let wireType = WireType.Varint;\r\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults\r\n  switch (type) {\r\n    case ScalarType.BYTES:\r\n    case ScalarType.STRING:\r\n      wireType = WireType.LengthDelimited;\r\n      break;\r\n    case ScalarType.DOUBLE:\r\n    case ScalarType.FIXED64:\r\n    case ScalarType.SFIXED64:\r\n      wireType = WireType.Bit64;\r\n      break;\r\n    case ScalarType.FIXED32:\r\n    case ScalarType.SFIXED32:\r\n    case ScalarType.FLOAT:\r\n      wireType = WireType.Bit32;\r\n      break;\r\n  }\r\n  const method = ScalarType[type].toLowerCase();\r\n  return [wireType, method];\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */\r\nfunction makeUtilCommon() {\r\n  return {\r\n    setEnumType,\r\n    initPartial(source, target) {\r\n      if (source === undefined) {\r\n        return;\r\n      }\r\n      const type = target.getType();\r\n      for (const member of type.fields.byMember()) {\r\n        const localName = member.localName,\r\n          t = target,\r\n          s = source;\r\n        if (s[localName] == null) {\r\n          // TODO if source is a Message instance, we should use isFieldSet() here to support future field presence\r\n          continue;\r\n        }\r\n        switch (member.kind) {\r\n          case \"oneof\":\r\n            const sk = s[localName].case;\r\n            if (sk === undefined) {\r\n              continue;\r\n            }\r\n            const sourceField = member.findField(sk);\r\n            let val = s[localName].value;\r\n            if (sourceField && sourceField.kind == \"message\" && !isMessage(val, sourceField.T)) {\r\n              val = new sourceField.T(val);\r\n            } else if (sourceField && sourceField.kind === \"scalar\" && sourceField.T === ScalarType.BYTES) {\r\n              val = toU8Arr(val);\r\n            }\r\n            t[localName] = {\r\n              case: sk,\r\n              value: val\r\n            };\r\n            break;\r\n          case \"scalar\":\r\n          case \"enum\":\r\n            let copy = s[localName];\r\n            if (member.T === ScalarType.BYTES) {\r\n              copy = member.repeated ? copy.map(toU8Arr) : toU8Arr(copy);\r\n            }\r\n            t[localName] = copy;\r\n            break;\r\n          case \"map\":\r\n            switch (member.V.kind) {\r\n              case \"scalar\":\r\n              case \"enum\":\r\n                if (member.V.T === ScalarType.BYTES) {\r\n                  for (const [k, v] of Object.entries(s[localName])) {\r\n                    t[localName][k] = toU8Arr(v);\r\n                  }\r\n                } else {\r\n                  Object.assign(t[localName], s[localName]);\r\n                }\r\n                break;\r\n              case \"message\":\r\n                const messageType = member.V.T;\r\n                for (const k of Object.keys(s[localName])) {\r\n                  let val = s[localName][k];\r\n                  if (!messageType.fieldWrapper) {\r\n                    // We only take partial input for messages that are not a wrapper type.\r\n                    // For those messages, we recursively normalize the partial input.\r\n                    val = new messageType(val);\r\n                  }\r\n                  t[localName][k] = val;\r\n                }\r\n                break;\r\n            }\r\n            break;\r\n          case \"message\":\r\n            const mt = member.T;\r\n            if (member.repeated) {\r\n              t[localName] = s[localName].map(val => isMessage(val, mt) ? val : new mt(val));\r\n            } else {\r\n              const val = s[localName];\r\n              if (mt.fieldWrapper) {\r\n                if (\r\n                // We can't use BytesValue.typeName as that will create a circular import\r\n                mt.typeName === \"google.protobuf.BytesValue\") {\r\n                  t[localName] = toU8Arr(val);\r\n                } else {\r\n                  t[localName] = val;\r\n                }\r\n              } else {\r\n                t[localName] = isMessage(val, mt) ? val : new mt(val);\r\n              }\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    },\r\n    // TODO use isFieldSet() here to support future field presence\r\n    equals(type, a, b) {\r\n      if (a === b) {\r\n        return true;\r\n      }\r\n      if (!a || !b) {\r\n        return false;\r\n      }\r\n      return type.fields.byMember().every(m => {\r\n        const va = a[m.localName];\r\n        const vb = b[m.localName];\r\n        if (m.repeated) {\r\n          if (va.length !== vb.length) {\r\n            return false;\r\n          }\r\n          // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never \"map\"\r\n          switch (m.kind) {\r\n            case \"message\":\r\n              return va.every((a, i) => m.T.equals(a, vb[i]));\r\n            case \"scalar\":\r\n              return va.every((a, i) => scalarEquals(m.T, a, vb[i]));\r\n            case \"enum\":\r\n              return va.every((a, i) => scalarEquals(ScalarType.INT32, a, vb[i]));\r\n          }\r\n          throw new Error(\"repeated cannot contain \".concat(m.kind));\r\n        }\r\n        switch (m.kind) {\r\n          case \"message\":\r\n            let a = va;\r\n            let b = vb;\r\n            if (m.T.fieldWrapper) {\r\n              if (a !== undefined && !isMessage(a)) {\r\n                a = m.T.fieldWrapper.wrapField(a);\r\n              }\r\n              if (b !== undefined && !isMessage(b)) {\r\n                b = m.T.fieldWrapper.wrapField(b);\r\n              }\r\n            }\r\n            return m.T.equals(a, b);\r\n          case \"enum\":\r\n            return scalarEquals(ScalarType.INT32, va, vb);\r\n          case \"scalar\":\r\n            return scalarEquals(m.T, va, vb);\r\n          case \"oneof\":\r\n            if (va.case !== vb.case) {\r\n              return false;\r\n            }\r\n            const s = m.findField(va.case);\r\n            if (s === undefined) {\r\n              return true;\r\n            }\r\n            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never \"map\"\r\n            switch (s.kind) {\r\n              case \"message\":\r\n                return s.T.equals(va.value, vb.value);\r\n              case \"enum\":\r\n                return scalarEquals(ScalarType.INT32, va.value, vb.value);\r\n              case \"scalar\":\r\n                return scalarEquals(s.T, va.value, vb.value);\r\n            }\r\n            throw new Error(\"oneof cannot contain \".concat(s.kind));\r\n          case \"map\":\r\n            const keys = Object.keys(va).concat(Object.keys(vb));\r\n            switch (m.V.kind) {\r\n              case \"message\":\r\n                const messageType = m.V.T;\r\n                return keys.every(k => messageType.equals(va[k], vb[k]));\r\n              case \"enum\":\r\n                return keys.every(k => scalarEquals(ScalarType.INT32, va[k], vb[k]));\r\n              case \"scalar\":\r\n                const scalarType = m.V.T;\r\n                return keys.every(k => scalarEquals(scalarType, va[k], vb[k]));\r\n            }\r\n            break;\r\n        }\r\n      });\r\n    },\r\n    // TODO use isFieldSet() here to support future field presence\r\n    clone(message) {\r\n      const type = message.getType(),\r\n        target = new type(),\r\n        any = target;\r\n      for (const member of type.fields.byMember()) {\r\n        const source = message[member.localName];\r\n        let copy;\r\n        if (member.repeated) {\r\n          copy = source.map(cloneSingularField);\r\n        } else if (member.kind == \"map\") {\r\n          copy = any[member.localName];\r\n          for (const [key, v] of Object.entries(source)) {\r\n            copy[key] = cloneSingularField(v);\r\n          }\r\n        } else if (member.kind == \"oneof\") {\r\n          const f = member.findField(source.case);\r\n          copy = f ? {\r\n            case: source.case,\r\n            value: cloneSingularField(source.value)\r\n          } : {\r\n            case: undefined\r\n          };\r\n        } else {\r\n          copy = cloneSingularField(source);\r\n        }\r\n        any[member.localName] = copy;\r\n      }\r\n      for (const uf of type.runtime.bin.listUnknownFields(message)) {\r\n        type.runtime.bin.onUnknownField(any, uf.no, uf.wireType, uf.data);\r\n      }\r\n      return target;\r\n    }\r\n  };\r\n}\r\n// clone a single field value - i.e. the element type of repeated fields, the value type of maps\r\nfunction cloneSingularField(value) {\r\n  if (value === undefined) {\r\n    return value;\r\n  }\r\n  if (isMessage(value)) {\r\n    return value.clone();\r\n  }\r\n  if (value instanceof Uint8Array) {\r\n    const c = new Uint8Array(value.byteLength);\r\n    c.set(value);\r\n    return c;\r\n  }\r\n  return value;\r\n}\r\n// converts any ArrayLike<number> to Uint8Array if necessary.\r\nfunction toU8Arr(input) {\r\n  return input instanceof Uint8Array ? input : new Uint8Array(input);\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nfunction makeProtoRuntime(syntax, newFieldList, initFields) {\r\n  return {\r\n    syntax,\r\n    json: makeJsonFormat(),\r\n    bin: makeBinaryFormat(),\r\n    util: Object.assign(Object.assign({}, makeUtilCommon()), {\r\n      newFieldList,\r\n      initFields\r\n    }),\r\n    makeMessageType(typeName, fields, opt) {\r\n      return makeMessageType(this, typeName, fields, opt);\r\n    },\r\n    makeEnum,\r\n    makeEnumType,\r\n    getEnumType,\r\n    makeExtension(typeName, extendee, field) {\r\n      return makeExtension(this, typeName, extendee, field);\r\n    }\r\n  };\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nclass InternalFieldList {\r\n  constructor(fields, normalizer) {\r\n    this._fields = fields;\r\n    this._normalizer = normalizer;\r\n  }\r\n  findJsonName(jsonName) {\r\n    if (!this.jsonNames) {\r\n      const t = {};\r\n      for (const f of this.list()) {\r\n        t[f.jsonName] = t[f.name] = f;\r\n      }\r\n      this.jsonNames = t;\r\n    }\r\n    return this.jsonNames[jsonName];\r\n  }\r\n  find(fieldNo) {\r\n    if (!this.numbers) {\r\n      const t = {};\r\n      for (const f of this.list()) {\r\n        t[f.no] = f;\r\n      }\r\n      this.numbers = t;\r\n    }\r\n    return this.numbers[fieldNo];\r\n  }\r\n  list() {\r\n    if (!this.all) {\r\n      this.all = this._normalizer(this._fields);\r\n    }\r\n    return this.all;\r\n  }\r\n  byNumber() {\r\n    if (!this.numbersAsc) {\r\n      this.numbersAsc = this.list().concat().sort((a, b) => a.no - b.no);\r\n    }\r\n    return this.numbersAsc;\r\n  }\r\n  byMember() {\r\n    if (!this.members) {\r\n      this.members = [];\r\n      const a = this.members;\r\n      let o;\r\n      for (const f of this.list()) {\r\n        if (f.oneof) {\r\n          if (f.oneof !== o) {\r\n            o = f.oneof;\r\n            a.push(o);\r\n          }\r\n        } else {\r\n          a.push(f);\r\n        }\r\n      }\r\n    }\r\n    return this.members;\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Returns the name of a protobuf element in generated code.\r\n *\r\n * Field names - including oneofs - are converted to lowerCamelCase. For\r\n * messages, enumerations and services, the package name is stripped from\r\n * the type name. For nested messages and enumerations, the names are joined\r\n * with an underscore. For methods, the first character is made lowercase.\r\n */\r\n/**\r\n * Returns the name of a field in generated code.\r\n */\r\nfunction localFieldName(protoName, inOneof) {\r\n  const name = protoCamelCase(protoName);\r\n  if (inOneof) {\r\n    // oneof member names are not properties, but values of the `case` property.\r\n    return name;\r\n  }\r\n  return safeObjectProperty(safeMessageProperty(name));\r\n}\r\n/**\r\n * Returns the name of a oneof group in generated code.\r\n */\r\nfunction localOneofName(protoName) {\r\n  return localFieldName(protoName, false);\r\n}\r\n/**\r\n * Returns the JSON name for a protobuf field, exactly like protoc does.\r\n */\r\nconst fieldJsonName = protoCamelCase;\r\n/**\r\n * Converts snake_case to protoCamelCase according to the convention\r\n * used by protoc to convert a field name to a JSON name.\r\n */\r\nfunction protoCamelCase(snakeCase) {\r\n  let capNext = false;\r\n  const b = [];\r\n  for (let i = 0; i < snakeCase.length; i++) {\r\n    let c = snakeCase.charAt(i);\r\n    switch (c) {\r\n      case \"_\":\r\n        capNext = true;\r\n        break;\r\n      case \"0\":\r\n      case \"1\":\r\n      case \"2\":\r\n      case \"3\":\r\n      case \"4\":\r\n      case \"5\":\r\n      case \"6\":\r\n      case \"7\":\r\n      case \"8\":\r\n      case \"9\":\r\n        b.push(c);\r\n        capNext = false;\r\n        break;\r\n      default:\r\n        if (capNext) {\r\n          capNext = false;\r\n          c = c.toUpperCase();\r\n        }\r\n        b.push(c);\r\n        break;\r\n    }\r\n  }\r\n  return b.join(\"\");\r\n}\r\n/**\r\n * Names that cannot be used for object properties because they are reserved\r\n * by built-in JavaScript properties.\r\n */\r\nconst reservedObjectProperties = new Set([\r\n// names reserved by JavaScript\r\n\"constructor\", \"toString\", \"toJSON\", \"valueOf\"]);\r\n/**\r\n * Names that cannot be used for object properties because they are reserved\r\n * by the runtime.\r\n */\r\nconst reservedMessageProperties = new Set([\r\n// names reserved by the runtime\r\n\"getType\", \"clone\", \"equals\", \"fromBinary\", \"fromJson\", \"fromJsonString\", \"toBinary\", \"toJson\", \"toJsonString\",\r\n// names reserved by the runtime for the future\r\n\"toObject\"]);\r\nconst fallback = name => \"\".concat(name, \"$\");\r\n/**\r\n * Will wrap names that are Object prototype properties or names reserved\r\n * for `Message`s.\r\n */\r\nconst safeMessageProperty = name => {\r\n  if (reservedMessageProperties.has(name)) {\r\n    return fallback(name);\r\n  }\r\n  return name;\r\n};\r\n/**\r\n * Names that cannot be used for object properties because they are reserved\r\n * by built-in JavaScript properties.\r\n */\r\nconst safeObjectProperty = name => {\r\n  if (reservedObjectProperties.has(name)) {\r\n    return fallback(name);\r\n  }\r\n  return name;\r\n};\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nclass InternalOneofInfo {\r\n  constructor(name) {\r\n    this.kind = \"oneof\";\r\n    this.repeated = false;\r\n    this.packed = false;\r\n    this.opt = false;\r\n    this.req = false;\r\n    this.default = undefined;\r\n    this.fields = [];\r\n    this.name = name;\r\n    this.localName = localOneofName(name);\r\n  }\r\n  addField(field) {\r\n    assert(field.oneof === this, \"field \".concat(field.name, \" not one of \").concat(this.name));\r\n    this.fields.push(field);\r\n  }\r\n  findField(localName) {\r\n    if (!this._lookup) {\r\n      this._lookup = Object.create(null);\r\n      for (let i = 0; i < this.fields.length; i++) {\r\n        this._lookup[this.fields[i].localName] = this.fields[i];\r\n      }\r\n    }\r\n    return this._lookup[localName];\r\n  }\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Convert a collection of field info to an array of normalized FieldInfo.\r\n *\r\n * The argument `packedByDefault` specifies whether fields that do not specify\r\n * `packed` should be packed (proto3) or unpacked (proto2).\r\n */\r\nfunction normalizeFieldInfos(fieldInfos, packedByDefault) {\r\n  var _a, _b, _c, _d, _e, _f;\r\n  const r = [];\r\n  let o;\r\n  for (const field of typeof fieldInfos == \"function\" ? fieldInfos() : fieldInfos) {\r\n    const f = field;\r\n    f.localName = localFieldName(field.name, field.oneof !== undefined);\r\n    f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);\r\n    f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;\r\n    if (field.kind == \"scalar\") {\r\n      f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;\r\n    }\r\n    f.delimited = (_d = field.delimited) !== null && _d !== void 0 ? _d : false;\r\n    f.req = (_e = field.req) !== null && _e !== void 0 ? _e : false;\r\n    f.opt = (_f = field.opt) !== null && _f !== void 0 ? _f : false;\r\n    if (field.packed === undefined) {\r\n      {\r\n        f.packed = field.kind == \"enum\" || field.kind == \"scalar\" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;\r\n      }\r\n    }\r\n    // We do not surface options at this time\r\n    // f.options = field.options ?? emptyReadonlyObject;\r\n    if (field.oneof !== undefined) {\r\n      const ooname = typeof field.oneof == \"string\" ? field.oneof : field.oneof.name;\r\n      if (!o || o.name != ooname) {\r\n        o = new InternalOneofInfo(ooname);\r\n      }\r\n      f.oneof = o;\r\n      o.addField(f);\r\n    }\r\n    r.push(f);\r\n  }\r\n  return r;\r\n}\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * Provides functionality for messages defined with the proto3 syntax.\r\n */\r\nconst proto3 = makeProtoRuntime(\"proto3\", fields => {\r\n  return new InternalFieldList(fields, source => normalizeFieldInfos(source));\r\n},\r\n// TODO merge with proto2 and initExtensionField, also see initPartial, equals, clone\r\ntarget => {\r\n  for (const member of target.getType().fields.byMember()) {\r\n    if (member.opt) {\r\n      continue;\r\n    }\r\n    const name = member.localName,\r\n      t = target;\r\n    if (member.repeated) {\r\n      t[name] = [];\r\n      continue;\r\n    }\r\n    switch (member.kind) {\r\n      case \"oneof\":\r\n        t[name] = {\r\n          case: undefined\r\n        };\r\n        break;\r\n      case \"enum\":\r\n        t[name] = 0;\r\n        break;\r\n      case \"map\":\r\n        t[name] = {};\r\n        break;\r\n      case \"scalar\":\r\n        t[name] = scalarZeroValue(member.T, member.L);\r\n        break;\r\n    }\r\n  }\r\n});\r\n\r\n// Copyright 2021-2024 Buf Technologies, Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n/**\r\n * A Timestamp represents a point in time independent of any time zone or local\r\n * calendar, encoded as a count of seconds and fractions of seconds at\r\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\r\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\r\n * Gregorian calendar backwards to year one.\r\n *\r\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\r\n * second table is needed for interpretation, using a [24-hour linear\r\n * smear](https://developers.google.com/time/smear).\r\n *\r\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\r\n * restricting to that range, we ensure that we can convert to and from [RFC\r\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\r\n *\r\n * # Examples\r\n *\r\n * Example 1: Compute Timestamp from POSIX `time()`.\r\n *\r\n *     Timestamp timestamp;\r\n *     timestamp.set_seconds(time(NULL));\r\n *     timestamp.set_nanos(0);\r\n *\r\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\r\n *\r\n *     struct timeval tv;\r\n *     gettimeofday(&tv, NULL);\r\n *\r\n *     Timestamp timestamp;\r\n *     timestamp.set_seconds(tv.tv_sec);\r\n *     timestamp.set_nanos(tv.tv_usec * 1000);\r\n *\r\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\r\n *\r\n *     FILETIME ft;\r\n *     GetSystemTimeAsFileTime(&ft);\r\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\r\n *\r\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\r\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\r\n *     Timestamp timestamp;\r\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\r\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\r\n *\r\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\r\n *\r\n *     long millis = System.currentTimeMillis();\r\n *\r\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\r\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\r\n *\r\n * Example 5: Compute Timestamp from Java `Instant.now()`.\r\n *\r\n *     Instant now = Instant.now();\r\n *\r\n *     Timestamp timestamp =\r\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\r\n *             .setNanos(now.getNano()).build();\r\n *\r\n * Example 6: Compute Timestamp from current time in Python.\r\n *\r\n *     timestamp = Timestamp()\r\n *     timestamp.GetCurrentTime()\r\n *\r\n * # JSON Mapping\r\n *\r\n * In JSON format, the Timestamp type is encoded as a string in the\r\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\r\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\r\n * where {year} is always expressed using four digits while {month}, {day},\r\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\r\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\r\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\r\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\r\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\r\n * able to accept both UTC and other timezones (as indicated by an offset).\r\n *\r\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\r\n * 01:30 UTC on January 15, 2017.\r\n *\r\n * In JavaScript, one can convert a Date object to this format using the\r\n * standard\r\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\r\n * method. In Python, a standard `datetime.datetime` object can be converted\r\n * to this format using\r\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\r\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\r\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\r\n * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\r\n * ) to obtain a formatter capable of generating timestamps in this format.\r\n *\r\n *\r\n * @generated from message google.protobuf.Timestamp\r\n */\r\nclass Timestamp extends Message {\r\n  constructor(data) {\r\n    super();\r\n    /**\r\n     * Represents seconds of UTC time since Unix epoch\r\n     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\r\n     * 9999-12-31T23:59:59Z inclusive.\r\n     *\r\n     * @generated from field: int64 seconds = 1;\r\n     */\r\n    this.seconds = protoInt64.zero;\r\n    /**\r\n     * Non-negative fractions of a second at nanosecond resolution. Negative\r\n     * second values with fractions must still have non-negative nanos values\r\n     * that count forward in time. Must be from 0 to 999,999,999\r\n     * inclusive.\r\n     *\r\n     * @generated from field: int32 nanos = 2;\r\n     */\r\n    this.nanos = 0;\r\n    proto3.util.initPartial(data, this);\r\n  }\r\n  fromJson(json, options) {\r\n    if (typeof json !== \"string\") {\r\n      throw new Error(\"cannot decode google.protobuf.Timestamp from JSON: \".concat(proto3.json.debug(json)));\r\n    }\r\n    const matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);\r\n    if (!matches) {\r\n      throw new Error(\"cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string\");\r\n    }\r\n    const ms = Date.parse(matches[1] + \"-\" + matches[2] + \"-\" + matches[3] + \"T\" + matches[4] + \":\" + matches[5] + \":\" + matches[6] + (matches[8] ? matches[8] : \"Z\"));\r\n    if (Number.isNaN(ms)) {\r\n      throw new Error(\"cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string\");\r\n    }\r\n    if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\r\n      throw new Error(\"cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive\");\r\n    }\r\n    this.seconds = protoInt64.parse(ms / 1000);\r\n    this.nanos = 0;\r\n    if (matches[7]) {\r\n      this.nanos = parseInt(\"1\" + matches[7] + \"0\".repeat(9 - matches[7].length)) - 1000000000;\r\n    }\r\n    return this;\r\n  }\r\n  toJson(options) {\r\n    const ms = Number(this.seconds) * 1000;\r\n    if (ms < Date.parse(\"0001-01-01T00:00:00Z\") || ms > Date.parse(\"9999-12-31T23:59:59Z\")) {\r\n      throw new Error(\"cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive\");\r\n    }\r\n    if (this.nanos < 0) {\r\n      throw new Error(\"cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative\");\r\n    }\r\n    let z = \"Z\";\r\n    if (this.nanos > 0) {\r\n      const nanosStr = (this.nanos + 1000000000).toString().substring(1);\r\n      if (nanosStr.substring(3) === \"000000\") {\r\n        z = \".\" + nanosStr.substring(0, 3) + \"Z\";\r\n      } else if (nanosStr.substring(6) === \"000\") {\r\n        z = \".\" + nanosStr.substring(0, 6) + \"Z\";\r\n      } else {\r\n        z = \".\" + nanosStr + \"Z\";\r\n      }\r\n    }\r\n    return new Date(ms).toISOString().replace(\".000Z\", z);\r\n  }\r\n  toDate() {\r\n    return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));\r\n  }\r\n  static now() {\r\n    return Timestamp.fromDate(new Date());\r\n  }\r\n  static fromDate(date) {\r\n    const ms = date.getTime();\r\n    return new Timestamp({\r\n      seconds: protoInt64.parse(Math.floor(ms / 1000)),\r\n      nanos: ms % 1000 * 1000000\r\n    });\r\n  }\r\n  static fromBinary(bytes, options) {\r\n    return new Timestamp().fromBinary(bytes, options);\r\n  }\r\n  static fromJson(jsonValue, options) {\r\n    return new Timestamp().fromJson(jsonValue, options);\r\n  }\r\n  static fromJsonString(jsonString, options) {\r\n    return new Timestamp().fromJsonString(jsonString, options);\r\n  }\r\n  static equals(a, b) {\r\n    return proto3.util.equals(Timestamp, a, b);\r\n  }\r\n}\r\nTimestamp.runtime = proto3;\r\nTimestamp.typeName = \"google.protobuf.Timestamp\";\r\nTimestamp.fields = proto3.util.newFieldList(() => [{\r\n  no: 1,\r\n  name: \"seconds\",\r\n  kind: \"scalar\",\r\n  T: 3 /* ScalarType.INT64 */\r\n}, {\r\n  no: 2,\r\n  name: \"nanos\",\r\n  kind: \"scalar\",\r\n  T: 5 /* ScalarType.INT32 */\r\n}]);\r\n\r\nconst MetricsBatch = /* @__PURE__ */proto3.makeMessageType(\"livekit.MetricsBatch\", () => [{\r\n  no: 1,\r\n  name: \"timestamp_ms\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 2,\r\n  name: \"normalized_timestamp\",\r\n  kind: \"message\",\r\n  T: Timestamp\r\n}, {\r\n  no: 3,\r\n  name: \"str_data\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 4,\r\n  name: \"time_series\",\r\n  kind: \"message\",\r\n  T: TimeSeriesMetric,\r\n  repeated: true\r\n}, {\r\n  no: 5,\r\n  name: \"events\",\r\n  kind: \"message\",\r\n  T: EventMetric,\r\n  repeated: true\r\n}]);\r\nconst TimeSeriesMetric = /* @__PURE__ */proto3.makeMessageType(\"livekit.TimeSeriesMetric\", () => [{\r\n  no: 1,\r\n  name: \"label\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 2,\r\n  name: \"participant_identity\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 3,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 4,\r\n  name: \"samples\",\r\n  kind: \"message\",\r\n  T: MetricSample,\r\n  repeated: true\r\n}, {\r\n  no: 5,\r\n  name: \"rid\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst MetricSample = /* @__PURE__ */proto3.makeMessageType(\"livekit.MetricSample\", () => [{\r\n  no: 1,\r\n  name: \"timestamp_ms\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 2,\r\n  name: \"normalized_timestamp\",\r\n  kind: \"message\",\r\n  T: Timestamp\r\n}, {\r\n  no: 3,\r\n  name: \"value\",\r\n  kind: \"scalar\",\r\n  T: 2\r\n  /* ScalarType.FLOAT */\r\n}]);\r\nconst EventMetric = /* @__PURE__ */proto3.makeMessageType(\"livekit.EventMetric\", () => [{\r\n  no: 1,\r\n  name: \"label\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 2,\r\n  name: \"participant_identity\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 3,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 4,\r\n  name: \"start_timestamp_ms\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 5,\r\n  name: \"end_timestamp_ms\",\r\n  kind: \"scalar\",\r\n  T: 3,\r\n  opt: true\r\n}, {\r\n  no: 6,\r\n  name: \"normalized_start_timestamp\",\r\n  kind: \"message\",\r\n  T: Timestamp\r\n}, {\r\n  no: 7,\r\n  name: \"normalized_end_timestamp\",\r\n  kind: \"message\",\r\n  T: Timestamp,\r\n  opt: true\r\n}, {\r\n  no: 8,\r\n  name: \"metadata\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 9,\r\n  name: \"rid\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst BackupCodecPolicy$1 = /* @__PURE__ */proto3.makeEnum(\"livekit.BackupCodecPolicy\", [{\r\n  no: 0,\r\n  name: \"PREFER_REGRESSION\"\r\n}, {\r\n  no: 1,\r\n  name: \"SIMULCAST\"\r\n}, {\r\n  no: 2,\r\n  name: \"REGRESSION\"\r\n}]);\r\nconst TrackType = /* @__PURE__ */proto3.makeEnum(\"livekit.TrackType\", [{\r\n  no: 0,\r\n  name: \"AUDIO\"\r\n}, {\r\n  no: 1,\r\n  name: \"VIDEO\"\r\n}, {\r\n  no: 2,\r\n  name: \"DATA\"\r\n}]);\r\nconst TrackSource = /* @__PURE__ */proto3.makeEnum(\"livekit.TrackSource\", [{\r\n  no: 0,\r\n  name: \"UNKNOWN\"\r\n}, {\r\n  no: 1,\r\n  name: \"CAMERA\"\r\n}, {\r\n  no: 2,\r\n  name: \"MICROPHONE\"\r\n}, {\r\n  no: 3,\r\n  name: \"SCREEN_SHARE\"\r\n}, {\r\n  no: 4,\r\n  name: \"SCREEN_SHARE_AUDIO\"\r\n}]);\r\nconst VideoQuality$1 = /* @__PURE__ */proto3.makeEnum(\"livekit.VideoQuality\", [{\r\n  no: 0,\r\n  name: \"LOW\"\r\n}, {\r\n  no: 1,\r\n  name: \"MEDIUM\"\r\n}, {\r\n  no: 2,\r\n  name: \"HIGH\"\r\n}, {\r\n  no: 3,\r\n  name: \"OFF\"\r\n}]);\r\nconst ConnectionQuality$1 = /* @__PURE__ */proto3.makeEnum(\"livekit.ConnectionQuality\", [{\r\n  no: 0,\r\n  name: \"POOR\"\r\n}, {\r\n  no: 1,\r\n  name: \"GOOD\"\r\n}, {\r\n  no: 2,\r\n  name: \"EXCELLENT\"\r\n}, {\r\n  no: 3,\r\n  name: \"LOST\"\r\n}]);\r\nconst ClientConfigSetting = /* @__PURE__ */proto3.makeEnum(\"livekit.ClientConfigSetting\", [{\r\n  no: 0,\r\n  name: \"UNSET\"\r\n}, {\r\n  no: 1,\r\n  name: \"DISABLED\"\r\n}, {\r\n  no: 2,\r\n  name: \"ENABLED\"\r\n}]);\r\nconst DisconnectReason = /* @__PURE__ */proto3.makeEnum(\"livekit.DisconnectReason\", [{\r\n  no: 0,\r\n  name: \"UNKNOWN_REASON\"\r\n}, {\r\n  no: 1,\r\n  name: \"CLIENT_INITIATED\"\r\n}, {\r\n  no: 2,\r\n  name: \"DUPLICATE_IDENTITY\"\r\n}, {\r\n  no: 3,\r\n  name: \"SERVER_SHUTDOWN\"\r\n}, {\r\n  no: 4,\r\n  name: \"PARTICIPANT_REMOVED\"\r\n}, {\r\n  no: 5,\r\n  name: \"ROOM_DELETED\"\r\n}, {\r\n  no: 6,\r\n  name: \"STATE_MISMATCH\"\r\n}, {\r\n  no: 7,\r\n  name: \"JOIN_FAILURE\"\r\n}, {\r\n  no: 8,\r\n  name: \"MIGRATION\"\r\n}, {\r\n  no: 9,\r\n  name: \"SIGNAL_CLOSE\"\r\n}, {\r\n  no: 10,\r\n  name: \"ROOM_CLOSED\"\r\n}, {\r\n  no: 11,\r\n  name: \"USER_UNAVAILABLE\"\r\n}, {\r\n  no: 12,\r\n  name: \"USER_REJECTED\"\r\n}, {\r\n  no: 13,\r\n  name: \"SIP_TRUNK_FAILURE\"\r\n}, {\r\n  no: 14,\r\n  name: \"CONNECTION_TIMEOUT\"\r\n}, {\r\n  no: 15,\r\n  name: \"MEDIA_FAILURE\"\r\n}]);\r\nconst ReconnectReason = /* @__PURE__ */proto3.makeEnum(\"livekit.ReconnectReason\", [{\r\n  no: 0,\r\n  name: \"RR_UNKNOWN\"\r\n}, {\r\n  no: 1,\r\n  name: \"RR_SIGNAL_DISCONNECTED\"\r\n}, {\r\n  no: 2,\r\n  name: \"RR_PUBLISHER_FAILED\"\r\n}, {\r\n  no: 3,\r\n  name: \"RR_SUBSCRIBER_FAILED\"\r\n}, {\r\n  no: 4,\r\n  name: \"RR_SWITCH_CANDIDATE\"\r\n}]);\r\nconst SubscriptionError = /* @__PURE__ */proto3.makeEnum(\"livekit.SubscriptionError\", [{\r\n  no: 0,\r\n  name: \"SE_UNKNOWN\"\r\n}, {\r\n  no: 1,\r\n  name: \"SE_CODEC_UNSUPPORTED\"\r\n}, {\r\n  no: 2,\r\n  name: \"SE_TRACK_NOTFOUND\"\r\n}]);\r\nconst AudioTrackFeature = /* @__PURE__ */proto3.makeEnum(\"livekit.AudioTrackFeature\", [{\r\n  no: 0,\r\n  name: \"TF_STEREO\"\r\n}, {\r\n  no: 1,\r\n  name: \"TF_NO_DTX\"\r\n}, {\r\n  no: 2,\r\n  name: \"TF_AUTO_GAIN_CONTROL\"\r\n}, {\r\n  no: 3,\r\n  name: \"TF_ECHO_CANCELLATION\"\r\n}, {\r\n  no: 4,\r\n  name: \"TF_NOISE_SUPPRESSION\"\r\n}, {\r\n  no: 5,\r\n  name: \"TF_ENHANCED_NOISE_CANCELLATION\"\r\n}, {\r\n  no: 6,\r\n  name: \"TF_PRECONNECT_BUFFER\"\r\n}]);\r\nconst Room$1 = /* @__PURE__ */proto3.makeMessageType(\"livekit.Room\", () => [{\r\n  no: 1,\r\n  name: \"sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"name\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"empty_timeout\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 14,\r\n  name: \"departure_timeout\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 4,\r\n  name: \"max_participants\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 5,\r\n  name: \"creation_time\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 15,\r\n  name: \"creation_time_ms\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 6,\r\n  name: \"turn_password\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 7,\r\n  name: \"enabled_codecs\",\r\n  kind: \"message\",\r\n  T: Codec,\r\n  repeated: true\r\n}, {\r\n  no: 8,\r\n  name: \"metadata\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 9,\r\n  name: \"num_participants\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 11,\r\n  name: \"num_publishers\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 10,\r\n  name: \"active_recording\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 13,\r\n  name: \"version\",\r\n  kind: \"message\",\r\n  T: TimedVersion\r\n}]);\r\nconst Codec = /* @__PURE__ */proto3.makeMessageType(\"livekit.Codec\", () => [{\r\n  no: 1,\r\n  name: \"mime\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"fmtp_line\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst ParticipantPermission = /* @__PURE__ */proto3.makeMessageType(\"livekit.ParticipantPermission\", () => [{\r\n  no: 1,\r\n  name: \"can_subscribe\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 2,\r\n  name: \"can_publish\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 3,\r\n  name: \"can_publish_data\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 9,\r\n  name: \"can_publish_sources\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(TrackSource),\r\n  repeated: true\r\n}, {\r\n  no: 7,\r\n  name: \"hidden\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 8,\r\n  name: \"recorder\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 10,\r\n  name: \"can_update_metadata\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 11,\r\n  name: \"agent\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 12,\r\n  name: \"can_subscribe_metrics\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst ParticipantInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.ParticipantInfo\", () => [{\r\n  no: 1,\r\n  name: \"sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"identity\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"state\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ParticipantInfo_State)\r\n}, {\r\n  no: 4,\r\n  name: \"tracks\",\r\n  kind: \"message\",\r\n  T: TrackInfo,\r\n  repeated: true\r\n}, {\r\n  no: 5,\r\n  name: \"metadata\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 6,\r\n  name: \"joined_at\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 17,\r\n  name: \"joined_at_ms\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 9,\r\n  name: \"name\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 10,\r\n  name: \"version\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 11,\r\n  name: \"permission\",\r\n  kind: \"message\",\r\n  T: ParticipantPermission\r\n}, {\r\n  no: 12,\r\n  name: \"region\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 13,\r\n  name: \"is_publisher\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 14,\r\n  name: \"kind\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ParticipantInfo_Kind)\r\n}, {\r\n  no: 15,\r\n  name: \"attributes\",\r\n  kind: \"map\",\r\n  K: 9,\r\n  V: {\r\n    kind: \"scalar\",\r\n    T: 9\r\n    /* ScalarType.STRING */\r\n  }\r\n}, {\r\n  no: 16,\r\n  name: \"disconnect_reason\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(DisconnectReason)\r\n}, {\r\n  no: 18,\r\n  name: \"kind_details\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ParticipantInfo_KindDetail),\r\n  repeated: true\r\n}]);\r\nconst ParticipantInfo_State = /* @__PURE__ */proto3.makeEnum(\"livekit.ParticipantInfo.State\", [{\r\n  no: 0,\r\n  name: \"JOINING\"\r\n}, {\r\n  no: 1,\r\n  name: \"JOINED\"\r\n}, {\r\n  no: 2,\r\n  name: \"ACTIVE\"\r\n}, {\r\n  no: 3,\r\n  name: \"DISCONNECTED\"\r\n}]);\r\nconst ParticipantInfo_Kind = /* @__PURE__ */proto3.makeEnum(\"livekit.ParticipantInfo.Kind\", [{\r\n  no: 0,\r\n  name: \"STANDARD\"\r\n}, {\r\n  no: 1,\r\n  name: \"INGRESS\"\r\n}, {\r\n  no: 2,\r\n  name: \"EGRESS\"\r\n}, {\r\n  no: 3,\r\n  name: \"SIP\"\r\n}, {\r\n  no: 4,\r\n  name: \"AGENT\"\r\n}]);\r\nconst ParticipantInfo_KindDetail = /* @__PURE__ */proto3.makeEnum(\"livekit.ParticipantInfo.KindDetail\", [{\r\n  no: 0,\r\n  name: \"CLOUD_AGENT\"\r\n}, {\r\n  no: 1,\r\n  name: \"FORWARDED\"\r\n}]);\r\nconst Encryption_Type = /* @__PURE__ */proto3.makeEnum(\"livekit.Encryption.Type\", [{\r\n  no: 0,\r\n  name: \"NONE\"\r\n}, {\r\n  no: 1,\r\n  name: \"GCM\"\r\n}, {\r\n  no: 2,\r\n  name: \"CUSTOM\"\r\n}]);\r\nconst SimulcastCodecInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.SimulcastCodecInfo\", () => [{\r\n  no: 1,\r\n  name: \"mime_type\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"mid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"cid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 4,\r\n  name: \"layers\",\r\n  kind: \"message\",\r\n  T: VideoLayer,\r\n  repeated: true\r\n}]);\r\nconst TrackInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.TrackInfo\", () => [{\r\n  no: 1,\r\n  name: \"sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"type\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(TrackType)\r\n}, {\r\n  no: 3,\r\n  name: \"name\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 4,\r\n  name: \"muted\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 5,\r\n  name: \"width\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 6,\r\n  name: \"height\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 7,\r\n  name: \"simulcast\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 8,\r\n  name: \"disable_dtx\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 9,\r\n  name: \"source\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(TrackSource)\r\n}, {\r\n  no: 10,\r\n  name: \"layers\",\r\n  kind: \"message\",\r\n  T: VideoLayer,\r\n  repeated: true\r\n}, {\r\n  no: 11,\r\n  name: \"mime_type\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 12,\r\n  name: \"mid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 13,\r\n  name: \"codecs\",\r\n  kind: \"message\",\r\n  T: SimulcastCodecInfo,\r\n  repeated: true\r\n}, {\r\n  no: 14,\r\n  name: \"stereo\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 15,\r\n  name: \"disable_red\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 16,\r\n  name: \"encryption\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(Encryption_Type)\r\n}, {\r\n  no: 17,\r\n  name: \"stream\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 18,\r\n  name: \"version\",\r\n  kind: \"message\",\r\n  T: TimedVersion\r\n}, {\r\n  no: 19,\r\n  name: \"audio_features\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(AudioTrackFeature),\r\n  repeated: true\r\n}, {\r\n  no: 20,\r\n  name: \"backup_codec_policy\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(BackupCodecPolicy$1)\r\n}]);\r\nconst VideoLayer = /* @__PURE__ */proto3.makeMessageType(\"livekit.VideoLayer\", () => [{\r\n  no: 1,\r\n  name: \"quality\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(VideoQuality$1)\r\n}, {\r\n  no: 2,\r\n  name: \"width\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 3,\r\n  name: \"height\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 4,\r\n  name: \"bitrate\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 5,\r\n  name: \"ssrc\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst DataPacket = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataPacket\", () => [{\r\n  no: 1,\r\n  name: \"kind\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(DataPacket_Kind)\r\n}, {\r\n  no: 4,\r\n  name: \"participant_identity\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 5,\r\n  name: \"destination_identities\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 2,\r\n  name: \"user\",\r\n  kind: \"message\",\r\n  T: UserPacket,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 3,\r\n  name: \"speaker\",\r\n  kind: \"message\",\r\n  T: ActiveSpeakerUpdate,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 6,\r\n  name: \"sip_dtmf\",\r\n  kind: \"message\",\r\n  T: SipDTMF,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 7,\r\n  name: \"transcription\",\r\n  kind: \"message\",\r\n  T: Transcription,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 8,\r\n  name: \"metrics\",\r\n  kind: \"message\",\r\n  T: MetricsBatch,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 9,\r\n  name: \"chat_message\",\r\n  kind: \"message\",\r\n  T: ChatMessage,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 10,\r\n  name: \"rpc_request\",\r\n  kind: \"message\",\r\n  T: RpcRequest,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 11,\r\n  name: \"rpc_ack\",\r\n  kind: \"message\",\r\n  T: RpcAck,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 12,\r\n  name: \"rpc_response\",\r\n  kind: \"message\",\r\n  T: RpcResponse,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 13,\r\n  name: \"stream_header\",\r\n  kind: \"message\",\r\n  T: DataStream_Header,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 14,\r\n  name: \"stream_chunk\",\r\n  kind: \"message\",\r\n  T: DataStream_Chunk,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 15,\r\n  name: \"stream_trailer\",\r\n  kind: \"message\",\r\n  T: DataStream_Trailer,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 16,\r\n  name: \"sequence\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 17,\r\n  name: \"participant_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst DataPacket_Kind = /* @__PURE__ */proto3.makeEnum(\"livekit.DataPacket.Kind\", [{\r\n  no: 0,\r\n  name: \"RELIABLE\"\r\n}, {\r\n  no: 1,\r\n  name: \"LOSSY\"\r\n}]);\r\nconst ActiveSpeakerUpdate = /* @__PURE__ */proto3.makeMessageType(\"livekit.ActiveSpeakerUpdate\", () => [{\r\n  no: 1,\r\n  name: \"speakers\",\r\n  kind: \"message\",\r\n  T: SpeakerInfo,\r\n  repeated: true\r\n}]);\r\nconst SpeakerInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.SpeakerInfo\", () => [{\r\n  no: 1,\r\n  name: \"sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"level\",\r\n  kind: \"scalar\",\r\n  T: 2\r\n  /* ScalarType.FLOAT */\r\n}, {\r\n  no: 3,\r\n  name: \"active\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst UserPacket = /* @__PURE__ */proto3.makeMessageType(\"livekit.UserPacket\", () => [{\r\n  no: 1,\r\n  name: \"participant_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 5,\r\n  name: \"participant_identity\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"payload\",\r\n  kind: \"scalar\",\r\n  T: 12\r\n  /* ScalarType.BYTES */\r\n}, {\r\n  no: 3,\r\n  name: \"destination_sids\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 6,\r\n  name: \"destination_identities\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 4,\r\n  name: \"topic\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  opt: true\r\n}, {\r\n  no: 8,\r\n  name: \"id\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  opt: true\r\n}, {\r\n  no: 9,\r\n  name: \"start_time\",\r\n  kind: \"scalar\",\r\n  T: 4,\r\n  opt: true\r\n}, {\r\n  no: 10,\r\n  name: \"end_time\",\r\n  kind: \"scalar\",\r\n  T: 4,\r\n  opt: true\r\n}, {\r\n  no: 11,\r\n  name: \"nonce\",\r\n  kind: \"scalar\",\r\n  T: 12\r\n  /* ScalarType.BYTES */\r\n}]);\r\nconst SipDTMF = /* @__PURE__ */proto3.makeMessageType(\"livekit.SipDTMF\", () => [{\r\n  no: 3,\r\n  name: \"code\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 4,\r\n  name: \"digit\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst Transcription = /* @__PURE__ */proto3.makeMessageType(\"livekit.Transcription\", () => [{\r\n  no: 2,\r\n  name: \"transcribed_participant_identity\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"track_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 4,\r\n  name: \"segments\",\r\n  kind: \"message\",\r\n  T: TranscriptionSegment,\r\n  repeated: true\r\n}]);\r\nconst TranscriptionSegment = /* @__PURE__ */proto3.makeMessageType(\"livekit.TranscriptionSegment\", () => [{\r\n  no: 1,\r\n  name: \"id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"text\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"start_time\",\r\n  kind: \"scalar\",\r\n  T: 4\r\n  /* ScalarType.UINT64 */\r\n}, {\r\n  no: 4,\r\n  name: \"end_time\",\r\n  kind: \"scalar\",\r\n  T: 4\r\n  /* ScalarType.UINT64 */\r\n}, {\r\n  no: 5,\r\n  name: \"final\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 6,\r\n  name: \"language\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst ChatMessage = /* @__PURE__ */proto3.makeMessageType(\"livekit.ChatMessage\", () => [{\r\n  no: 1,\r\n  name: \"id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"timestamp\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 3,\r\n  name: \"edit_timestamp\",\r\n  kind: \"scalar\",\r\n  T: 3,\r\n  opt: true\r\n}, {\r\n  no: 4,\r\n  name: \"message\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 5,\r\n  name: \"deleted\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 6,\r\n  name: \"generated\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst RpcRequest = /* @__PURE__ */proto3.makeMessageType(\"livekit.RpcRequest\", () => [{\r\n  no: 1,\r\n  name: \"id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"method\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"payload\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 4,\r\n  name: \"response_timeout_ms\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 5,\r\n  name: \"version\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst RpcAck = /* @__PURE__ */proto3.makeMessageType(\"livekit.RpcAck\", () => [{\r\n  no: 1,\r\n  name: \"request_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst RpcResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.RpcResponse\", () => [{\r\n  no: 1,\r\n  name: \"request_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"payload\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  oneof: \"value\"\r\n}, {\r\n  no: 3,\r\n  name: \"error\",\r\n  kind: \"message\",\r\n  T: RpcError$1,\r\n  oneof: \"value\"\r\n}]);\r\nconst RpcError$1 = /* @__PURE__ */proto3.makeMessageType(\"livekit.RpcError\", () => [{\r\n  no: 1,\r\n  name: \"code\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 2,\r\n  name: \"message\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"data\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst ParticipantTracks = /* @__PURE__ */proto3.makeMessageType(\"livekit.ParticipantTracks\", () => [{\r\n  no: 1,\r\n  name: \"participant_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"track_sids\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}]);\r\nconst ServerInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.ServerInfo\", () => [{\r\n  no: 1,\r\n  name: \"edition\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ServerInfo_Edition)\r\n}, {\r\n  no: 2,\r\n  name: \"version\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"protocol\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}, {\r\n  no: 4,\r\n  name: \"region\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 5,\r\n  name: \"node_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 6,\r\n  name: \"debug_info\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 7,\r\n  name: \"agent_protocol\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}]);\r\nconst ServerInfo_Edition = /* @__PURE__ */proto3.makeEnum(\"livekit.ServerInfo.Edition\", [{\r\n  no: 0,\r\n  name: \"Standard\"\r\n}, {\r\n  no: 1,\r\n  name: \"Cloud\"\r\n}]);\r\nconst ClientInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.ClientInfo\", () => [{\r\n  no: 1,\r\n  name: \"sdk\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ClientInfo_SDK)\r\n}, {\r\n  no: 2,\r\n  name: \"version\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"protocol\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}, {\r\n  no: 4,\r\n  name: \"os\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 5,\r\n  name: \"os_version\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 6,\r\n  name: \"device_model\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 7,\r\n  name: \"browser\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 8,\r\n  name: \"browser_version\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 9,\r\n  name: \"address\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 10,\r\n  name: \"network\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 11,\r\n  name: \"other_sdks\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst ClientInfo_SDK = /* @__PURE__ */proto3.makeEnum(\"livekit.ClientInfo.SDK\", [{\r\n  no: 0,\r\n  name: \"UNKNOWN\"\r\n}, {\r\n  no: 1,\r\n  name: \"JS\"\r\n}, {\r\n  no: 2,\r\n  name: \"SWIFT\"\r\n}, {\r\n  no: 3,\r\n  name: \"ANDROID\"\r\n}, {\r\n  no: 4,\r\n  name: \"FLUTTER\"\r\n}, {\r\n  no: 5,\r\n  name: \"GO\"\r\n}, {\r\n  no: 6,\r\n  name: \"UNITY\"\r\n}, {\r\n  no: 7,\r\n  name: \"REACT_NATIVE\"\r\n}, {\r\n  no: 8,\r\n  name: \"RUST\"\r\n}, {\r\n  no: 9,\r\n  name: \"PYTHON\"\r\n}, {\r\n  no: 10,\r\n  name: \"CPP\"\r\n}, {\r\n  no: 11,\r\n  name: \"UNITY_WEB\"\r\n}, {\r\n  no: 12,\r\n  name: \"NODE\"\r\n}, {\r\n  no: 13,\r\n  name: \"UNREAL\"\r\n}]);\r\nconst ClientConfiguration = /* @__PURE__ */proto3.makeMessageType(\"livekit.ClientConfiguration\", () => [{\r\n  no: 1,\r\n  name: \"video\",\r\n  kind: \"message\",\r\n  T: VideoConfiguration\r\n}, {\r\n  no: 2,\r\n  name: \"screen\",\r\n  kind: \"message\",\r\n  T: VideoConfiguration\r\n}, {\r\n  no: 3,\r\n  name: \"resume_connection\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ClientConfigSetting)\r\n}, {\r\n  no: 4,\r\n  name: \"disabled_codecs\",\r\n  kind: \"message\",\r\n  T: DisabledCodecs\r\n}, {\r\n  no: 5,\r\n  name: \"force_relay\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ClientConfigSetting)\r\n}]);\r\nconst VideoConfiguration = /* @__PURE__ */proto3.makeMessageType(\"livekit.VideoConfiguration\", () => [{\r\n  no: 1,\r\n  name: \"hardware_encoder\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ClientConfigSetting)\r\n}]);\r\nconst DisabledCodecs = /* @__PURE__ */proto3.makeMessageType(\"livekit.DisabledCodecs\", () => [{\r\n  no: 1,\r\n  name: \"codecs\",\r\n  kind: \"message\",\r\n  T: Codec,\r\n  repeated: true\r\n}, {\r\n  no: 2,\r\n  name: \"publish\",\r\n  kind: \"message\",\r\n  T: Codec,\r\n  repeated: true\r\n}]);\r\nconst TimedVersion = /* @__PURE__ */proto3.makeMessageType(\"livekit.TimedVersion\", () => [{\r\n  no: 1,\r\n  name: \"unix_micro\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 2,\r\n  name: \"ticks\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}]);\r\nconst DataStream_OperationType = /* @__PURE__ */proto3.makeEnum(\"livekit.DataStream.OperationType\", [{\r\n  no: 0,\r\n  name: \"CREATE\"\r\n}, {\r\n  no: 1,\r\n  name: \"UPDATE\"\r\n}, {\r\n  no: 2,\r\n  name: \"DELETE\"\r\n}, {\r\n  no: 3,\r\n  name: \"REACTION\"\r\n}]);\r\nconst DataStream_TextHeader = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataStream.TextHeader\", () => [{\r\n  no: 1,\r\n  name: \"operation_type\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(DataStream_OperationType)\r\n}, {\r\n  no: 2,\r\n  name: \"version\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}, {\r\n  no: 3,\r\n  name: \"reply_to_stream_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 4,\r\n  name: \"attached_stream_ids\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 5,\r\n  name: \"generated\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}], {\r\n  localName: \"DataStream_TextHeader\"\r\n});\r\nconst DataStream_ByteHeader = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataStream.ByteHeader\", () => [{\r\n  no: 1,\r\n  name: \"name\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}], {\r\n  localName: \"DataStream_ByteHeader\"\r\n});\r\nconst DataStream_Header = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataStream.Header\", () => [{\r\n  no: 1,\r\n  name: \"stream_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"timestamp\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 3,\r\n  name: \"topic\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 4,\r\n  name: \"mime_type\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 5,\r\n  name: \"total_length\",\r\n  kind: \"scalar\",\r\n  T: 4,\r\n  opt: true\r\n}, {\r\n  no: 7,\r\n  name: \"encryption_type\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(Encryption_Type)\r\n}, {\r\n  no: 8,\r\n  name: \"attributes\",\r\n  kind: \"map\",\r\n  K: 9,\r\n  V: {\r\n    kind: \"scalar\",\r\n    T: 9\r\n    /* ScalarType.STRING */\r\n  }\r\n}, {\r\n  no: 9,\r\n  name: \"text_header\",\r\n  kind: \"message\",\r\n  T: DataStream_TextHeader,\r\n  oneof: \"content_header\"\r\n}, {\r\n  no: 10,\r\n  name: \"byte_header\",\r\n  kind: \"message\",\r\n  T: DataStream_ByteHeader,\r\n  oneof: \"content_header\"\r\n}], {\r\n  localName: \"DataStream_Header\"\r\n});\r\nconst DataStream_Chunk = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataStream.Chunk\", () => [{\r\n  no: 1,\r\n  name: \"stream_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"chunk_index\",\r\n  kind: \"scalar\",\r\n  T: 4\r\n  /* ScalarType.UINT64 */\r\n}, {\r\n  no: 3,\r\n  name: \"content\",\r\n  kind: \"scalar\",\r\n  T: 12\r\n  /* ScalarType.BYTES */\r\n}, {\r\n  no: 4,\r\n  name: \"version\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}, {\r\n  no: 5,\r\n  name: \"iv\",\r\n  kind: \"scalar\",\r\n  T: 12,\r\n  opt: true\r\n}], {\r\n  localName: \"DataStream_Chunk\"\r\n});\r\nconst DataStream_Trailer = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataStream.Trailer\", () => [{\r\n  no: 1,\r\n  name: \"stream_id\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"reason\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"attributes\",\r\n  kind: \"map\",\r\n  K: 9,\r\n  V: {\r\n    kind: \"scalar\",\r\n    T: 9\r\n    /* ScalarType.STRING */\r\n  }\r\n}], {\r\n  localName: \"DataStream_Trailer\"\r\n});\r\nconst SignalTarget = /* @__PURE__ */proto3.makeEnum(\"livekit.SignalTarget\", [{\r\n  no: 0,\r\n  name: \"PUBLISHER\"\r\n}, {\r\n  no: 1,\r\n  name: \"SUBSCRIBER\"\r\n}]);\r\nconst StreamState = /* @__PURE__ */proto3.makeEnum(\"livekit.StreamState\", [{\r\n  no: 0,\r\n  name: \"ACTIVE\"\r\n}, {\r\n  no: 1,\r\n  name: \"PAUSED\"\r\n}]);\r\nconst CandidateProtocol = /* @__PURE__ */proto3.makeEnum(\"livekit.CandidateProtocol\", [{\r\n  no: 0,\r\n  name: \"UDP\"\r\n}, {\r\n  no: 1,\r\n  name: \"TCP\"\r\n}, {\r\n  no: 2,\r\n  name: \"TLS\"\r\n}]);\r\nconst SignalRequest = /* @__PURE__ */proto3.makeMessageType(\"livekit.SignalRequest\", () => [{\r\n  no: 1,\r\n  name: \"offer\",\r\n  kind: \"message\",\r\n  T: SessionDescription,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 2,\r\n  name: \"answer\",\r\n  kind: \"message\",\r\n  T: SessionDescription,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 3,\r\n  name: \"trickle\",\r\n  kind: \"message\",\r\n  T: TrickleRequest,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 4,\r\n  name: \"add_track\",\r\n  kind: \"message\",\r\n  T: AddTrackRequest,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 5,\r\n  name: \"mute\",\r\n  kind: \"message\",\r\n  T: MuteTrackRequest,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 6,\r\n  name: \"subscription\",\r\n  kind: \"message\",\r\n  T: UpdateSubscription,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 7,\r\n  name: \"track_setting\",\r\n  kind: \"message\",\r\n  T: UpdateTrackSettings,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 8,\r\n  name: \"leave\",\r\n  kind: \"message\",\r\n  T: LeaveRequest,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 10,\r\n  name: \"update_layers\",\r\n  kind: \"message\",\r\n  T: UpdateVideoLayers,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 11,\r\n  name: \"subscription_permission\",\r\n  kind: \"message\",\r\n  T: SubscriptionPermission,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 12,\r\n  name: \"sync_state\",\r\n  kind: \"message\",\r\n  T: SyncState,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 13,\r\n  name: \"simulate\",\r\n  kind: \"message\",\r\n  T: SimulateScenario,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 14,\r\n  name: \"ping\",\r\n  kind: \"scalar\",\r\n  T: 3,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 15,\r\n  name: \"update_metadata\",\r\n  kind: \"message\",\r\n  T: UpdateParticipantMetadata,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 16,\r\n  name: \"ping_req\",\r\n  kind: \"message\",\r\n  T: Ping,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 17,\r\n  name: \"update_audio_track\",\r\n  kind: \"message\",\r\n  T: UpdateLocalAudioTrack,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 18,\r\n  name: \"update_video_track\",\r\n  kind: \"message\",\r\n  T: UpdateLocalVideoTrack,\r\n  oneof: \"message\"\r\n}]);\r\nconst SignalResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.SignalResponse\", () => [{\r\n  no: 1,\r\n  name: \"join\",\r\n  kind: \"message\",\r\n  T: JoinResponse,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 2,\r\n  name: \"answer\",\r\n  kind: \"message\",\r\n  T: SessionDescription,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 3,\r\n  name: \"offer\",\r\n  kind: \"message\",\r\n  T: SessionDescription,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 4,\r\n  name: \"trickle\",\r\n  kind: \"message\",\r\n  T: TrickleRequest,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 5,\r\n  name: \"update\",\r\n  kind: \"message\",\r\n  T: ParticipantUpdate,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 6,\r\n  name: \"track_published\",\r\n  kind: \"message\",\r\n  T: TrackPublishedResponse,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 8,\r\n  name: \"leave\",\r\n  kind: \"message\",\r\n  T: LeaveRequest,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 9,\r\n  name: \"mute\",\r\n  kind: \"message\",\r\n  T: MuteTrackRequest,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 10,\r\n  name: \"speakers_changed\",\r\n  kind: \"message\",\r\n  T: SpeakersChanged,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 11,\r\n  name: \"room_update\",\r\n  kind: \"message\",\r\n  T: RoomUpdate,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 12,\r\n  name: \"connection_quality\",\r\n  kind: \"message\",\r\n  T: ConnectionQualityUpdate,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 13,\r\n  name: \"stream_state_update\",\r\n  kind: \"message\",\r\n  T: StreamStateUpdate,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 14,\r\n  name: \"subscribed_quality_update\",\r\n  kind: \"message\",\r\n  T: SubscribedQualityUpdate,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 15,\r\n  name: \"subscription_permission_update\",\r\n  kind: \"message\",\r\n  T: SubscriptionPermissionUpdate,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 16,\r\n  name: \"refresh_token\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 17,\r\n  name: \"track_unpublished\",\r\n  kind: \"message\",\r\n  T: TrackUnpublishedResponse,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 18,\r\n  name: \"pong\",\r\n  kind: \"scalar\",\r\n  T: 3,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 19,\r\n  name: \"reconnect\",\r\n  kind: \"message\",\r\n  T: ReconnectResponse,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 20,\r\n  name: \"pong_resp\",\r\n  kind: \"message\",\r\n  T: Pong,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 21,\r\n  name: \"subscription_response\",\r\n  kind: \"message\",\r\n  T: SubscriptionResponse,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 22,\r\n  name: \"request_response\",\r\n  kind: \"message\",\r\n  T: RequestResponse,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 23,\r\n  name: \"track_subscribed\",\r\n  kind: \"message\",\r\n  T: TrackSubscribed,\r\n  oneof: \"message\"\r\n}, {\r\n  no: 24,\r\n  name: \"room_moved\",\r\n  kind: \"message\",\r\n  T: RoomMovedResponse,\r\n  oneof: \"message\"\r\n}]);\r\nconst SimulcastCodec = /* @__PURE__ */proto3.makeMessageType(\"livekit.SimulcastCodec\", () => [{\r\n  no: 1,\r\n  name: \"codec\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"cid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst AddTrackRequest = /* @__PURE__ */proto3.makeMessageType(\"livekit.AddTrackRequest\", () => [{\r\n  no: 1,\r\n  name: \"cid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"name\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"type\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(TrackType)\r\n}, {\r\n  no: 4,\r\n  name: \"width\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 5,\r\n  name: \"height\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 6,\r\n  name: \"muted\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 7,\r\n  name: \"disable_dtx\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 8,\r\n  name: \"source\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(TrackSource)\r\n}, {\r\n  no: 9,\r\n  name: \"layers\",\r\n  kind: \"message\",\r\n  T: VideoLayer,\r\n  repeated: true\r\n}, {\r\n  no: 10,\r\n  name: \"simulcast_codecs\",\r\n  kind: \"message\",\r\n  T: SimulcastCodec,\r\n  repeated: true\r\n}, {\r\n  no: 11,\r\n  name: \"sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 12,\r\n  name: \"stereo\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 13,\r\n  name: \"disable_red\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 14,\r\n  name: \"encryption\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(Encryption_Type)\r\n}, {\r\n  no: 15,\r\n  name: \"stream\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 16,\r\n  name: \"backup_codec_policy\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(BackupCodecPolicy$1)\r\n}, {\r\n  no: 17,\r\n  name: \"audio_features\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(AudioTrackFeature),\r\n  repeated: true\r\n}]);\r\nconst TrickleRequest = /* @__PURE__ */proto3.makeMessageType(\"livekit.TrickleRequest\", () => [{\r\n  no: 1,\r\n  name: \"candidateInit\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"target\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(SignalTarget)\r\n}, {\r\n  no: 3,\r\n  name: \"final\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst MuteTrackRequest = /* @__PURE__ */proto3.makeMessageType(\"livekit.MuteTrackRequest\", () => [{\r\n  no: 1,\r\n  name: \"sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"muted\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst JoinResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.JoinResponse\", () => [{\r\n  no: 1,\r\n  name: \"room\",\r\n  kind: \"message\",\r\n  T: Room$1\r\n}, {\r\n  no: 2,\r\n  name: \"participant\",\r\n  kind: \"message\",\r\n  T: ParticipantInfo\r\n}, {\r\n  no: 3,\r\n  name: \"other_participants\",\r\n  kind: \"message\",\r\n  T: ParticipantInfo,\r\n  repeated: true\r\n}, {\r\n  no: 4,\r\n  name: \"server_version\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 5,\r\n  name: \"ice_servers\",\r\n  kind: \"message\",\r\n  T: ICEServer,\r\n  repeated: true\r\n}, {\r\n  no: 6,\r\n  name: \"subscriber_primary\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 7,\r\n  name: \"alternative_url\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 8,\r\n  name: \"client_configuration\",\r\n  kind: \"message\",\r\n  T: ClientConfiguration\r\n}, {\r\n  no: 9,\r\n  name: \"server_region\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 10,\r\n  name: \"ping_timeout\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}, {\r\n  no: 11,\r\n  name: \"ping_interval\",\r\n  kind: \"scalar\",\r\n  T: 5\r\n  /* ScalarType.INT32 */\r\n}, {\r\n  no: 12,\r\n  name: \"server_info\",\r\n  kind: \"message\",\r\n  T: ServerInfo\r\n}, {\r\n  no: 13,\r\n  name: \"sif_trailer\",\r\n  kind: \"scalar\",\r\n  T: 12\r\n  /* ScalarType.BYTES */\r\n}, {\r\n  no: 14,\r\n  name: \"enabled_publish_codecs\",\r\n  kind: \"message\",\r\n  T: Codec,\r\n  repeated: true\r\n}, {\r\n  no: 15,\r\n  name: \"fast_publish\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst ReconnectResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.ReconnectResponse\", () => [{\r\n  no: 1,\r\n  name: \"ice_servers\",\r\n  kind: \"message\",\r\n  T: ICEServer,\r\n  repeated: true\r\n}, {\r\n  no: 2,\r\n  name: \"client_configuration\",\r\n  kind: \"message\",\r\n  T: ClientConfiguration\r\n}, {\r\n  no: 3,\r\n  name: \"server_info\",\r\n  kind: \"message\",\r\n  T: ServerInfo\r\n}, {\r\n  no: 4,\r\n  name: \"last_message_seq\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst TrackPublishedResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.TrackPublishedResponse\", () => [{\r\n  no: 1,\r\n  name: \"cid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"track\",\r\n  kind: \"message\",\r\n  T: TrackInfo\r\n}]);\r\nconst TrackUnpublishedResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.TrackUnpublishedResponse\", () => [{\r\n  no: 1,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst SessionDescription = /* @__PURE__ */proto3.makeMessageType(\"livekit.SessionDescription\", () => [{\r\n  no: 1,\r\n  name: \"type\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"sdp\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst ParticipantUpdate = /* @__PURE__ */proto3.makeMessageType(\"livekit.ParticipantUpdate\", () => [{\r\n  no: 1,\r\n  name: \"participants\",\r\n  kind: \"message\",\r\n  T: ParticipantInfo,\r\n  repeated: true\r\n}]);\r\nconst UpdateSubscription = /* @__PURE__ */proto3.makeMessageType(\"livekit.UpdateSubscription\", () => [{\r\n  no: 1,\r\n  name: \"track_sids\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 2,\r\n  name: \"subscribe\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 3,\r\n  name: \"participant_tracks\",\r\n  kind: \"message\",\r\n  T: ParticipantTracks,\r\n  repeated: true\r\n}]);\r\nconst UpdateTrackSettings = /* @__PURE__ */proto3.makeMessageType(\"livekit.UpdateTrackSettings\", () => [{\r\n  no: 1,\r\n  name: \"track_sids\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 3,\r\n  name: \"disabled\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 4,\r\n  name: \"quality\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(VideoQuality$1)\r\n}, {\r\n  no: 5,\r\n  name: \"width\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 6,\r\n  name: \"height\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 7,\r\n  name: \"fps\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 8,\r\n  name: \"priority\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst UpdateLocalAudioTrack = /* @__PURE__ */proto3.makeMessageType(\"livekit.UpdateLocalAudioTrack\", () => [{\r\n  no: 1,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"features\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(AudioTrackFeature),\r\n  repeated: true\r\n}]);\r\nconst UpdateLocalVideoTrack = /* @__PURE__ */proto3.makeMessageType(\"livekit.UpdateLocalVideoTrack\", () => [{\r\n  no: 1,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"width\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 3,\r\n  name: \"height\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst LeaveRequest = /* @__PURE__ */proto3.makeMessageType(\"livekit.LeaveRequest\", () => [{\r\n  no: 1,\r\n  name: \"can_reconnect\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 2,\r\n  name: \"reason\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(DisconnectReason)\r\n}, {\r\n  no: 3,\r\n  name: \"action\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(LeaveRequest_Action)\r\n}, {\r\n  no: 4,\r\n  name: \"regions\",\r\n  kind: \"message\",\r\n  T: RegionSettings\r\n}]);\r\nconst LeaveRequest_Action = /* @__PURE__ */proto3.makeEnum(\"livekit.LeaveRequest.Action\", [{\r\n  no: 0,\r\n  name: \"DISCONNECT\"\r\n}, {\r\n  no: 1,\r\n  name: \"RESUME\"\r\n}, {\r\n  no: 2,\r\n  name: \"RECONNECT\"\r\n}]);\r\nconst UpdateVideoLayers = /* @__PURE__ */proto3.makeMessageType(\"livekit.UpdateVideoLayers\", () => [{\r\n  no: 1,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"layers\",\r\n  kind: \"message\",\r\n  T: VideoLayer,\r\n  repeated: true\r\n}]);\r\nconst UpdateParticipantMetadata = /* @__PURE__ */proto3.makeMessageType(\"livekit.UpdateParticipantMetadata\", () => [{\r\n  no: 1,\r\n  name: \"metadata\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"name\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"attributes\",\r\n  kind: \"map\",\r\n  K: 9,\r\n  V: {\r\n    kind: \"scalar\",\r\n    T: 9\r\n    /* ScalarType.STRING */\r\n  }\r\n}, {\r\n  no: 4,\r\n  name: \"request_id\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst ICEServer = /* @__PURE__ */proto3.makeMessageType(\"livekit.ICEServer\", () => [{\r\n  no: 1,\r\n  name: \"urls\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 2,\r\n  name: \"username\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"credential\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst SpeakersChanged = /* @__PURE__ */proto3.makeMessageType(\"livekit.SpeakersChanged\", () => [{\r\n  no: 1,\r\n  name: \"speakers\",\r\n  kind: \"message\",\r\n  T: SpeakerInfo,\r\n  repeated: true\r\n}]);\r\nconst RoomUpdate = /* @__PURE__ */proto3.makeMessageType(\"livekit.RoomUpdate\", () => [{\r\n  no: 1,\r\n  name: \"room\",\r\n  kind: \"message\",\r\n  T: Room$1\r\n}]);\r\nconst ConnectionQualityInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.ConnectionQualityInfo\", () => [{\r\n  no: 1,\r\n  name: \"participant_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"quality\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(ConnectionQuality$1)\r\n}, {\r\n  no: 3,\r\n  name: \"score\",\r\n  kind: \"scalar\",\r\n  T: 2\r\n  /* ScalarType.FLOAT */\r\n}]);\r\nconst ConnectionQualityUpdate = /* @__PURE__ */proto3.makeMessageType(\"livekit.ConnectionQualityUpdate\", () => [{\r\n  no: 1,\r\n  name: \"updates\",\r\n  kind: \"message\",\r\n  T: ConnectionQualityInfo,\r\n  repeated: true\r\n}]);\r\nconst StreamStateInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.StreamStateInfo\", () => [{\r\n  no: 1,\r\n  name: \"participant_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"state\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(StreamState)\r\n}]);\r\nconst StreamStateUpdate = /* @__PURE__ */proto3.makeMessageType(\"livekit.StreamStateUpdate\", () => [{\r\n  no: 1,\r\n  name: \"stream_states\",\r\n  kind: \"message\",\r\n  T: StreamStateInfo,\r\n  repeated: true\r\n}]);\r\nconst SubscribedQuality = /* @__PURE__ */proto3.makeMessageType(\"livekit.SubscribedQuality\", () => [{\r\n  no: 1,\r\n  name: \"quality\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(VideoQuality$1)\r\n}, {\r\n  no: 2,\r\n  name: \"enabled\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst SubscribedCodec = /* @__PURE__ */proto3.makeMessageType(\"livekit.SubscribedCodec\", () => [{\r\n  no: 1,\r\n  name: \"codec\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"qualities\",\r\n  kind: \"message\",\r\n  T: SubscribedQuality,\r\n  repeated: true\r\n}]);\r\nconst SubscribedQualityUpdate = /* @__PURE__ */proto3.makeMessageType(\"livekit.SubscribedQualityUpdate\", () => [{\r\n  no: 1,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"subscribed_qualities\",\r\n  kind: \"message\",\r\n  T: SubscribedQuality,\r\n  repeated: true\r\n}, {\r\n  no: 3,\r\n  name: \"subscribed_codecs\",\r\n  kind: \"message\",\r\n  T: SubscribedCodec,\r\n  repeated: true\r\n}]);\r\nconst TrackPermission = /* @__PURE__ */proto3.makeMessageType(\"livekit.TrackPermission\", () => [{\r\n  no: 1,\r\n  name: \"participant_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"all_tracks\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 3,\r\n  name: \"track_sids\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 4,\r\n  name: \"participant_identity\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst SubscriptionPermission = /* @__PURE__ */proto3.makeMessageType(\"livekit.SubscriptionPermission\", () => [{\r\n  no: 1,\r\n  name: \"all_participants\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}, {\r\n  no: 2,\r\n  name: \"track_permissions\",\r\n  kind: \"message\",\r\n  T: TrackPermission,\r\n  repeated: true\r\n}]);\r\nconst SubscriptionPermissionUpdate = /* @__PURE__ */proto3.makeMessageType(\"livekit.SubscriptionPermissionUpdate\", () => [{\r\n  no: 1,\r\n  name: \"participant_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"allowed\",\r\n  kind: \"scalar\",\r\n  T: 8\r\n  /* ScalarType.BOOL */\r\n}]);\r\nconst RoomMovedResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.RoomMovedResponse\", () => [{\r\n  no: 1,\r\n  name: \"room\",\r\n  kind: \"message\",\r\n  T: Room$1\r\n}, {\r\n  no: 2,\r\n  name: \"token\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"participant\",\r\n  kind: \"message\",\r\n  T: ParticipantInfo\r\n}, {\r\n  no: 4,\r\n  name: \"other_participants\",\r\n  kind: \"message\",\r\n  T: ParticipantInfo,\r\n  repeated: true\r\n}]);\r\nconst SyncState = /* @__PURE__ */proto3.makeMessageType(\"livekit.SyncState\", () => [{\r\n  no: 1,\r\n  name: \"answer\",\r\n  kind: \"message\",\r\n  T: SessionDescription\r\n}, {\r\n  no: 2,\r\n  name: \"subscription\",\r\n  kind: \"message\",\r\n  T: UpdateSubscription\r\n}, {\r\n  no: 3,\r\n  name: \"publish_tracks\",\r\n  kind: \"message\",\r\n  T: TrackPublishedResponse,\r\n  repeated: true\r\n}, {\r\n  no: 4,\r\n  name: \"data_channels\",\r\n  kind: \"message\",\r\n  T: DataChannelInfo,\r\n  repeated: true\r\n}, {\r\n  no: 5,\r\n  name: \"offer\",\r\n  kind: \"message\",\r\n  T: SessionDescription\r\n}, {\r\n  no: 6,\r\n  name: \"track_sids_disabled\",\r\n  kind: \"scalar\",\r\n  T: 9,\r\n  repeated: true\r\n}, {\r\n  no: 7,\r\n  name: \"datachannel_receive_states\",\r\n  kind: \"message\",\r\n  T: DataChannelReceiveState,\r\n  repeated: true\r\n}]);\r\nconst DataChannelReceiveState = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataChannelReceiveState\", () => [{\r\n  no: 1,\r\n  name: \"publisher_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"last_seq\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}]);\r\nconst DataChannelInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.DataChannelInfo\", () => [{\r\n  no: 1,\r\n  name: \"label\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"id\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 3,\r\n  name: \"target\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(SignalTarget)\r\n}]);\r\nconst SimulateScenario = /* @__PURE__ */proto3.makeMessageType(\"livekit.SimulateScenario\", () => [{\r\n  no: 1,\r\n  name: \"speaker_update\",\r\n  kind: \"scalar\",\r\n  T: 5,\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 2,\r\n  name: \"node_failure\",\r\n  kind: \"scalar\",\r\n  T: 8,\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 3,\r\n  name: \"migration\",\r\n  kind: \"scalar\",\r\n  T: 8,\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 4,\r\n  name: \"server_leave\",\r\n  kind: \"scalar\",\r\n  T: 8,\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 5,\r\n  name: \"switch_candidate_protocol\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(CandidateProtocol),\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 6,\r\n  name: \"subscriber_bandwidth\",\r\n  kind: \"scalar\",\r\n  T: 3,\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 7,\r\n  name: \"disconnect_signal_on_resume\",\r\n  kind: \"scalar\",\r\n  T: 8,\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 8,\r\n  name: \"disconnect_signal_on_resume_no_messages\",\r\n  kind: \"scalar\",\r\n  T: 8,\r\n  oneof: \"scenario\"\r\n}, {\r\n  no: 9,\r\n  name: \"leave_request_full_reconnect\",\r\n  kind: \"scalar\",\r\n  T: 8,\r\n  oneof: \"scenario\"\r\n}]);\r\nconst Ping = /* @__PURE__ */proto3.makeMessageType(\"livekit.Ping\", () => [{\r\n  no: 1,\r\n  name: \"timestamp\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 2,\r\n  name: \"rtt\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}]);\r\nconst Pong = /* @__PURE__ */proto3.makeMessageType(\"livekit.Pong\", () => [{\r\n  no: 1,\r\n  name: \"last_ping_timestamp\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}, {\r\n  no: 2,\r\n  name: \"timestamp\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}]);\r\nconst RegionSettings = /* @__PURE__ */proto3.makeMessageType(\"livekit.RegionSettings\", () => [{\r\n  no: 1,\r\n  name: \"regions\",\r\n  kind: \"message\",\r\n  T: RegionInfo,\r\n  repeated: true\r\n}]);\r\nconst RegionInfo = /* @__PURE__ */proto3.makeMessageType(\"livekit.RegionInfo\", () => [{\r\n  no: 1,\r\n  name: \"region\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"url\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 3,\r\n  name: \"distance\",\r\n  kind: \"scalar\",\r\n  T: 3\r\n  /* ScalarType.INT64 */\r\n}]);\r\nconst SubscriptionResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.SubscriptionResponse\", () => [{\r\n  no: 1,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}, {\r\n  no: 2,\r\n  name: \"err\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(SubscriptionError)\r\n}]);\r\nconst RequestResponse = /* @__PURE__ */proto3.makeMessageType(\"livekit.RequestResponse\", () => [{\r\n  no: 1,\r\n  name: \"request_id\",\r\n  kind: \"scalar\",\r\n  T: 13\r\n  /* ScalarType.UINT32 */\r\n}, {\r\n  no: 2,\r\n  name: \"reason\",\r\n  kind: \"enum\",\r\n  T: proto3.getEnumType(RequestResponse_Reason)\r\n}, {\r\n  no: 3,\r\n  name: \"message\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\nconst RequestResponse_Reason = /* @__PURE__ */proto3.makeEnum(\"livekit.RequestResponse.Reason\", [{\r\n  no: 0,\r\n  name: \"OK\"\r\n}, {\r\n  no: 1,\r\n  name: \"NOT_FOUND\"\r\n}, {\r\n  no: 2,\r\n  name: \"NOT_ALLOWED\"\r\n}, {\r\n  no: 3,\r\n  name: \"LIMIT_EXCEEDED\"\r\n}]);\r\nconst TrackSubscribed = /* @__PURE__ */proto3.makeMessageType(\"livekit.TrackSubscribed\", () => [{\r\n  no: 1,\r\n  name: \"track_sid\",\r\n  kind: \"scalar\",\r\n  T: 9\r\n  /* ScalarType.STRING */\r\n}]);\r\n\r\nfunction getDefaultExportFromCjs (x) {\r\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\r\n}\r\n\r\nvar loglevel$1 = {exports: {}};\r\n\r\n/*\r\n* loglevel - https://github.com/pimterry/loglevel\r\n*\r\n* Copyright (c) 2013 Tim Perry\r\n* Licensed under the MIT license.\r\n*/\r\nvar loglevel = loglevel$1.exports;\r\nvar hasRequiredLoglevel;\r\nfunction requireLoglevel() {\r\n  if (hasRequiredLoglevel) return loglevel$1.exports;\r\n  hasRequiredLoglevel = 1;\r\n  (function (module) {\r\n    (function (root, definition) {\r\n\r\n      if (module.exports) {\r\n        module.exports = definition();\r\n      } else {\r\n        root.log = definition();\r\n      }\r\n    })(loglevel, function () {\r\n\r\n      // Slightly dubious tricks to cut down minimized file size\r\n      var noop = function () {};\r\n      var undefinedType = \"undefined\";\r\n      var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\\/|MSIE /.test(window.navigator.userAgent);\r\n      var logMethods = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\r\n      var _loggersByName = {};\r\n      var defaultLogger = null;\r\n\r\n      // Cross-browser bind equivalent that works at least back to IE6\r\n      function bindMethod(obj, methodName) {\r\n        var method = obj[methodName];\r\n        if (typeof method.bind === 'function') {\r\n          return method.bind(obj);\r\n        } else {\r\n          try {\r\n            return Function.prototype.bind.call(method, obj);\r\n          } catch (e) {\r\n            // Missing bind shim or IE8 + Modernizr, fallback to wrapping\r\n            return function () {\r\n              return Function.prototype.apply.apply(method, [obj, arguments]);\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      // Trace() doesn't print the message in IE, so for that case we need to wrap it\r\n      function traceForIE() {\r\n        if (console.log) {\r\n          if (console.log.apply) {\r\n            console.log.apply(console, arguments);\r\n          } else {\r\n            // In old IE, native console methods themselves don't have apply().\r\n            Function.prototype.apply.apply(console.log, [console, arguments]);\r\n          }\r\n        }\r\n        if (console.trace) console.trace();\r\n      }\r\n\r\n      // Build the best logging method possible for this env\r\n      // Wherever possible we want to bind, not wrap, to preserve stack traces\r\n      function realMethod(methodName) {\r\n        if (methodName === 'debug') {\r\n          methodName = 'log';\r\n        }\r\n        if (typeof console === undefinedType) {\r\n          return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\r\n        } else if (methodName === 'trace' && isIE) {\r\n          return traceForIE;\r\n        } else if (console[methodName] !== undefined) {\r\n          return bindMethod(console, methodName);\r\n        } else if (console.log !== undefined) {\r\n          return bindMethod(console, 'log');\r\n        } else {\r\n          return noop;\r\n        }\r\n      }\r\n\r\n      // These private functions always need `this` to be set properly\r\n\r\n      function replaceLoggingMethods() {\r\n        /*jshint validthis:true */\r\n        var level = this.getLevel();\r\n\r\n        // Replace the actual methods.\r\n        for (var i = 0; i < logMethods.length; i++) {\r\n          var methodName = logMethods[i];\r\n          this[methodName] = i < level ? noop : this.methodFactory(methodName, level, this.name);\r\n        }\r\n\r\n        // Define log.log as an alias for log.debug\r\n        this.log = this.debug;\r\n\r\n        // Return any important warnings.\r\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\r\n          return \"No console available for logging\";\r\n        }\r\n      }\r\n\r\n      // In old IE versions, the console isn't present until you first open it.\r\n      // We build realMethod() replacements here that regenerate logging methods\r\n      function enableLoggingWhenConsoleArrives(methodName) {\r\n        return function () {\r\n          if (typeof console !== undefinedType) {\r\n            replaceLoggingMethods.call(this);\r\n            this[methodName].apply(this, arguments);\r\n          }\r\n        };\r\n      }\r\n\r\n      // By default, we use closely bound real methods wherever possible, and\r\n      // otherwise we wait for a console to appear, and then try again.\r\n      function defaultMethodFactory(methodName, _level, _loggerName) {\r\n        /*jshint validthis:true */\r\n        return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);\r\n      }\r\n      function Logger(name, factory) {\r\n        // Private instance variables.\r\n        var self = this;\r\n        /**\r\n         * The level inherited from a parent logger (or a global default). We\r\n         * cache this here rather than delegating to the parent so that it stays\r\n         * in sync with the actual logging methods that we have installed (the\r\n         * parent could change levels but we might not have rebuilt the loggers\r\n         * in this child yet).\r\n         * @type {number}\r\n         */\r\n        var inheritedLevel;\r\n        /**\r\n         * The default level for this logger, if any. If set, this overrides\r\n         * `inheritedLevel`.\r\n         * @type {number|null}\r\n         */\r\n        var defaultLevel;\r\n        /**\r\n         * A user-specific level for this logger. If set, this overrides\r\n         * `defaultLevel`.\r\n         * @type {number|null}\r\n         */\r\n        var userLevel;\r\n        var storageKey = \"loglevel\";\r\n        if (typeof name === \"string\") {\r\n          storageKey += \":\" + name;\r\n        } else if (typeof name === \"symbol\") {\r\n          storageKey = undefined;\r\n        }\r\n        function persistLevelIfPossible(levelNum) {\r\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          // Use localStorage if available\r\n          try {\r\n            window.localStorage[storageKey] = levelName;\r\n            return;\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n            window.document.cookie = encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\r\n          } catch (ignore) {}\r\n        }\r\n        function getPersistedLevel() {\r\n          var storedLevel;\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n          try {\r\n            storedLevel = window.localStorage[storageKey];\r\n          } catch (ignore) {}\r\n\r\n          // Fallback to cookies if local storage gives us nothing\r\n          if (typeof storedLevel === undefinedType) {\r\n            try {\r\n              var cookie = window.document.cookie;\r\n              var cookieName = encodeURIComponent(storageKey);\r\n              var location = cookie.indexOf(cookieName + \"=\");\r\n              if (location !== -1) {\r\n                storedLevel = /^([^;]+)/.exec(cookie.slice(location + cookieName.length + 1))[1];\r\n              }\r\n            } catch (ignore) {}\r\n          }\r\n\r\n          // If the stored level is not valid, treat it as if nothing was stored.\r\n          if (self.levels[storedLevel] === undefined) {\r\n            storedLevel = undefined;\r\n          }\r\n          return storedLevel;\r\n        }\r\n        function clearPersistedLevel() {\r\n          if (typeof window === undefinedType || !storageKey) return;\r\n\r\n          // Use localStorage if available\r\n          try {\r\n            window.localStorage.removeItem(storageKey);\r\n          } catch (ignore) {}\r\n\r\n          // Use session cookie as fallback\r\n          try {\r\n            window.document.cookie = encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\r\n          } catch (ignore) {}\r\n        }\r\n        function normalizeLevel(input) {\r\n          var level = input;\r\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\r\n            level = self.levels[level.toUpperCase()];\r\n          }\r\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\r\n            return level;\r\n          } else {\r\n            throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\r\n          }\r\n        }\r\n\r\n        /*\r\n         *\r\n         * Public logger API - see https://github.com/pimterry/loglevel for details\r\n         *\r\n         */\r\n\r\n        self.name = name;\r\n        self.levels = {\r\n          \"TRACE\": 0,\r\n          \"DEBUG\": 1,\r\n          \"INFO\": 2,\r\n          \"WARN\": 3,\r\n          \"ERROR\": 4,\r\n          \"SILENT\": 5\r\n        };\r\n        self.methodFactory = factory || defaultMethodFactory;\r\n        self.getLevel = function () {\r\n          if (userLevel != null) {\r\n            return userLevel;\r\n          } else if (defaultLevel != null) {\r\n            return defaultLevel;\r\n          } else {\r\n            return inheritedLevel;\r\n          }\r\n        };\r\n        self.setLevel = function (level, persist) {\r\n          userLevel = normalizeLevel(level);\r\n          if (persist !== false) {\r\n            // defaults to true\r\n            persistLevelIfPossible(userLevel);\r\n          }\r\n\r\n          // NOTE: in v2, this should call rebuild(), which updates children.\r\n          return replaceLoggingMethods.call(self);\r\n        };\r\n        self.setDefaultLevel = function (level) {\r\n          defaultLevel = normalizeLevel(level);\r\n          if (!getPersistedLevel()) {\r\n            self.setLevel(level, false);\r\n          }\r\n        };\r\n        self.resetLevel = function () {\r\n          userLevel = null;\r\n          clearPersistedLevel();\r\n          replaceLoggingMethods.call(self);\r\n        };\r\n        self.enableAll = function (persist) {\r\n          self.setLevel(self.levels.TRACE, persist);\r\n        };\r\n        self.disableAll = function (persist) {\r\n          self.setLevel(self.levels.SILENT, persist);\r\n        };\r\n        self.rebuild = function () {\r\n          if (defaultLogger !== self) {\r\n            inheritedLevel = normalizeLevel(defaultLogger.getLevel());\r\n          }\r\n          replaceLoggingMethods.call(self);\r\n          if (defaultLogger === self) {\r\n            for (var childName in _loggersByName) {\r\n              _loggersByName[childName].rebuild();\r\n            }\r\n          }\r\n        };\r\n\r\n        // Initialize all the internal levels.\r\n        inheritedLevel = normalizeLevel(defaultLogger ? defaultLogger.getLevel() : \"WARN\");\r\n        var initialLevel = getPersistedLevel();\r\n        if (initialLevel != null) {\r\n          userLevel = normalizeLevel(initialLevel);\r\n        }\r\n        replaceLoggingMethods.call(self);\r\n      }\r\n\r\n      /*\r\n       *\r\n       * Top-level API\r\n       *\r\n       */\r\n\r\n      defaultLogger = new Logger();\r\n      defaultLogger.getLogger = function getLogger(name) {\r\n        if (typeof name !== \"symbol\" && typeof name !== \"string\" || name === \"\") {\r\n          throw new TypeError(\"You must supply a name when creating a logger.\");\r\n        }\r\n        var logger = _loggersByName[name];\r\n        if (!logger) {\r\n          logger = _loggersByName[name] = new Logger(name, defaultLogger.methodFactory);\r\n        }\r\n        return logger;\r\n      };\r\n\r\n      // Grab the current global log variable in case of overwrite\r\n      var _log = typeof window !== undefinedType ? window.log : undefined;\r\n      defaultLogger.noConflict = function () {\r\n        if (typeof window !== undefinedType && window.log === defaultLogger) {\r\n          window.log = _log;\r\n        }\r\n        return defaultLogger;\r\n      };\r\n      defaultLogger.getLoggers = function getLoggers() {\r\n        return _loggersByName;\r\n      };\r\n\r\n      // ES6 default export, for compatibility\r\n      defaultLogger['default'] = defaultLogger;\r\n      return defaultLogger;\r\n    });\r\n  })(loglevel$1);\r\n  return loglevel$1.exports;\r\n}\r\n\r\nvar loglevelExports = requireLoglevel();\r\n\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n  LogLevel[LogLevel[\"trace\"] = 0] = \"trace\";\r\n  LogLevel[LogLevel[\"debug\"] = 1] = \"debug\";\r\n  LogLevel[LogLevel[\"info\"] = 2] = \"info\";\r\n  LogLevel[LogLevel[\"warn\"] = 3] = \"warn\";\r\n  LogLevel[LogLevel[\"error\"] = 4] = \"error\";\r\n  LogLevel[LogLevel[\"silent\"] = 5] = \"silent\";\r\n})(LogLevel || (LogLevel = {}));\r\nvar LoggerNames;\r\n(function (LoggerNames) {\r\n  LoggerNames[\"Default\"] = \"livekit\";\r\n  LoggerNames[\"Room\"] = \"livekit-room\";\r\n  LoggerNames[\"Participant\"] = \"livekit-participant\";\r\n  LoggerNames[\"Track\"] = \"livekit-track\";\r\n  LoggerNames[\"Publication\"] = \"livekit-track-publication\";\r\n  LoggerNames[\"Engine\"] = \"livekit-engine\";\r\n  LoggerNames[\"Signal\"] = \"livekit-signal\";\r\n  LoggerNames[\"PCManager\"] = \"livekit-pc-manager\";\r\n  LoggerNames[\"PCTransport\"] = \"livekit-pc-transport\";\r\n  LoggerNames[\"E2EE\"] = \"lk-e2ee\";\r\n})(LoggerNames || (LoggerNames = {}));\r\nlet livekitLogger = loglevelExports.getLogger('livekit');\r\nconst livekitLoggers = Object.values(LoggerNames).map(name => loglevelExports.getLogger(name));\r\nlivekitLogger.setDefaultLevel(LogLevel.info);\r\n/**\r\n * @internal\r\n */\r\nfunction getLogger(name) {\r\n  const logger = loglevelExports.getLogger(name);\r\n  logger.setDefaultLevel(livekitLogger.getLevel());\r\n  return logger;\r\n}\r\nfunction setLogLevel(level, loggerName) {\r\n  if (loggerName) {\r\n    loglevelExports.getLogger(loggerName).setLevel(level);\r\n  } else {\r\n    for (const logger of livekitLoggers) {\r\n      logger.setLevel(level);\r\n    }\r\n  }\r\n}\r\n/**\r\n * use this to hook into the logging function to allow sending internal livekit logs to third party services\r\n * if set, the browser logs will lose their stacktrace information (see https://github.com/pimterry/loglevel#writing-plugins)\r\n */\r\nfunction setLogExtension(extension, logger) {\r\n  const loggers = logger ? [logger] : livekitLoggers;\r\n  loggers.forEach(logR => {\r\n    const originalFactory = logR.methodFactory;\r\n    logR.methodFactory = (methodName, configLevel, loggerName) => {\r\n      const rawMethod = originalFactory(methodName, configLevel, loggerName);\r\n      const logLevel = LogLevel[methodName];\r\n      const needLog = logLevel >= configLevel && logLevel < LogLevel.silent;\r\n      return (msg, context) => {\r\n        if (context) rawMethod(msg, context);else rawMethod(msg);\r\n        if (needLog) {\r\n          extension(logLevel, msg, context);\r\n        }\r\n      };\r\n    };\r\n    logR.setLevel(logR.getLevel());\r\n  });\r\n}\r\nconst workerLogger = loglevelExports.getLogger('lk-e2ee');\r\n\r\nconst maxRetryDelay = 7000;\r\nconst DEFAULT_RETRY_DELAYS_IN_MS = [0, 300, 2 * 2 * 300, 3 * 3 * 300, 4 * 4 * 300, maxRetryDelay, maxRetryDelay, maxRetryDelay, maxRetryDelay, maxRetryDelay];\r\nclass DefaultReconnectPolicy {\r\n  constructor(retryDelays) {\r\n    this._retryDelays = retryDelays !== undefined ? [...retryDelays] : DEFAULT_RETRY_DELAYS_IN_MS;\r\n  }\r\n  nextRetryDelayInMs(context) {\r\n    if (context.retryCount >= this._retryDelays.length) return null;\r\n    const retryDelay = this._retryDelays[context.retryCount];\r\n    if (context.retryCount <= 1) return retryDelay;\r\n    return retryDelay + Math.random() * 1000;\r\n  }\r\n}\r\n\r\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\r\n\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nfunction __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nvar events = {exports: {}};\r\n\r\nvar hasRequiredEvents;\r\nfunction requireEvents() {\r\n  if (hasRequiredEvents) return events.exports;\r\n  hasRequiredEvents = 1;\r\n  var R = typeof Reflect === 'object' ? Reflect : null;\r\n  var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {\r\n    return Function.prototype.apply.call(target, receiver, args);\r\n  };\r\n  var ReflectOwnKeys;\r\n  if (R && typeof R.ownKeys === 'function') {\r\n    ReflectOwnKeys = R.ownKeys;\r\n  } else if (Object.getOwnPropertySymbols) {\r\n    ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n      return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\r\n    };\r\n  } else {\r\n    ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n      return Object.getOwnPropertyNames(target);\r\n    };\r\n  }\r\n  function ProcessEmitWarning(warning) {\r\n    if (console && console.warn) console.warn(warning);\r\n  }\r\n  var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\r\n    return value !== value;\r\n  };\r\n  function EventEmitter() {\r\n    EventEmitter.init.call(this);\r\n  }\r\n  events.exports = EventEmitter;\r\n  events.exports.once = once;\r\n\r\n  // Backwards-compat with node 0.10.x\r\n  EventEmitter.EventEmitter = EventEmitter;\r\n  EventEmitter.prototype._events = undefined;\r\n  EventEmitter.prototype._eventsCount = 0;\r\n  EventEmitter.prototype._maxListeners = undefined;\r\n\r\n  // By default EventEmitters will print a warning if more than 10 listeners are\r\n  // added to it. This is a useful default which helps finding memory leaks.\r\n  var defaultMaxListeners = 10;\r\n  function checkListener(listener) {\r\n    if (typeof listener !== 'function') {\r\n      throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\r\n    }\r\n  }\r\n  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\r\n    enumerable: true,\r\n    get: function () {\r\n      return defaultMaxListeners;\r\n    },\r\n    set: function (arg) {\r\n      if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\r\n        throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\r\n      }\r\n      defaultMaxListeners = arg;\r\n    }\r\n  });\r\n  EventEmitter.init = function () {\r\n    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\r\n      this._events = Object.create(null);\r\n      this._eventsCount = 0;\r\n    }\r\n    this._maxListeners = this._maxListeners || undefined;\r\n  };\r\n\r\n  // Obviously not all Emitters should be limited to 10. This function allows\r\n  // that to be increased. Set to zero for unlimited.\r\n  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\r\n      throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\r\n    }\r\n    this._maxListeners = n;\r\n    return this;\r\n  };\r\n  function _getMaxListeners(that) {\r\n    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\r\n    return that._maxListeners;\r\n  }\r\n  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n    return _getMaxListeners(this);\r\n  };\r\n  EventEmitter.prototype.emit = function emit(type) {\r\n    var args = [];\r\n    for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\r\n    var doError = type === 'error';\r\n    var events = this._events;\r\n    if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;\r\n\r\n    // If there is no 'error' event listener then throw.\r\n    if (doError) {\r\n      var er;\r\n      if (args.length > 0) er = args[0];\r\n      if (er instanceof Error) {\r\n        // Note: The comments on the `throw` lines are intentional, they show\r\n        // up in Node's output if this results in an unhandled exception.\r\n        throw er; // Unhandled 'error' event\r\n      }\r\n      // At least give some kind of context to the user\r\n      var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\r\n      err.context = er;\r\n      throw err; // Unhandled 'error' event\r\n    }\r\n    var handler = events[type];\r\n    if (handler === undefined) return false;\r\n    if (typeof handler === 'function') {\r\n      ReflectApply(handler, this, args);\r\n    } else {\r\n      var len = handler.length;\r\n      var listeners = arrayClone(handler, len);\r\n      for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);\r\n    }\r\n    return true;\r\n  };\r\n  function _addListener(target, type, listener, prepend) {\r\n    var m;\r\n    var events;\r\n    var existing;\r\n    checkListener(listener);\r\n    events = target._events;\r\n    if (events === undefined) {\r\n      events = target._events = Object.create(null);\r\n      target._eventsCount = 0;\r\n    } else {\r\n      // To avoid recursion in the case that type === \"newListener\"! Before\r\n      // adding it to the listeners, first emit \"newListener\".\r\n      if (events.newListener !== undefined) {\r\n        target.emit('newListener', type, listener.listener ? listener.listener : listener);\r\n\r\n        // Re-assign `events` because a newListener handler could have caused the\r\n        // this._events to be assigned to a new object\r\n        events = target._events;\r\n      }\r\n      existing = events[type];\r\n    }\r\n    if (existing === undefined) {\r\n      // Optimize the case of one listener. Don't need the extra array object.\r\n      existing = events[type] = listener;\r\n      ++target._eventsCount;\r\n    } else {\r\n      if (typeof existing === 'function') {\r\n        // Adding the second element, need to change to array.\r\n        existing = events[type] = prepend ? [listener, existing] : [existing, listener];\r\n        // If we've already got an array, just append.\r\n      } else if (prepend) {\r\n        existing.unshift(listener);\r\n      } else {\r\n        existing.push(listener);\r\n      }\r\n\r\n      // Check for listener leak\r\n      m = _getMaxListeners(target);\r\n      if (m > 0 && existing.length > m && !existing.warned) {\r\n        existing.warned = true;\r\n        // No error code for this since it is a Warning\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');\r\n        w.name = 'MaxListenersExceededWarning';\r\n        w.emitter = target;\r\n        w.type = type;\r\n        w.count = existing.length;\r\n        ProcessEmitWarning(w);\r\n      }\r\n    }\r\n    return target;\r\n  }\r\n  EventEmitter.prototype.addListener = function addListener(type, listener) {\r\n    return _addListener(this, type, listener, false);\r\n  };\r\n  EventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n  EventEmitter.prototype.prependListener = function prependListener(type, listener) {\r\n    return _addListener(this, type, listener, true);\r\n  };\r\n  function onceWrapper() {\r\n    if (!this.fired) {\r\n      this.target.removeListener(this.type, this.wrapFn);\r\n      this.fired = true;\r\n      if (arguments.length === 0) return this.listener.call(this.target);\r\n      return this.listener.apply(this.target, arguments);\r\n    }\r\n  }\r\n  function _onceWrap(target, type, listener) {\r\n    var state = {\r\n      fired: false,\r\n      wrapFn: undefined,\r\n      target: target,\r\n      type: type,\r\n      listener: listener\r\n    };\r\n    var wrapped = onceWrapper.bind(state);\r\n    wrapped.listener = listener;\r\n    state.wrapFn = wrapped;\r\n    return wrapped;\r\n  }\r\n  EventEmitter.prototype.once = function once(type, listener) {\r\n    checkListener(listener);\r\n    this.on(type, _onceWrap(this, type, listener));\r\n    return this;\r\n  };\r\n  EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\r\n    checkListener(listener);\r\n    this.prependListener(type, _onceWrap(this, type, listener));\r\n    return this;\r\n  };\r\n\r\n  // Emits a 'removeListener' event if and only if the listener was removed.\r\n  EventEmitter.prototype.removeListener = function removeListener(type, listener) {\r\n    var list, events, position, i, originalListener;\r\n    checkListener(listener);\r\n    events = this._events;\r\n    if (events === undefined) return this;\r\n    list = events[type];\r\n    if (list === undefined) return this;\r\n    if (list === listener || list.listener === listener) {\r\n      if (--this._eventsCount === 0) this._events = Object.create(null);else {\r\n        delete events[type];\r\n        if (events.removeListener) this.emit('removeListener', type, list.listener || listener);\r\n      }\r\n    } else if (typeof list !== 'function') {\r\n      position = -1;\r\n      for (i = list.length - 1; i >= 0; i--) {\r\n        if (list[i] === listener || list[i].listener === listener) {\r\n          originalListener = list[i].listener;\r\n          position = i;\r\n          break;\r\n        }\r\n      }\r\n      if (position < 0) return this;\r\n      if (position === 0) list.shift();else {\r\n        spliceOne(list, position);\r\n      }\r\n      if (list.length === 1) events[type] = list[0];\r\n      if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);\r\n    }\r\n    return this;\r\n  };\r\n  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n  EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\r\n    var listeners, events, i;\r\n    events = this._events;\r\n    if (events === undefined) return this;\r\n\r\n    // not listening for removeListener, no need to emit\r\n    if (events.removeListener === undefined) {\r\n      if (arguments.length === 0) {\r\n        this._events = Object.create(null);\r\n        this._eventsCount = 0;\r\n      } else if (events[type] !== undefined) {\r\n        if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];\r\n      }\r\n      return this;\r\n    }\r\n\r\n    // emit removeListener for all listeners on all events\r\n    if (arguments.length === 0) {\r\n      var keys = Object.keys(events);\r\n      var key;\r\n      for (i = 0; i < keys.length; ++i) {\r\n        key = keys[i];\r\n        if (key === 'removeListener') continue;\r\n        this.removeAllListeners(key);\r\n      }\r\n      this.removeAllListeners('removeListener');\r\n      this._events = Object.create(null);\r\n      this._eventsCount = 0;\r\n      return this;\r\n    }\r\n    listeners = events[type];\r\n    if (typeof listeners === 'function') {\r\n      this.removeListener(type, listeners);\r\n    } else if (listeners !== undefined) {\r\n      // LIFO order\r\n      for (i = listeners.length - 1; i >= 0; i--) {\r\n        this.removeListener(type, listeners[i]);\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n  function _listeners(target, type, unwrap) {\r\n    var events = target._events;\r\n    if (events === undefined) return [];\r\n    var evlistener = events[type];\r\n    if (evlistener === undefined) return [];\r\n    if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\r\n  }\r\n  EventEmitter.prototype.listeners = function listeners(type) {\r\n    return _listeners(this, type, true);\r\n  };\r\n  EventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n    return _listeners(this, type, false);\r\n  };\r\n  EventEmitter.listenerCount = function (emitter, type) {\r\n    if (typeof emitter.listenerCount === 'function') {\r\n      return emitter.listenerCount(type);\r\n    } else {\r\n      return listenerCount.call(emitter, type);\r\n    }\r\n  };\r\n  EventEmitter.prototype.listenerCount = listenerCount;\r\n  function listenerCount(type) {\r\n    var events = this._events;\r\n    if (events !== undefined) {\r\n      var evlistener = events[type];\r\n      if (typeof evlistener === 'function') {\r\n        return 1;\r\n      } else if (evlistener !== undefined) {\r\n        return evlistener.length;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n  EventEmitter.prototype.eventNames = function eventNames() {\r\n    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n  };\r\n  function arrayClone(arr, n) {\r\n    var copy = new Array(n);\r\n    for (var i = 0; i < n; ++i) copy[i] = arr[i];\r\n    return copy;\r\n  }\r\n  function spliceOne(list, index) {\r\n    for (; index + 1 < list.length; index++) list[index] = list[index + 1];\r\n    list.pop();\r\n  }\r\n  function unwrapListeners(arr) {\r\n    var ret = new Array(arr.length);\r\n    for (var i = 0; i < ret.length; ++i) {\r\n      ret[i] = arr[i].listener || arr[i];\r\n    }\r\n    return ret;\r\n  }\r\n  function once(emitter, name) {\r\n    return new Promise(function (resolve, reject) {\r\n      function errorListener(err) {\r\n        emitter.removeListener(name, resolver);\r\n        reject(err);\r\n      }\r\n      function resolver() {\r\n        if (typeof emitter.removeListener === 'function') {\r\n          emitter.removeListener('error', errorListener);\r\n        }\r\n        resolve([].slice.call(arguments));\r\n      }\r\n      eventTargetAgnosticAddListener(emitter, name, resolver, {\r\n        once: true\r\n      });\r\n      if (name !== 'error') {\r\n        addErrorHandlerIfEventEmitter(emitter, errorListener, {\r\n          once: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n  function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\r\n    if (typeof emitter.on === 'function') {\r\n      eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\r\n    }\r\n  }\r\n  function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\r\n    if (typeof emitter.on === 'function') {\r\n      if (flags.once) {\r\n        emitter.once(name, listener);\r\n      } else {\r\n        emitter.on(name, listener);\r\n      }\r\n    } else if (typeof emitter.addEventListener === 'function') {\r\n      // EventTarget does not have `error` event semantics like Node\r\n      // EventEmitters, we do not listen for `error` events here.\r\n      emitter.addEventListener(name, function wrapListener(arg) {\r\n        // IE does not have builtin `{ once: true }` support so we\r\n        // have to do it manually.\r\n        if (flags.once) {\r\n          emitter.removeEventListener(name, wrapListener);\r\n        }\r\n        listener(arg);\r\n      });\r\n    } else {\r\n      throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\r\n    }\r\n  }\r\n  return events.exports;\r\n}\r\n\r\nvar eventsExports = requireEvents();\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n\r\nlet logDisabled_ = true;\r\nlet deprecationWarnings_ = true;\r\n\r\n/**\r\n * Extract browser version out of the provided user agent string.\r\n *\r\n * @param {!string} uastring userAgent string.\r\n * @param {!string} expr Regular expression used as match criteria.\r\n * @param {!number} pos position in the version string to be returned.\r\n * @return {!number} browser version.\r\n */\r\nfunction extractVersion(uastring, expr, pos) {\r\n  const match = uastring.match(expr);\r\n  return match && match.length >= pos && parseFloat(match[pos], 10);\r\n}\r\n\r\n// Wraps the peerconnection event eventNameToWrap in a function\r\n// which returns the modified event object (or false to prevent\r\n// the event).\r\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  const nativeAddEventListener = proto.addEventListener;\r\n  proto.addEventListener = function (nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap) {\r\n      return nativeAddEventListener.apply(this, arguments);\r\n    }\r\n    const wrappedCallback = e => {\r\n      const modifiedEvent = wrapper(e);\r\n      if (modifiedEvent) {\r\n        if (cb.handleEvent) {\r\n          cb.handleEvent(modifiedEvent);\r\n        } else {\r\n          cb(modifiedEvent);\r\n        }\r\n      }\r\n    };\r\n    this._eventMap = this._eventMap || {};\r\n    if (!this._eventMap[eventNameToWrap]) {\r\n      this._eventMap[eventNameToWrap] = new Map();\r\n    }\r\n    this._eventMap[eventNameToWrap].set(cb, wrappedCallback);\r\n    return nativeAddEventListener.apply(this, [nativeEventName, wrappedCallback]);\r\n  };\r\n  const nativeRemoveEventListener = proto.removeEventListener;\r\n  proto.removeEventListener = function (nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) {\r\n      return nativeRemoveEventListener.apply(this, arguments);\r\n    }\r\n    if (!this._eventMap[eventNameToWrap].has(cb)) {\r\n      return nativeRemoveEventListener.apply(this, arguments);\r\n    }\r\n    const unwrappedCb = this._eventMap[eventNameToWrap].get(cb);\r\n    this._eventMap[eventNameToWrap].delete(cb);\r\n    if (this._eventMap[eventNameToWrap].size === 0) {\r\n      delete this._eventMap[eventNameToWrap];\r\n    }\r\n    if (Object.keys(this._eventMap).length === 0) {\r\n      delete this._eventMap;\r\n    }\r\n    return nativeRemoveEventListener.apply(this, [nativeEventName, unwrappedCb]);\r\n  };\r\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\r\n    get() {\r\n      return this['_on' + eventNameToWrap];\r\n    },\r\n    set(cb) {\r\n      if (this['_on' + eventNameToWrap]) {\r\n        this.removeEventListener(eventNameToWrap, this['_on' + eventNameToWrap]);\r\n        delete this['_on' + eventNameToWrap];\r\n      }\r\n      if (cb) {\r\n        this.addEventListener(eventNameToWrap, this['_on' + eventNameToWrap] = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n}\r\nfunction disableLog(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\r\n  }\r\n  logDisabled_ = bool;\r\n  return bool ? 'adapter.js logging disabled' : 'adapter.js logging enabled';\r\n}\r\n\r\n/**\r\n * Disable or enable deprecation warnings\r\n * @param {!boolean} bool set to true to disable warnings.\r\n */\r\nfunction disableWarnings(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool + '. Please use a boolean.');\r\n  }\r\n  deprecationWarnings_ = !bool;\r\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\r\n}\r\nfunction log() {\r\n  if (typeof window === 'object') {\r\n    if (logDisabled_) {\r\n      return;\r\n    }\r\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\r\n      console.log.apply(console, arguments);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\r\n */\r\nfunction deprecated(oldMethod, newMethod) {\r\n  if (!deprecationWarnings_) {\r\n    return;\r\n  }\r\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod + ' instead.');\r\n}\r\n\r\n/**\r\n * Browser detector.\r\n *\r\n * @return {object} result containing browser and version\r\n *     properties.\r\n */\r\nfunction detectBrowser(window) {\r\n  // Returned result object.\r\n  const result = {\r\n    browser: null,\r\n    version: null\r\n  };\r\n\r\n  // Fail early if it's not a browser\r\n  if (typeof window === 'undefined' || !window.navigator || !window.navigator.userAgent) {\r\n    result.browser = 'Not a browser.';\r\n    return result;\r\n  }\r\n  const {\r\n    navigator\r\n  } = window;\r\n\r\n  // Prefer navigator.userAgentData.\r\n  if (navigator.userAgentData && navigator.userAgentData.brands) {\r\n    const chromium = navigator.userAgentData.brands.find(brand => {\r\n      return brand.brand === 'Chromium';\r\n    });\r\n    if (chromium) {\r\n      return {\r\n        browser: 'chrome',\r\n        version: parseInt(chromium.version, 10)\r\n      };\r\n    }\r\n  }\r\n  if (navigator.mozGetUserMedia) {\r\n    // Firefox.\r\n    result.browser = 'firefox';\r\n    result.version = parseInt(extractVersion(navigator.userAgent, /Firefox\\/(\\d+)\\./, 1));\r\n  } else if (navigator.webkitGetUserMedia || window.isSecureContext === false && window.webkitRTCPeerConnection) {\r\n    // Chrome, Chromium, Webview, Opera.\r\n    // Version matches Chrome/WebRTC version.\r\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\r\n    // more complicated fallback to webkitRTCPeerConnection.\r\n    result.browser = 'chrome';\r\n    result.version = parseInt(extractVersion(navigator.userAgent, /Chrom(e|ium)\\/(\\d+)\\./, 2));\r\n  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\r\n    // Safari.\r\n    result.browser = 'safari';\r\n    result.version = parseInt(extractVersion(navigator.userAgent, /AppleWebKit\\/(\\d+)\\./, 1));\r\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver && 'currentDirection' in window.RTCRtpTransceiver.prototype;\r\n    // Only for internal usage.\r\n    result._safariVersion = extractVersion(navigator.userAgent, /Version\\/(\\d+(\\.?\\d+))/, 1);\r\n  } else {\r\n    // Default fallthrough: not supported.\r\n    result.browser = 'Not a supported browser.';\r\n    return result;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if something is an object.\r\n *\r\n * @param {*} val The something you want to check.\r\n * @return true if val is an object, false otherwise.\r\n */\r\nfunction isObject(val) {\r\n  return Object.prototype.toString.call(val) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Remove all empty objects and undefined values\r\n * from a nested object -- an enhanced and vanilla version\r\n * of Lodash's `compact`.\r\n */\r\nfunction compactObject(data) {\r\n  if (!isObject(data)) {\r\n    return data;\r\n  }\r\n  return Object.keys(data).reduce(function (accumulator, key) {\r\n    const isObj = isObject(data[key]);\r\n    const value = isObj ? compactObject(data[key]) : data[key];\r\n    const isEmptyObject = isObj && !Object.keys(value).length;\r\n    if (value === undefined || isEmptyObject) {\r\n      return accumulator;\r\n    }\r\n    return Object.assign(accumulator, {\r\n      [key]: value\r\n    });\r\n  }, {});\r\n}\r\n\r\n/* iterates the stats graph recursively. */\r\nfunction walkStats(stats, base, resultSet) {\r\n  if (!base || resultSet.has(base.id)) {\r\n    return;\r\n  }\r\n  resultSet.set(base.id, base);\r\n  Object.keys(base).forEach(name => {\r\n    if (name.endsWith('Id')) {\r\n      walkStats(stats, stats.get(base[name]), resultSet);\r\n    } else if (name.endsWith('Ids')) {\r\n      base[name].forEach(id => {\r\n        walkStats(stats, stats.get(id), resultSet);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n/* filter getStats for a sender/receiver track. */\r\nfunction filterStats(result, track, outbound) {\r\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\r\n  const filteredResult = new Map();\r\n  if (track === null) {\r\n    return filteredResult;\r\n  }\r\n  const trackStats = [];\r\n  result.forEach(value => {\r\n    if (value.type === 'track' && value.trackIdentifier === track.id) {\r\n      trackStats.push(value);\r\n    }\r\n  });\r\n  trackStats.forEach(trackStat => {\r\n    result.forEach(stats => {\r\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\r\n        walkStats(result, stats, filteredResult);\r\n      }\r\n    });\r\n  });\r\n  return filteredResult;\r\n}\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\nconst logging = log;\r\nfunction shimGetUserMedia$2(window, browserDetails) {\r\n  const navigator = window && window.navigator;\r\n  if (!navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  const constraintsToChrome_ = function (c) {\r\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\r\n      return c;\r\n    }\r\n    const cc = {};\r\n    Object.keys(c).forEach(key => {\r\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\r\n        return;\r\n      }\r\n      const r = typeof c[key] === 'object' ? c[key] : {\r\n        ideal: c[key]\r\n      };\r\n      if (r.exact !== undefined && typeof r.exact === 'number') {\r\n        r.min = r.max = r.exact;\r\n      }\r\n      const oldname_ = function (prefix, name) {\r\n        if (prefix) {\r\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\r\n        }\r\n        return name === 'deviceId' ? 'sourceId' : name;\r\n      };\r\n      if (r.ideal !== undefined) {\r\n        cc.optional = cc.optional || [];\r\n        let oc = {};\r\n        if (typeof r.ideal === 'number') {\r\n          oc[oldname_('min', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n          oc = {};\r\n          oc[oldname_('max', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        } else {\r\n          oc[oldname_('', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        }\r\n      }\r\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\r\n        cc.mandatory = cc.mandatory || {};\r\n        cc.mandatory[oldname_('', key)] = r.exact;\r\n      } else {\r\n        ['min', 'max'].forEach(mix => {\r\n          if (r[mix] !== undefined) {\r\n            cc.mandatory = cc.mandatory || {};\r\n            cc.mandatory[oldname_(mix, key)] = r[mix];\r\n          }\r\n        });\r\n      }\r\n    });\r\n    if (c.advanced) {\r\n      cc.optional = (cc.optional || []).concat(c.advanced);\r\n    }\r\n    return cc;\r\n  };\r\n  const shimConstraints_ = function (constraints, func) {\r\n    if (browserDetails.version >= 61) {\r\n      return func(constraints);\r\n    }\r\n    constraints = JSON.parse(JSON.stringify(constraints));\r\n    if (constraints && typeof constraints.audio === 'object') {\r\n      const remap = function (obj, a, b) {\r\n        if (a in obj && !(b in obj)) {\r\n          obj[b] = obj[a];\r\n          delete obj[a];\r\n        }\r\n      };\r\n      constraints = JSON.parse(JSON.stringify(constraints));\r\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\r\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\r\n      constraints.audio = constraintsToChrome_(constraints.audio);\r\n    }\r\n    if (constraints && typeof constraints.video === 'object') {\r\n      // Shim facingMode for mobile & surface pro.\r\n      let face = constraints.video.facingMode;\r\n      face = face && (typeof face === 'object' ? face : {\r\n        ideal: face\r\n      });\r\n      const getSupportedFacingModeLies = browserDetails.version < 66;\r\n      if (face && (face.exact === 'user' || face.exact === 'environment' || face.ideal === 'user' || face.ideal === 'environment') && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {\r\n        delete constraints.video.facingMode;\r\n        let matches;\r\n        if (face.exact === 'environment' || face.ideal === 'environment') {\r\n          matches = ['back', 'rear'];\r\n        } else if (face.exact === 'user' || face.ideal === 'user') {\r\n          matches = ['front'];\r\n        }\r\n        if (matches) {\r\n          // Look for matches in label, or use last cam for back (typical).\r\n          return navigator.mediaDevices.enumerateDevices().then(devices => {\r\n            devices = devices.filter(d => d.kind === 'videoinput');\r\n            let dev = devices.find(d => matches.some(match => d.label.toLowerCase().includes(match)));\r\n            if (!dev && devices.length && matches.includes('back')) {\r\n              dev = devices[devices.length - 1]; // more likely the back cam\r\n            }\r\n            if (dev) {\r\n              constraints.video.deviceId = face.exact ? {\r\n                exact: dev.deviceId\r\n              } : {\r\n                ideal: dev.deviceId\r\n              };\r\n            }\r\n            constraints.video = constraintsToChrome_(constraints.video);\r\n            logging('chrome: ' + JSON.stringify(constraints));\r\n            return func(constraints);\r\n          });\r\n        }\r\n      }\r\n      constraints.video = constraintsToChrome_(constraints.video);\r\n    }\r\n    logging('chrome: ' + JSON.stringify(constraints));\r\n    return func(constraints);\r\n  };\r\n  const shimError_ = function (e) {\r\n    if (browserDetails.version >= 64) {\r\n      return e;\r\n    }\r\n    return {\r\n      name: {\r\n        PermissionDeniedError: 'NotAllowedError',\r\n        PermissionDismissedError: 'NotAllowedError',\r\n        InvalidStateError: 'NotAllowedError',\r\n        DevicesNotFoundError: 'NotFoundError',\r\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\r\n        TrackStartError: 'NotReadableError',\r\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\r\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\r\n        TabCaptureError: 'AbortError',\r\n        ScreenCaptureError: 'AbortError',\r\n        DeviceCaptureError: 'AbortError'\r\n      }[e.name] || e.name,\r\n      message: e.message,\r\n      constraint: e.constraint || e.constraintName,\r\n      toString() {\r\n        return this.name + (this.message && ': ') + this.message;\r\n      }\r\n    };\r\n  };\r\n  const getUserMedia_ = function (constraints, onSuccess, onError) {\r\n    shimConstraints_(constraints, c => {\r\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\r\n        if (onError) {\r\n          onError(shimError_(e));\r\n        }\r\n      });\r\n    });\r\n  };\r\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\r\n\r\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\r\n  // function which returns a Promise, it does not accept spec-style\r\n  // constraints.\r\n  if (navigator.mediaDevices.getUserMedia) {\r\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function (cs) {\r\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\r\n        if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {\r\n          stream.getTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n          throw new DOMException('', 'NotFoundError');\r\n        }\r\n        return stream;\r\n      }, e => Promise.reject(shimError_(e))));\r\n    };\r\n  }\r\n}\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\nfunction shimMediaStream(window) {\r\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\r\n}\r\nfunction shimOnTrack$1(window) {\r\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\r\n      get() {\r\n        return this._ontrack;\r\n      },\r\n      set(f) {\r\n        if (this._ontrack) {\r\n          this.removeEventListener('track', this._ontrack);\r\n        }\r\n        this.addEventListener('track', this._ontrack = f);\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\r\n      if (!this._ontrackpoly) {\r\n        this._ontrackpoly = e => {\r\n          // onaddstream does not fire when a track is added to an existing\r\n          // stream. But stream.onaddtrack is implemented so we use that.\r\n          e.stream.addEventListener('addtrack', te => {\r\n            let receiver;\r\n            if (window.RTCPeerConnection.prototype.getReceivers) {\r\n              receiver = this.getReceivers().find(r => r.track && r.track.id === te.track.id);\r\n            } else {\r\n              receiver = {\r\n                track: te.track\r\n              };\r\n            }\r\n            const event = new Event('track');\r\n            event.track = te.track;\r\n            event.receiver = receiver;\r\n            event.transceiver = {\r\n              receiver\r\n            };\r\n            event.streams = [e.stream];\r\n            this.dispatchEvent(event);\r\n          });\r\n          e.stream.getTracks().forEach(track => {\r\n            let receiver;\r\n            if (window.RTCPeerConnection.prototype.getReceivers) {\r\n              receiver = this.getReceivers().find(r => r.track && r.track.id === track.id);\r\n            } else {\r\n              receiver = {\r\n                track\r\n              };\r\n            }\r\n            const event = new Event('track');\r\n            event.track = track;\r\n            event.receiver = receiver;\r\n            event.transceiver = {\r\n              receiver\r\n            };\r\n            event.streams = [e.stream];\r\n            this.dispatchEvent(event);\r\n          });\r\n        };\r\n        this.addEventListener('addstream', this._ontrackpoly);\r\n      }\r\n      return origSetRemoteDescription.apply(this, arguments);\r\n    };\r\n  } else {\r\n    // even if RTCRtpTransceiver is in window, it is only used and\r\n    // emitted in unified-plan. Unfortunately this means we need\r\n    // to unconditionally wrap the event.\r\n    wrapPeerConnectionEvent(window, 'track', e => {\r\n      if (!e.transceiver) {\r\n        Object.defineProperty(e, 'transceiver', {\r\n          value: {\r\n            receiver: e.receiver\r\n          }\r\n        });\r\n      }\r\n      return e;\r\n    });\r\n  }\r\n}\r\nfunction shimGetSendersWithDtmf(window) {\r\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\r\n  if (typeof window === 'object' && window.RTCPeerConnection && !('getSenders' in window.RTCPeerConnection.prototype) && 'createDTMFSender' in window.RTCPeerConnection.prototype) {\r\n    const shimSenderWithDtmf = function (pc, track) {\r\n      return {\r\n        track,\r\n        get dtmf() {\r\n          if (this._dtmf === undefined) {\r\n            if (track.kind === 'audio') {\r\n              this._dtmf = pc.createDTMFSender(track);\r\n            } else {\r\n              this._dtmf = null;\r\n            }\r\n          }\r\n          return this._dtmf;\r\n        },\r\n        _pc: pc\r\n      };\r\n    };\r\n\r\n    // augment addTrack when getSenders is not available.\r\n    if (!window.RTCPeerConnection.prototype.getSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        this._senders = this._senders || [];\r\n        return this._senders.slice(); // return a copy of the internal state.\r\n      };\r\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n      window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\r\n        let sender = origAddTrack.apply(this, arguments);\r\n        if (!sender) {\r\n          sender = shimSenderWithDtmf(this, track);\r\n          this._senders.push(sender);\r\n        }\r\n        return sender;\r\n      };\r\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n      window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\r\n        origRemoveTrack.apply(this, arguments);\r\n        const idx = this._senders.indexOf(sender);\r\n        if (idx !== -1) {\r\n          this._senders.splice(idx, 1);\r\n        }\r\n      };\r\n    }\r\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      this._senders = this._senders || [];\r\n      origAddStream.apply(this, [stream]);\r\n      stream.getTracks().forEach(track => {\r\n        this._senders.push(shimSenderWithDtmf(this, track));\r\n      });\r\n    };\r\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\r\n      this._senders = this._senders || [];\r\n      origRemoveStream.apply(this, [stream]);\r\n      stream.getTracks().forEach(track => {\r\n        const sender = this._senders.find(s => s.track === track);\r\n        if (sender) {\r\n          // remove sender\r\n          this._senders.splice(this._senders.indexOf(sender), 1);\r\n        }\r\n      });\r\n    };\r\n  } else if (typeof window === 'object' && window.RTCPeerConnection && 'getSenders' in window.RTCPeerConnection.prototype && 'createDTMFSender' in window.RTCPeerConnection.prototype && window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\r\n      get() {\r\n        if (this._dtmf === undefined) {\r\n          if (this.track.kind === 'audio') {\r\n            this._dtmf = this._pc.createDTMFSender(this.track);\r\n          } else {\r\n            this._dtmf = null;\r\n          }\r\n        }\r\n        return this._dtmf;\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction shimSenderReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) {\r\n    return;\r\n  }\r\n\r\n  // shim sender stats.\r\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    if (origGetSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        const senders = origGetSenders.apply(this, []);\r\n        senders.forEach(sender => sender._pc = this);\r\n        return senders;\r\n      };\r\n    }\r\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    if (origAddTrack) {\r\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n        const sender = origAddTrack.apply(this, arguments);\r\n        sender._pc = this;\r\n        return sender;\r\n      };\r\n    }\r\n    window.RTCRtpSender.prototype.getStats = function getStats() {\r\n      const sender = this;\r\n      return this._pc.getStats().then(result =>\r\n      /* Note: this will include stats of all senders that\r\n       *   send a track with the same id as sender.track as\r\n       *   it is not possible to identify the RTCRtpSender.\r\n       */\r\n      filterStats(result, sender.track, true));\r\n    };\r\n  }\r\n\r\n  // shim receiver stats.\r\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\r\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n    if (origGetReceivers) {\r\n      window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\r\n        const receivers = origGetReceivers.apply(this, []);\r\n        receivers.forEach(receiver => receiver._pc = this);\r\n        return receivers;\r\n      };\r\n    }\r\n    wrapPeerConnectionEvent(window, 'track', e => {\r\n      e.receiver._pc = e.srcElement;\r\n      return e;\r\n    });\r\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n      const receiver = this;\r\n      return this._pc.getStats().then(result => filterStats(result, receiver.track, false));\r\n    };\r\n  }\r\n  if (!('getStats' in window.RTCRtpSender.prototype && 'getStats' in window.RTCRtpReceiver.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // shim RTCPeerConnection.getStats(track).\r\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {\r\n      const track = arguments[0];\r\n      let sender;\r\n      let receiver;\r\n      let err;\r\n      this.getSenders().forEach(s => {\r\n        if (s.track === track) {\r\n          if (sender) {\r\n            err = true;\r\n          } else {\r\n            sender = s;\r\n          }\r\n        }\r\n      });\r\n      this.getReceivers().forEach(r => {\r\n        if (r.track === track) {\r\n          if (receiver) {\r\n            err = true;\r\n          } else {\r\n            receiver = r;\r\n          }\r\n        }\r\n        return r.track === track;\r\n      });\r\n      if (err || sender && receiver) {\r\n        return Promise.reject(new DOMException('There are more than one sender or receiver for the track.', 'InvalidAccessError'));\r\n      } else if (sender) {\r\n        return sender.getStats();\r\n      } else if (receiver) {\r\n        return receiver.getStats();\r\n      }\r\n      return Promise.reject(new DOMException('There is no sender or receiver for the track.', 'InvalidAccessError'));\r\n    }\r\n    return origGetStats.apply(this, arguments);\r\n  };\r\n}\r\nfunction shimAddTrackRemoveTrackWithNative(window) {\r\n  // shim addTrack/removeTrack with native variants in order to make\r\n  // the interactions with legacy getLocalStreams behave as in other browsers.\r\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\r\n  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n    return Object.keys(this._shimmedLocalStreams).map(streamId => this._shimmedLocalStreams[streamId][0]);\r\n  };\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\r\n    if (!stream) {\r\n      return origAddTrack.apply(this, arguments);\r\n    }\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n    const sender = origAddTrack.apply(this, arguments);\r\n    if (!this._shimmedLocalStreams[stream.id]) {\r\n      this._shimmedLocalStreams[stream.id] = [stream, sender];\r\n    } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\r\n      this._shimmedLocalStreams[stream.id].push(sender);\r\n    }\r\n    return sender;\r\n  };\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\r\n      }\r\n    });\r\n    const existingSenders = this.getSenders();\r\n    origAddStream.apply(this, arguments);\r\n    const newSenders = this.getSenders().filter(newSender => existingSenders.indexOf(newSender) === -1);\r\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\r\n  };\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n    delete this._shimmedLocalStreams[stream.id];\r\n    return origRemoveStream.apply(this, arguments);\r\n  };\r\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n    if (sender) {\r\n      Object.keys(this._shimmedLocalStreams).forEach(streamId => {\r\n        const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\r\n        if (idx !== -1) {\r\n          this._shimmedLocalStreams[streamId].splice(idx, 1);\r\n        }\r\n        if (this._shimmedLocalStreams[streamId].length === 1) {\r\n          delete this._shimmedLocalStreams[streamId];\r\n        }\r\n      });\r\n    }\r\n    return origRemoveTrack.apply(this, arguments);\r\n  };\r\n}\r\nfunction shimAddTrackRemoveTrack(window, browserDetails) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  // shim addTrack and removeTrack.\r\n  if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) {\r\n    return shimAddTrackRemoveTrackWithNative(window);\r\n  }\r\n\r\n  // also shim pc.getLocalStreams when addTrack is shimmed\r\n  // to return the original streams.\r\n  const origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;\r\n  window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\r\n    const nativeStreams = origGetLocalStreams.apply(this);\r\n    this._reverseStreams = this._reverseStreams || {};\r\n    return nativeStreams.map(stream => this._reverseStreams[stream.id]);\r\n  };\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._streams = this._streams || {};\r\n    this._reverseStreams = this._reverseStreams || {};\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.', 'InvalidAccessError');\r\n      }\r\n    });\r\n    // Add identity mapping for consistency with addTrack.\r\n    // Unless this is being used with a stream from addTrack.\r\n    if (!this._reverseStreams[stream.id]) {\r\n      const newStream = new window.MediaStream(stream.getTracks());\r\n      this._streams[stream.id] = newStream;\r\n      this._reverseStreams[newStream.id] = stream;\r\n      stream = newStream;\r\n    }\r\n    origAddStream.apply(this, [stream]);\r\n  };\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\r\n    this._streams = this._streams || {};\r\n    this._reverseStreams = this._reverseStreams || {};\r\n    origRemoveStream.apply(this, [this._streams[stream.id] || stream]);\r\n    delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];\r\n    delete this._streams[stream.id];\r\n  };\r\n  window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {\r\n    if (this.signalingState === 'closed') {\r\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\r\n    }\r\n    const streams = [].slice.call(arguments, 1);\r\n    if (streams.length !== 1 || !streams[0].getTracks().find(t => t === track)) {\r\n      // this is not fully correct but all we can manage without\r\n      // [[associated MediaStreams]] internal slot.\r\n      throw new DOMException('The adapter.js addTrack polyfill only supports a single ' + ' stream which is associated with the specified track.', 'NotSupportedError');\r\n    }\r\n    const alreadyExists = this.getSenders().find(s => s.track === track);\r\n    if (alreadyExists) {\r\n      throw new DOMException('Track already exists.', 'InvalidAccessError');\r\n    }\r\n    this._streams = this._streams || {};\r\n    this._reverseStreams = this._reverseStreams || {};\r\n    const oldStream = this._streams[stream.id];\r\n    if (oldStream) {\r\n      // this is using odd Chrome behaviour, use with caution:\r\n      // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\r\n      // Note: we rely on the high-level addTrack/dtmf shim to\r\n      // create the sender with a dtmf sender.\r\n      oldStream.addTrack(track);\r\n\r\n      // Trigger ONN async.\r\n      Promise.resolve().then(() => {\r\n        this.dispatchEvent(new Event('negotiationneeded'));\r\n      });\r\n    } else {\r\n      const newStream = new window.MediaStream([track]);\r\n      this._streams[stream.id] = newStream;\r\n      this._reverseStreams[newStream.id] = stream;\r\n      this.addStream(newStream);\r\n    }\r\n    return this.getSenders().find(s => s.track === track);\r\n  };\r\n\r\n  // replace the internal stream id with the external one and\r\n  // vice versa.\r\n  function replaceInternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'), externalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  function replaceExternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'), internalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  ['createOffer', 'createAnswer'].forEach(function (method) {\r\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n    const methodObj = {\r\n      [method]() {\r\n        const args = arguments;\r\n        const isLegacyCall = arguments.length && typeof arguments[0] === 'function';\r\n        if (isLegacyCall) {\r\n          return nativeMethod.apply(this, [description => {\r\n            const desc = replaceInternalStreamId(this, description);\r\n            args[0].apply(null, [desc]);\r\n          }, err => {\r\n            if (args[1]) {\r\n              args[1].apply(null, err);\r\n            }\r\n          }, arguments[2]]);\r\n        }\r\n        return nativeMethod.apply(this, arguments).then(description => replaceInternalStreamId(this, description));\r\n      }\r\n    };\r\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n  });\r\n  const origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;\r\n  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\r\n    if (!arguments.length || !arguments[0].type) {\r\n      return origSetLocalDescription.apply(this, arguments);\r\n    }\r\n    arguments[0] = replaceExternalStreamId(this, arguments[0]);\r\n    return origSetLocalDescription.apply(this, arguments);\r\n  };\r\n\r\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\r\n\r\n  const origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, 'localDescription');\r\n  Object.defineProperty(window.RTCPeerConnection.prototype, 'localDescription', {\r\n    get() {\r\n      const description = origLocalDescription.get.apply(this);\r\n      if (description.type === '') {\r\n        return description;\r\n      }\r\n      return replaceInternalStreamId(this, description);\r\n    }\r\n  });\r\n  window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {\r\n    if (this.signalingState === 'closed') {\r\n      throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.', 'InvalidStateError');\r\n    }\r\n    // We can not yet check for sender instanceof RTCRtpSender\r\n    // since we shim RTPSender. So we check if sender._pc is set.\r\n    if (!sender._pc) {\r\n      throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' + 'does not implement interface RTCRtpSender.', 'TypeError');\r\n    }\r\n    const isLocal = sender._pc === this;\r\n    if (!isLocal) {\r\n      throw new DOMException('Sender was not created by this connection.', 'InvalidAccessError');\r\n    }\r\n\r\n    // Search for the native stream the senders track belongs to.\r\n    this._streams = this._streams || {};\r\n    let stream;\r\n    Object.keys(this._streams).forEach(streamid => {\r\n      const hasTrack = this._streams[streamid].getTracks().find(track => sender.track === track);\r\n      if (hasTrack) {\r\n        stream = this._streams[streamid];\r\n      }\r\n    });\r\n    if (stream) {\r\n      if (stream.getTracks().length === 1) {\r\n        // if this is the last track of the stream, remove the stream. This\r\n        // takes care of any shimmed _senders.\r\n        this.removeStream(this._reverseStreams[stream.id]);\r\n      } else {\r\n        // relying on the same odd chrome behaviour as above.\r\n        stream.removeTrack(sender.track);\r\n      }\r\n      this.dispatchEvent(new Event('negotiationneeded'));\r\n    }\r\n  };\r\n}\r\nfunction shimPeerConnection$1(window, browserDetails) {\r\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\r\n  }\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n\r\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\r\n  if (browserDetails.version < 53) {\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\r\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n      const methodObj = {\r\n        [method]() {\r\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\r\n          return nativeMethod.apply(this, arguments);\r\n        }\r\n      };\r\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n    });\r\n  }\r\n}\r\n\r\n// Attempt to fix ONN in plan-b mode.\r\nfunction fixNegotiationNeeded(window, browserDetails) {\r\n  wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\r\n    const pc = e.target;\r\n    if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === 'plan-b') {\r\n      if (pc.signalingState !== 'stable') {\r\n        return;\r\n      }\r\n    }\r\n    return e;\r\n  });\r\n}\r\n\r\nvar chromeShim = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  fixNegotiationNeeded: fixNegotiationNeeded,\r\n  shimAddTrackRemoveTrack: shimAddTrackRemoveTrack,\r\n  shimAddTrackRemoveTrackWithNative: shimAddTrackRemoveTrackWithNative,\r\n  shimGetSendersWithDtmf: shimGetSendersWithDtmf,\r\n  shimGetUserMedia: shimGetUserMedia$2,\r\n  shimMediaStream: shimMediaStream,\r\n  shimOnTrack: shimOnTrack$1,\r\n  shimPeerConnection: shimPeerConnection$1,\r\n  shimSenderReceiverGetStats: shimSenderReceiverGetStats\r\n});\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\nfunction shimGetUserMedia$1(window, browserDetails) {\r\n  const navigator = window && window.navigator;\r\n  const MediaStreamTrack = window && window.MediaStreamTrack;\r\n  navigator.getUserMedia = function (constraints, onSuccess, onError) {\r\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\r\n    deprecated('navigator.getUserMedia', 'navigator.mediaDevices.getUserMedia');\r\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\r\n  };\r\n  if (!(browserDetails.version > 55 && 'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\r\n    const remap = function (obj, a, b) {\r\n      if (a in obj && !(b in obj)) {\r\n        obj[b] = obj[a];\r\n        delete obj[a];\r\n      }\r\n    };\r\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function (c) {\r\n      if (typeof c === 'object' && typeof c.audio === 'object') {\r\n        c = JSON.parse(JSON.stringify(c));\r\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\r\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\r\n      }\r\n      return nativeGetUserMedia(c);\r\n    };\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\r\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\r\n      MediaStreamTrack.prototype.getSettings = function () {\r\n        const obj = nativeGetSettings.apply(this, arguments);\r\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\r\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\r\n        return obj;\r\n      };\r\n    }\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\r\n      const nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\r\n      MediaStreamTrack.prototype.applyConstraints = function (c) {\r\n        if (this.kind === 'audio' && typeof c === 'object') {\r\n          c = JSON.parse(JSON.stringify(c));\r\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\r\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\r\n        }\r\n        return nativeApplyConstraints.apply(this, [c]);\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n\r\nfunction shimGetDisplayMedia(window, preferredMediaSource) {\r\n  if (window.navigator.mediaDevices && 'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  if (!window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {\r\n    if (!(constraints && constraints.video)) {\r\n      const err = new DOMException('getDisplayMedia without video ' + 'constraints is undefined');\r\n      err.name = 'NotFoundError';\r\n      // from https://heycam.github.io/webidl/#idl-DOMException-error-names\r\n      err.code = 8;\r\n      return Promise.reject(err);\r\n    }\r\n    if (constraints.video === true) {\r\n      constraints.video = {\r\n        mediaSource: preferredMediaSource\r\n      };\r\n    } else {\r\n      constraints.video.mediaSource = preferredMediaSource;\r\n    }\r\n    return window.navigator.mediaDevices.getUserMedia(constraints);\r\n  };\r\n}\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\nfunction shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {\r\n          receiver: this.receiver\r\n        };\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction shimPeerConnection(window, browserDetails) {\r\n  if (typeof window !== 'object' || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\r\n    return; // probably media.peerconnection.enabled=false in about:config\r\n  }\r\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\r\n  }\r\n  if (browserDetails.version < 53) {\r\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'].forEach(function (method) {\r\n      const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n      const methodObj = {\r\n        [method]() {\r\n          arguments[0] = new (method === 'addIceCandidate' ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);\r\n          return nativeMethod.apply(this, arguments);\r\n        }\r\n      };\r\n      window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n    });\r\n  }\r\n  const modernStatsTypes = {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  };\r\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n    return nativeGetStats.apply(this, [selector || null]).then(stats => {\r\n      if (browserDetails.version < 53 && !onSucc) {\r\n        // Shim only promise getStats with spec-hyphens in type names\r\n        // Leave callback version alone; misc old uses of forEach before Map\r\n        try {\r\n          stats.forEach(stat => {\r\n            stat.type = modernStatsTypes[stat.type] || stat.type;\r\n          });\r\n        } catch (e) {\r\n          if (e.name !== 'TypeError') {\r\n            throw e;\r\n          }\r\n          // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\r\n          stats.forEach((stat, i) => {\r\n            stats.set(i, Object.assign({}, stat, {\r\n              type: modernStatsTypes[stat.type] || stat.type\r\n            }));\r\n          });\r\n        }\r\n      }\r\n      return stats;\r\n    }).then(onSucc, onErr);\r\n  };\r\n}\r\nfunction shimSenderGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\r\n    return;\r\n  }\r\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n  if (origGetSenders) {\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n  }\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  if (origAddTrack) {\r\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      sender._pc = this;\r\n      return sender;\r\n    };\r\n  }\r\n  window.RTCRtpSender.prototype.getStats = function getStats() {\r\n    return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());\r\n  };\r\n}\r\nfunction shimReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection && window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\r\n    return;\r\n  }\r\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n  if (origGetReceivers) {\r\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\r\n      const receivers = origGetReceivers.apply(this, []);\r\n      receivers.forEach(receiver => receiver._pc = this);\r\n      return receivers;\r\n    };\r\n  }\r\n  wrapPeerConnectionEvent(window, 'track', e => {\r\n    e.receiver._pc = e.srcElement;\r\n    return e;\r\n  });\r\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n    return this._pc.getStats(this.track);\r\n  };\r\n}\r\nfunction shimRemoveStream(window) {\r\n  if (!window.RTCPeerConnection || 'removeStream' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\r\n    deprecated('removeStream', 'removeTrack');\r\n    this.getSenders().forEach(sender => {\r\n      if (sender.track && stream.getTracks().includes(sender.track)) {\r\n        this.removeTrack(sender);\r\n      }\r\n    });\r\n  };\r\n}\r\nfunction shimRTCDataChannel(window) {\r\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\r\n  if (window.DataChannel && !window.RTCDataChannel) {\r\n    window.RTCDataChannel = window.DataChannel;\r\n  }\r\n}\r\nfunction shimAddTransceiver(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\r\n  if (origAddTransceiver) {\r\n    window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {\r\n      this.setParametersPromises = [];\r\n      // WebIDL input coercion and validation\r\n      let sendEncodings = arguments[1] && arguments[1].sendEncodings;\r\n      if (sendEncodings === undefined) {\r\n        sendEncodings = [];\r\n      }\r\n      sendEncodings = [...sendEncodings];\r\n      const shouldPerformCheck = sendEncodings.length > 0;\r\n      if (shouldPerformCheck) {\r\n        // If sendEncodings params are provided, validate grammar\r\n        sendEncodings.forEach(encodingParam => {\r\n          if ('rid' in encodingParam) {\r\n            const ridRegex = /^[a-z0-9]{0,16}$/i;\r\n            if (!ridRegex.test(encodingParam.rid)) {\r\n              throw new TypeError('Invalid RID value provided.');\r\n            }\r\n          }\r\n          if ('scaleResolutionDownBy' in encodingParam) {\r\n            if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\r\n              throw new RangeError('scale_resolution_down_by must be >= 1.0');\r\n            }\r\n          }\r\n          if ('maxFramerate' in encodingParam) {\r\n            if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\r\n              throw new RangeError('max_framerate must be >= 0.0');\r\n            }\r\n          }\r\n        });\r\n      }\r\n      const transceiver = origAddTransceiver.apply(this, arguments);\r\n      if (shouldPerformCheck) {\r\n        // Check if the init options were applied. If not we do this in an\r\n        // asynchronous way and save the promise reference in a global object.\r\n        // This is an ugly hack, but at the same time is way more robust than\r\n        // checking the sender parameters before and after the createOffer\r\n        // Also note that after the createoffer we are not 100% sure that\r\n        // the params were asynchronously applied so we might miss the\r\n        // opportunity to recreate offer.\r\n        const {\r\n          sender\r\n        } = transceiver;\r\n        const params = sender.getParameters();\r\n        if (!('encodings' in params) ||\r\n        // Avoid being fooled by patched getParameters() below.\r\n        params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {\r\n          params.encodings = sendEncodings;\r\n          sender.sendEncodings = sendEncodings;\r\n          this.setParametersPromises.push(sender.setParameters(params).then(() => {\r\n            delete sender.sendEncodings;\r\n          }).catch(() => {\r\n            delete sender.sendEncodings;\r\n          }));\r\n        }\r\n      }\r\n      return transceiver;\r\n    };\r\n  }\r\n}\r\nfunction shimGetParameters(window) {\r\n  if (!(typeof window === 'object' && window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  const origGetParameters = window.RTCRtpSender.prototype.getParameters;\r\n  if (origGetParameters) {\r\n    window.RTCRtpSender.prototype.getParameters = function getParameters() {\r\n      const params = origGetParameters.apply(this, arguments);\r\n      if (!('encodings' in params)) {\r\n        params.encodings = [].concat(this.sendEncodings || [{}]);\r\n      }\r\n      return params;\r\n    };\r\n  }\r\n}\r\nfunction shimCreateOffer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises).then(() => {\r\n        return origCreateOffer.apply(this, arguments);\r\n      }).finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateOffer.apply(this, arguments);\r\n  };\r\n}\r\nfunction shimCreateAnswer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\r\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises).then(() => {\r\n        return origCreateAnswer.apply(this, arguments);\r\n      }).finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateAnswer.apply(this, arguments);\r\n  };\r\n}\r\n\r\nvar firefoxShim = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  shimAddTransceiver: shimAddTransceiver,\r\n  shimCreateAnswer: shimCreateAnswer,\r\n  shimCreateOffer: shimCreateOffer,\r\n  shimGetDisplayMedia: shimGetDisplayMedia,\r\n  shimGetParameters: shimGetParameters,\r\n  shimGetUserMedia: shimGetUserMedia$1,\r\n  shimOnTrack: shimOnTrack,\r\n  shimPeerConnection: shimPeerConnection,\r\n  shimRTCDataChannel: shimRTCDataChannel,\r\n  shimReceiverGetStats: shimReceiverGetStats,\r\n  shimRemoveStream: shimRemoveStream,\r\n  shimSenderGetStats: shimSenderGetStats\r\n});\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\nfunction shimLocalStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {\r\n      if (!this._localStreams) {\r\n        this._localStreams = [];\r\n      }\r\n      return this._localStreams;\r\n    };\r\n  }\r\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\r\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      if (!this._localStreams) {\r\n        this._localStreams = [];\r\n      }\r\n      if (!this._localStreams.includes(stream)) {\r\n        this._localStreams.push(stream);\r\n      }\r\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\r\n      // Safari orders by track id.\r\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track, stream));\r\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track, stream));\r\n    };\r\n    window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {\r\n      for (var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n        streams[_key - 1] = arguments[_key];\r\n      }\r\n      if (streams) {\r\n        streams.forEach(stream => {\r\n          if (!this._localStreams) {\r\n            this._localStreams = [stream];\r\n          } else if (!this._localStreams.includes(stream)) {\r\n            this._localStreams.push(stream);\r\n          }\r\n        });\r\n      }\r\n      return _addTrack.apply(this, arguments);\r\n    };\r\n  }\r\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {\r\n      if (!this._localStreams) {\r\n        this._localStreams = [];\r\n      }\r\n      const index = this._localStreams.indexOf(stream);\r\n      if (index === -1) {\r\n        return;\r\n      }\r\n      this._localStreams.splice(index, 1);\r\n      const tracks = stream.getTracks();\r\n      this.getSenders().forEach(sender => {\r\n        if (tracks.includes(sender.track)) {\r\n          this.removeTrack(sender);\r\n        }\r\n      });\r\n    };\r\n  }\r\n}\r\nfunction shimRemoteStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {\r\n      return this._remoteStreams ? this._remoteStreams : [];\r\n    };\r\n  }\r\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\r\n      get() {\r\n        return this._onaddstream;\r\n      },\r\n      set(f) {\r\n        if (this._onaddstream) {\r\n          this.removeEventListener('addstream', this._onaddstream);\r\n          this.removeEventListener('track', this._onaddstreampoly);\r\n        }\r\n        this.addEventListener('addstream', this._onaddstream = f);\r\n        this.addEventListener('track', this._onaddstreampoly = e => {\r\n          e.streams.forEach(stream => {\r\n            if (!this._remoteStreams) {\r\n              this._remoteStreams = [];\r\n            }\r\n            if (this._remoteStreams.includes(stream)) {\r\n              return;\r\n            }\r\n            this._remoteStreams.push(stream);\r\n            const event = new Event('addstream');\r\n            event.stream = stream;\r\n            this.dispatchEvent(event);\r\n          });\r\n        });\r\n      }\r\n    });\r\n    const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\r\n      const pc = this;\r\n      if (!this._onaddstreampoly) {\r\n        this.addEventListener('track', this._onaddstreampoly = function (e) {\r\n          e.streams.forEach(stream => {\r\n            if (!pc._remoteStreams) {\r\n              pc._remoteStreams = [];\r\n            }\r\n            if (pc._remoteStreams.indexOf(stream) >= 0) {\r\n              return;\r\n            }\r\n            pc._remoteStreams.push(stream);\r\n            const event = new Event('addstream');\r\n            event.stream = stream;\r\n            pc.dispatchEvent(event);\r\n          });\r\n        });\r\n      }\r\n      return origSetRemoteDescription.apply(pc, arguments);\r\n    };\r\n  }\r\n}\r\nfunction shimCallbacksAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const prototype = window.RTCPeerConnection.prototype;\r\n  const origCreateOffer = prototype.createOffer;\r\n  const origCreateAnswer = prototype.createAnswer;\r\n  const setLocalDescription = prototype.setLocalDescription;\r\n  const setRemoteDescription = prototype.setRemoteDescription;\r\n  const addIceCandidate = prototype.addIceCandidate;\r\n  prototype.createOffer = function createOffer(successCallback, failureCallback) {\r\n    const options = arguments.length >= 2 ? arguments[2] : arguments[0];\r\n    const promise = origCreateOffer.apply(this, [options]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.createAnswer = function createAnswer(successCallback, failureCallback) {\r\n    const options = arguments.length >= 2 ? arguments[2] : arguments[0];\r\n    const promise = origCreateAnswer.apply(this, [options]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  let withCallback = function (description, successCallback, failureCallback) {\r\n    const promise = setLocalDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setLocalDescription = withCallback;\r\n  withCallback = function (description, successCallback, failureCallback) {\r\n    const promise = setRemoteDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setRemoteDescription = withCallback;\r\n  withCallback = function (candidate, successCallback, failureCallback) {\r\n    const promise = addIceCandidate.apply(this, [candidate]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.addIceCandidate = withCallback;\r\n}\r\nfunction shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n    // shim not needed in Safari 12.1\r\n    const mediaDevices = navigator.mediaDevices;\r\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = constraints => {\r\n      return _getUserMedia(shimConstraints(constraints));\r\n    };\r\n  }\r\n  if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\r\n      navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);\r\n    }.bind(navigator);\r\n  }\r\n}\r\nfunction shimConstraints(constraints) {\r\n  if (constraints && constraints.video !== undefined) {\r\n    return Object.assign({}, constraints, {\r\n      video: compactObject(constraints.video)\r\n    });\r\n  }\r\n  return constraints;\r\n}\r\nfunction shimRTCIceServerUrls(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\r\n  const OrigPeerConnection = window.RTCPeerConnection;\r\n  window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {\r\n    if (pcConfig && pcConfig.iceServers) {\r\n      const newIceServers = [];\r\n      for (let i = 0; i < pcConfig.iceServers.length; i++) {\r\n        let server = pcConfig.iceServers[i];\r\n        if (server.urls === undefined && server.url) {\r\n          deprecated('RTCIceServer.url', 'RTCIceServer.urls');\r\n          server = JSON.parse(JSON.stringify(server));\r\n          server.urls = server.url;\r\n          delete server.url;\r\n          newIceServers.push(server);\r\n        } else {\r\n          newIceServers.push(pcConfig.iceServers[i]);\r\n        }\r\n      }\r\n      pcConfig.iceServers = newIceServers;\r\n    }\r\n    return new OrigPeerConnection(pcConfig, pcConstraints);\r\n  };\r\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\r\n  // wrap static methods. Currently just generateCertificate.\r\n  if ('generateCertificate' in OrigPeerConnection) {\r\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\r\n      get() {\r\n        return OrigPeerConnection.generateCertificate;\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction shimTrackEventTransceiver(window) {\r\n  // Add event.transceiver member over deprecated event.receiver\r\n  if (typeof window === 'object' && window.RTCTrackEvent && 'receiver' in window.RTCTrackEvent.prototype && !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {\r\n          receiver: this.receiver\r\n        };\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction shimCreateOfferLegacy(window) {\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {\r\n    if (offerOptions) {\r\n      if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\r\n        // support bit values\r\n        offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;\r\n      }\r\n      const audioTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'audio');\r\n      if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\r\n        if (audioTransceiver.direction === 'sendrecv') {\r\n          if (audioTransceiver.setDirection) {\r\n            audioTransceiver.setDirection('sendonly');\r\n          } else {\r\n            audioTransceiver.direction = 'sendonly';\r\n          }\r\n        } else if (audioTransceiver.direction === 'recvonly') {\r\n          if (audioTransceiver.setDirection) {\r\n            audioTransceiver.setDirection('inactive');\r\n          } else {\r\n            audioTransceiver.direction = 'inactive';\r\n          }\r\n        }\r\n      } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) {\r\n        this.addTransceiver('audio', {\r\n          direction: 'recvonly'\r\n        });\r\n      }\r\n      if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\r\n        // support bit values\r\n        offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;\r\n      }\r\n      const videoTransceiver = this.getTransceivers().find(transceiver => transceiver.receiver.track.kind === 'video');\r\n      if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\r\n        if (videoTransceiver.direction === 'sendrecv') {\r\n          if (videoTransceiver.setDirection) {\r\n            videoTransceiver.setDirection('sendonly');\r\n          } else {\r\n            videoTransceiver.direction = 'sendonly';\r\n          }\r\n        } else if (videoTransceiver.direction === 'recvonly') {\r\n          if (videoTransceiver.setDirection) {\r\n            videoTransceiver.setDirection('inactive');\r\n          } else {\r\n            videoTransceiver.direction = 'inactive';\r\n          }\r\n        }\r\n      } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) {\r\n        this.addTransceiver('video', {\r\n          direction: 'recvonly'\r\n        });\r\n      }\r\n    }\r\n    return origCreateOffer.apply(this, arguments);\r\n  };\r\n}\r\nfunction shimAudioContext(window) {\r\n  if (typeof window !== 'object' || window.AudioContext) {\r\n    return;\r\n  }\r\n  window.AudioContext = window.webkitAudioContext;\r\n}\r\n\r\nvar safariShim = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  shimAudioContext: shimAudioContext,\r\n  shimCallbacksAPI: shimCallbacksAPI,\r\n  shimConstraints: shimConstraints,\r\n  shimCreateOfferLegacy: shimCreateOfferLegacy,\r\n  shimGetUserMedia: shimGetUserMedia,\r\n  shimLocalStreamsAPI: shimLocalStreamsAPI,\r\n  shimRTCIceServerUrls: shimRTCIceServerUrls,\r\n  shimRemoteStreamsAPI: shimRemoteStreamsAPI,\r\n  shimTrackEventTransceiver: shimTrackEventTransceiver\r\n});\r\n\r\nvar sdp$1 = {exports: {}};\r\n\r\n/* eslint-env node */\r\nvar hasRequiredSdp;\r\nfunction requireSdp() {\r\n  if (hasRequiredSdp) return sdp$1.exports;\r\n  hasRequiredSdp = 1;\r\n  (function (module) {\r\n\r\n    // SDP helpers.\r\n    const SDPUtils = {};\r\n\r\n    // Generate an alphanumeric identifier for cname or mids.\r\n    // TODO: use UUIDs instead? https://gist.github.com/jed/982883\r\n    SDPUtils.generateIdentifier = function () {\r\n      return Math.random().toString(36).substring(2, 12);\r\n    };\r\n\r\n    // The RTCP CNAME used by all peerconnections from the same JS.\r\n    SDPUtils.localCName = SDPUtils.generateIdentifier();\r\n\r\n    // Splits SDP into lines, dealing with both CRLF and LF.\r\n    SDPUtils.splitLines = function (blob) {\r\n      return blob.trim().split('\\n').map(line => line.trim());\r\n    };\r\n    // Splits SDP into sessionpart and mediasections. Ensures CRLF.\r\n    SDPUtils.splitSections = function (blob) {\r\n      const parts = blob.split('\\nm=');\r\n      return parts.map((part, index) => (index > 0 ? 'm=' + part : part).trim() + '\\r\\n');\r\n    };\r\n\r\n    // Returns the session description.\r\n    SDPUtils.getDescription = function (blob) {\r\n      const sections = SDPUtils.splitSections(blob);\r\n      return sections && sections[0];\r\n    };\r\n\r\n    // Returns the individual media sections.\r\n    SDPUtils.getMediaSections = function (blob) {\r\n      const sections = SDPUtils.splitSections(blob);\r\n      sections.shift();\r\n      return sections;\r\n    };\r\n\r\n    // Returns lines that start with a certain prefix.\r\n    SDPUtils.matchPrefix = function (blob, prefix) {\r\n      return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);\r\n    };\r\n\r\n    // Parses an ICE candidate line. Sample input:\r\n    // candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\r\n    // rport 55996\"\r\n    // Input can be prefixed with a=.\r\n    SDPUtils.parseCandidate = function (line) {\r\n      let parts;\r\n      // Parse both variants.\r\n      if (line.indexOf('a=candidate:') === 0) {\r\n        parts = line.substring(12).split(' ');\r\n      } else {\r\n        parts = line.substring(10).split(' ');\r\n      }\r\n      const candidate = {\r\n        foundation: parts[0],\r\n        component: {\r\n          1: 'rtp',\r\n          2: 'rtcp'\r\n        }[parts[1]] || parts[1],\r\n        protocol: parts[2].toLowerCase(),\r\n        priority: parseInt(parts[3], 10),\r\n        ip: parts[4],\r\n        address: parts[4],\r\n        // address is an alias for ip.\r\n        port: parseInt(parts[5], 10),\r\n        // skip parts[6] == 'typ'\r\n        type: parts[7]\r\n      };\r\n      for (let i = 8; i < parts.length; i += 2) {\r\n        switch (parts[i]) {\r\n          case 'raddr':\r\n            candidate.relatedAddress = parts[i + 1];\r\n            break;\r\n          case 'rport':\r\n            candidate.relatedPort = parseInt(parts[i + 1], 10);\r\n            break;\r\n          case 'tcptype':\r\n            candidate.tcpType = parts[i + 1];\r\n            break;\r\n          case 'ufrag':\r\n            candidate.ufrag = parts[i + 1]; // for backward compatibility.\r\n            candidate.usernameFragment = parts[i + 1];\r\n            break;\r\n          default:\r\n            // extension handling, in particular ufrag. Don't overwrite.\r\n            if (candidate[parts[i]] === undefined) {\r\n              candidate[parts[i]] = parts[i + 1];\r\n            }\r\n            break;\r\n        }\r\n      }\r\n      return candidate;\r\n    };\r\n\r\n    // Translates a candidate object into SDP candidate attribute.\r\n    // This does not include the a= prefix!\r\n    SDPUtils.writeCandidate = function (candidate) {\r\n      const sdp = [];\r\n      sdp.push(candidate.foundation);\r\n      const component = candidate.component;\r\n      if (component === 'rtp') {\r\n        sdp.push(1);\r\n      } else if (component === 'rtcp') {\r\n        sdp.push(2);\r\n      } else {\r\n        sdp.push(component);\r\n      }\r\n      sdp.push(candidate.protocol.toUpperCase());\r\n      sdp.push(candidate.priority);\r\n      sdp.push(candidate.address || candidate.ip);\r\n      sdp.push(candidate.port);\r\n      const type = candidate.type;\r\n      sdp.push('typ');\r\n      sdp.push(type);\r\n      if (type !== 'host' && candidate.relatedAddress && candidate.relatedPort) {\r\n        sdp.push('raddr');\r\n        sdp.push(candidate.relatedAddress);\r\n        sdp.push('rport');\r\n        sdp.push(candidate.relatedPort);\r\n      }\r\n      if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\r\n        sdp.push('tcptype');\r\n        sdp.push(candidate.tcpType);\r\n      }\r\n      if (candidate.usernameFragment || candidate.ufrag) {\r\n        sdp.push('ufrag');\r\n        sdp.push(candidate.usernameFragment || candidate.ufrag);\r\n      }\r\n      return 'candidate:' + sdp.join(' ');\r\n    };\r\n\r\n    // Parses an ice-options line, returns an array of option tags.\r\n    // Sample input:\r\n    // a=ice-options:foo bar\r\n    SDPUtils.parseIceOptions = function (line) {\r\n      return line.substring(14).split(' ');\r\n    };\r\n\r\n    // Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:\r\n    // a=rtpmap:111 opus/48000/2\r\n    SDPUtils.parseRtpMap = function (line) {\r\n      let parts = line.substring(9).split(' ');\r\n      const parsed = {\r\n        payloadType: parseInt(parts.shift(), 10) // was: id\r\n      };\r\n      parts = parts[0].split('/');\r\n      parsed.name = parts[0];\r\n      parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\r\n      parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\r\n      // legacy alias, got renamed back to channels in ORTC.\r\n      parsed.numChannels = parsed.channels;\r\n      return parsed;\r\n    };\r\n\r\n    // Generates a rtpmap line from RTCRtpCodecCapability or\r\n    // RTCRtpCodecParameters.\r\n    SDPUtils.writeRtpMap = function (codec) {\r\n      let pt = codec.payloadType;\r\n      if (codec.preferredPayloadType !== undefined) {\r\n        pt = codec.preferredPayloadType;\r\n      }\r\n      const channels = codec.channels || codec.numChannels || 1;\r\n      return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate + (channels !== 1 ? '/' + channels : '') + '\\r\\n';\r\n    };\r\n\r\n    // Parses a extmap line (headerextension from RFC 5285). Sample input:\r\n    // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n    // a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\r\n    SDPUtils.parseExtmap = function (line) {\r\n      const parts = line.substring(9).split(' ');\r\n      return {\r\n        id: parseInt(parts[0], 10),\r\n        direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\r\n        uri: parts[1],\r\n        attributes: parts.slice(2).join(' ')\r\n      };\r\n    };\r\n\r\n    // Generates an extmap line from RTCRtpHeaderExtensionParameters or\r\n    // RTCRtpHeaderExtension.\r\n    SDPUtils.writeExtmap = function (headerExtension) {\r\n      return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== 'sendrecv' ? '/' + headerExtension.direction : '') + ' ' + headerExtension.uri + (headerExtension.attributes ? ' ' + headerExtension.attributes : '') + '\\r\\n';\r\n    };\r\n\r\n    // Parses a fmtp line, returns dictionary. Sample input:\r\n    // a=fmtp:96 vbr=on;cng=on\r\n    // Also deals with vbr=on; cng=on\r\n    SDPUtils.parseFmtp = function (line) {\r\n      const parsed = {};\r\n      let kv;\r\n      const parts = line.substring(line.indexOf(' ') + 1).split(';');\r\n      for (let j = 0; j < parts.length; j++) {\r\n        kv = parts[j].trim().split('=');\r\n        parsed[kv[0].trim()] = kv[1];\r\n      }\r\n      return parsed;\r\n    };\r\n\r\n    // Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\n    SDPUtils.writeFmtp = function (codec) {\r\n      let line = '';\r\n      let pt = codec.payloadType;\r\n      if (codec.preferredPayloadType !== undefined) {\r\n        pt = codec.preferredPayloadType;\r\n      }\r\n      if (codec.parameters && Object.keys(codec.parameters).length) {\r\n        const params = [];\r\n        Object.keys(codec.parameters).forEach(param => {\r\n          if (codec.parameters[param] !== undefined) {\r\n            params.push(param + '=' + codec.parameters[param]);\r\n          } else {\r\n            params.push(param);\r\n          }\r\n        });\r\n        line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\r\n      }\r\n      return line;\r\n    };\r\n\r\n    // Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\r\n    // a=rtcp-fb:98 nack rpsi\r\n    SDPUtils.parseRtcpFb = function (line) {\r\n      const parts = line.substring(line.indexOf(' ') + 1).split(' ');\r\n      return {\r\n        type: parts.shift(),\r\n        parameter: parts.join(' ')\r\n      };\r\n    };\r\n\r\n    // Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\n    SDPUtils.writeRtcpFb = function (codec) {\r\n      let lines = '';\r\n      let pt = codec.payloadType;\r\n      if (codec.preferredPayloadType !== undefined) {\r\n        pt = codec.preferredPayloadType;\r\n      }\r\n      if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\r\n        // FIXME: special handling for trr-int?\r\n        codec.rtcpFeedback.forEach(fb => {\r\n          lines += 'a=rtcp-fb:' + pt + ' ' + fb.type + (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') + '\\r\\n';\r\n        });\r\n      }\r\n      return lines;\r\n    };\r\n\r\n    // Parses a RFC 5576 ssrc media attribute. Sample input:\r\n    // a=ssrc:3735928559 cname:something\r\n    SDPUtils.parseSsrcMedia = function (line) {\r\n      const sp = line.indexOf(' ');\r\n      const parts = {\r\n        ssrc: parseInt(line.substring(7, sp), 10)\r\n      };\r\n      const colon = line.indexOf(':', sp);\r\n      if (colon > -1) {\r\n        parts.attribute = line.substring(sp + 1, colon);\r\n        parts.value = line.substring(colon + 1);\r\n      } else {\r\n        parts.attribute = line.substring(sp + 1);\r\n      }\r\n      return parts;\r\n    };\r\n\r\n    // Parse a ssrc-group line (see RFC 5576). Sample input:\r\n    // a=ssrc-group:semantics 12 34\r\n    SDPUtils.parseSsrcGroup = function (line) {\r\n      const parts = line.substring(13).split(' ');\r\n      return {\r\n        semantics: parts.shift(),\r\n        ssrcs: parts.map(ssrc => parseInt(ssrc, 10))\r\n      };\r\n    };\r\n\r\n    // Extracts the MID (RFC 5888) from a media section.\r\n    // Returns the MID or undefined if no mid line was found.\r\n    SDPUtils.getMid = function (mediaSection) {\r\n      const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\r\n      if (mid) {\r\n        return mid.substring(6);\r\n      }\r\n    };\r\n\r\n    // Parses a fingerprint line for DTLS-SRTP.\r\n    SDPUtils.parseFingerprint = function (line) {\r\n      const parts = line.substring(14).split(' ');\r\n      return {\r\n        algorithm: parts[0].toLowerCase(),\r\n        // algorithm is case-sensitive in Edge.\r\n        value: parts[1].toUpperCase() // the definition is upper-case in RFC 4572.\r\n      };\r\n    };\r\n\r\n    // Extracts DTLS parameters from SDP media section or sessionpart.\r\n    // FIXME: for consistency with other functions this should only\r\n    //   get the fingerprint line as input. See also getIceParameters.\r\n    SDPUtils.getDtlsParameters = function (mediaSection, sessionpart) {\r\n      const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=fingerprint:');\r\n      // Note: a=setup line is ignored since we use the 'auto' role in Edge.\r\n      return {\r\n        role: 'auto',\r\n        fingerprints: lines.map(SDPUtils.parseFingerprint)\r\n      };\r\n    };\r\n\r\n    // Serializes DTLS parameters to SDP.\r\n    SDPUtils.writeDtlsParameters = function (params, setupType) {\r\n      let sdp = 'a=setup:' + setupType + '\\r\\n';\r\n      params.fingerprints.forEach(fp => {\r\n        sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\r\n      });\r\n      return sdp;\r\n    };\r\n\r\n    // Parses a=crypto lines into\r\n    //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\r\n    SDPUtils.parseCryptoLine = function (line) {\r\n      const parts = line.substring(9).split(' ');\r\n      return {\r\n        tag: parseInt(parts[0], 10),\r\n        cryptoSuite: parts[1],\r\n        keyParams: parts[2],\r\n        sessionParams: parts.slice(3)\r\n      };\r\n    };\r\n    SDPUtils.writeCryptoLine = function (parameters) {\r\n      return 'a=crypto:' + parameters.tag + ' ' + parameters.cryptoSuite + ' ' + (typeof parameters.keyParams === 'object' ? SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') + '\\r\\n';\r\n    };\r\n\r\n    // Parses the crypto key parameters into\r\n    //   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\r\n    SDPUtils.parseCryptoKeyParams = function (keyParams) {\r\n      if (keyParams.indexOf('inline:') !== 0) {\r\n        return null;\r\n      }\r\n      const parts = keyParams.substring(7).split('|');\r\n      return {\r\n        keyMethod: 'inline',\r\n        keySalt: parts[0],\r\n        lifeTime: parts[1],\r\n        mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\r\n        mkiLength: parts[2] ? parts[2].split(':')[1] : undefined\r\n      };\r\n    };\r\n    SDPUtils.writeCryptoKeyParams = function (keyParams) {\r\n      return keyParams.keyMethod + ':' + keyParams.keySalt + (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') + (keyParams.mkiValue && keyParams.mkiLength ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength : '');\r\n    };\r\n\r\n    // Extracts all SDES parameters.\r\n    SDPUtils.getCryptoParameters = function (mediaSection, sessionpart) {\r\n      const lines = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=crypto:');\r\n      return lines.map(SDPUtils.parseCryptoLine);\r\n    };\r\n\r\n    // Parses ICE information from SDP media section or sessionpart.\r\n    // FIXME: for consistency with other functions this should only\r\n    //   get the ice-ufrag and ice-pwd lines as input.\r\n    SDPUtils.getIceParameters = function (mediaSection, sessionpart) {\r\n      const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-ufrag:')[0];\r\n      const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart, 'a=ice-pwd:')[0];\r\n      if (!(ufrag && pwd)) {\r\n        return null;\r\n      }\r\n      return {\r\n        usernameFragment: ufrag.substring(12),\r\n        password: pwd.substring(10)\r\n      };\r\n    };\r\n\r\n    // Serializes ICE parameters to SDP.\r\n    SDPUtils.writeIceParameters = function (params) {\r\n      let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' + 'a=ice-pwd:' + params.password + '\\r\\n';\r\n      if (params.iceLite) {\r\n        sdp += 'a=ice-lite\\r\\n';\r\n      }\r\n      return sdp;\r\n    };\r\n\r\n    // Parses the SDP media section and returns RTCRtpParameters.\r\n    SDPUtils.parseRtpParameters = function (mediaSection) {\r\n      const description = {\r\n        codecs: [],\r\n        headerExtensions: [],\r\n        fecMechanisms: [],\r\n        rtcp: []\r\n      };\r\n      const lines = SDPUtils.splitLines(mediaSection);\r\n      const mline = lines[0].split(' ');\r\n      description.profile = mline[2];\r\n      for (let i = 3; i < mline.length; i++) {\r\n        // find all codecs from mline[3..]\r\n        const pt = mline[i];\r\n        const rtpmapline = SDPUtils.matchPrefix(mediaSection, 'a=rtpmap:' + pt + ' ')[0];\r\n        if (rtpmapline) {\r\n          const codec = SDPUtils.parseRtpMap(rtpmapline);\r\n          const fmtps = SDPUtils.matchPrefix(mediaSection, 'a=fmtp:' + pt + ' ');\r\n          // Only the first a=fmtp:<pt> is considered.\r\n          codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\r\n          codec.rtcpFeedback = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:' + pt + ' ').map(SDPUtils.parseRtcpFb);\r\n          description.codecs.push(codec);\r\n          // parse FEC mechanisms from rtpmap lines.\r\n          switch (codec.name.toUpperCase()) {\r\n            case 'RED':\r\n            case 'ULPFEC':\r\n              description.fecMechanisms.push(codec.name.toUpperCase());\r\n              break;\r\n          }\r\n        }\r\n      }\r\n      SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {\r\n        description.headerExtensions.push(SDPUtils.parseExtmap(line));\r\n      });\r\n      const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ').map(SDPUtils.parseRtcpFb);\r\n      description.codecs.forEach(codec => {\r\n        wildcardRtcpFb.forEach(fb => {\r\n          const duplicate = codec.rtcpFeedback.find(existingFeedback => {\r\n            return existingFeedback.type === fb.type && existingFeedback.parameter === fb.parameter;\r\n          });\r\n          if (!duplicate) {\r\n            codec.rtcpFeedback.push(fb);\r\n          }\r\n        });\r\n      });\r\n      // FIXME: parse rtcp.\r\n      return description;\r\n    };\r\n\r\n    // Generates parts of the SDP media section describing the capabilities /\r\n    // parameters.\r\n    SDPUtils.writeRtpDescription = function (kind, caps) {\r\n      let sdp = '';\r\n\r\n      // Build the mline.\r\n      sdp += 'm=' + kind + ' ';\r\n      sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\r\n      sdp += ' ' + (caps.profile || 'UDP/TLS/RTP/SAVPF') + ' ';\r\n      sdp += caps.codecs.map(codec => {\r\n        if (codec.preferredPayloadType !== undefined) {\r\n          return codec.preferredPayloadType;\r\n        }\r\n        return codec.payloadType;\r\n      }).join(' ') + '\\r\\n';\r\n      sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n      sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\r\n\r\n      // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\r\n      caps.codecs.forEach(codec => {\r\n        sdp += SDPUtils.writeRtpMap(codec);\r\n        sdp += SDPUtils.writeFmtp(codec);\r\n        sdp += SDPUtils.writeRtcpFb(codec);\r\n      });\r\n      let maxptime = 0;\r\n      caps.codecs.forEach(codec => {\r\n        if (codec.maxptime > maxptime) {\r\n          maxptime = codec.maxptime;\r\n        }\r\n      });\r\n      if (maxptime > 0) {\r\n        sdp += 'a=maxptime:' + maxptime + '\\r\\n';\r\n      }\r\n      if (caps.headerExtensions) {\r\n        caps.headerExtensions.forEach(extension => {\r\n          sdp += SDPUtils.writeExtmap(extension);\r\n        });\r\n      }\r\n      // FIXME: write fecMechanisms.\r\n      return sdp;\r\n    };\r\n\r\n    // Parses the SDP media section and returns an array of\r\n    // RTCRtpEncodingParameters.\r\n    SDPUtils.parseRtpEncodingParameters = function (mediaSection) {\r\n      const encodingParameters = [];\r\n      const description = SDPUtils.parseRtpParameters(mediaSection);\r\n      const hasRed = description.fecMechanisms.indexOf('RED') !== -1;\r\n      const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\r\n\r\n      // filter a=ssrc:... cname:, ignore PlanB-msid\r\n      const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(parts => parts.attribute === 'cname');\r\n      const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\r\n      let secondarySsrc;\r\n      const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID').map(line => {\r\n        const parts = line.substring(17).split(' ');\r\n        return parts.map(part => parseInt(part, 10));\r\n      });\r\n      if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\r\n        secondarySsrc = flows[0][1];\r\n      }\r\n      description.codecs.forEach(codec => {\r\n        if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\r\n          let encParam = {\r\n            ssrc: primarySsrc,\r\n            codecPayloadType: parseInt(codec.parameters.apt, 10)\r\n          };\r\n          if (primarySsrc && secondarySsrc) {\r\n            encParam.rtx = {\r\n              ssrc: secondarySsrc\r\n            };\r\n          }\r\n          encodingParameters.push(encParam);\r\n          if (hasRed) {\r\n            encParam = JSON.parse(JSON.stringify(encParam));\r\n            encParam.fec = {\r\n              ssrc: primarySsrc,\r\n              mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\r\n            };\r\n            encodingParameters.push(encParam);\r\n          }\r\n        }\r\n      });\r\n      if (encodingParameters.length === 0 && primarySsrc) {\r\n        encodingParameters.push({\r\n          ssrc: primarySsrc\r\n        });\r\n      }\r\n\r\n      // we support both b=AS and b=TIAS but interpret AS as TIAS.\r\n      let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\r\n      if (bandwidth.length) {\r\n        if (bandwidth[0].indexOf('b=TIAS:') === 0) {\r\n          bandwidth = parseInt(bandwidth[0].substring(7), 10);\r\n        } else if (bandwidth[0].indexOf('b=AS:') === 0) {\r\n          // use formula from JSEP to convert b=AS to TIAS value.\r\n          bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95 - 50 * 40 * 8;\r\n        } else {\r\n          bandwidth = undefined;\r\n        }\r\n        encodingParameters.forEach(params => {\r\n          params.maxBitrate = bandwidth;\r\n        });\r\n      }\r\n      return encodingParameters;\r\n    };\r\n\r\n    // parses http://draft.ortc.org/#rtcrtcpparameters*\r\n    SDPUtils.parseRtcpParameters = function (mediaSection) {\r\n      const rtcpParameters = {};\r\n\r\n      // Gets the first SSRC. Note that with RTX there might be multiple\r\n      // SSRCs.\r\n      const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(obj => obj.attribute === 'cname')[0];\r\n      if (remoteSsrc) {\r\n        rtcpParameters.cname = remoteSsrc.value;\r\n        rtcpParameters.ssrc = remoteSsrc.ssrc;\r\n      }\r\n\r\n      // Edge uses the compound attribute instead of reducedSize\r\n      // compound is !reducedSize\r\n      const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\r\n      rtcpParameters.reducedSize = rsize.length > 0;\r\n      rtcpParameters.compound = rsize.length === 0;\r\n\r\n      // parses the rtcp-mux attrіbute.\r\n      // Note that Edge does not support unmuxed RTCP.\r\n      const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\r\n      rtcpParameters.mux = mux.length > 0;\r\n      return rtcpParameters;\r\n    };\r\n    SDPUtils.writeRtcpParameters = function (rtcpParameters) {\r\n      let sdp = '';\r\n      if (rtcpParameters.reducedSize) {\r\n        sdp += 'a=rtcp-rsize\\r\\n';\r\n      }\r\n      if (rtcpParameters.mux) {\r\n        sdp += 'a=rtcp-mux\\r\\n';\r\n      }\r\n      if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {\r\n        sdp += 'a=ssrc:' + rtcpParameters.ssrc + ' cname:' + rtcpParameters.cname + '\\r\\n';\r\n      }\r\n      return sdp;\r\n    };\r\n\r\n    // parses either a=msid: or a=ssrc:... msid lines and returns\r\n    // the id of the MediaStream and MediaStreamTrack.\r\n    SDPUtils.parseMsid = function (mediaSection) {\r\n      let parts;\r\n      const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\r\n      if (spec.length === 1) {\r\n        parts = spec[0].substring(7).split(' ');\r\n        return {\r\n          stream: parts[0],\r\n          track: parts[1]\r\n        };\r\n      }\r\n      const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:').map(line => SDPUtils.parseSsrcMedia(line)).filter(msidParts => msidParts.attribute === 'msid');\r\n      if (planB.length > 0) {\r\n        parts = planB[0].value.split(' ');\r\n        return {\r\n          stream: parts[0],\r\n          track: parts[1]\r\n        };\r\n      }\r\n    };\r\n\r\n    // SCTP\r\n    // parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\r\n    // to draft-ietf-mmusic-sctp-sdp-05\r\n    SDPUtils.parseSctpDescription = function (mediaSection) {\r\n      const mline = SDPUtils.parseMLine(mediaSection);\r\n      const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\r\n      let maxMessageSize;\r\n      if (maxSizeLine.length > 0) {\r\n        maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);\r\n      }\r\n      if (isNaN(maxMessageSize)) {\r\n        maxMessageSize = 65536;\r\n      }\r\n      const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\r\n      if (sctpPort.length > 0) {\r\n        return {\r\n          port: parseInt(sctpPort[0].substring(12), 10),\r\n          protocol: mline.fmt,\r\n          maxMessageSize\r\n        };\r\n      }\r\n      const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\r\n      if (sctpMapLines.length > 0) {\r\n        const parts = sctpMapLines[0].substring(10).split(' ');\r\n        return {\r\n          port: parseInt(parts[0], 10),\r\n          protocol: parts[1],\r\n          maxMessageSize\r\n        };\r\n      }\r\n    };\r\n\r\n    // SCTP\r\n    // outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\r\n    // support by now receiving in this format, unless we originally parsed\r\n    // as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\r\n    // protocol of DTLS/SCTP -- without UDP/ or TCP/)\r\n    SDPUtils.writeSctpDescription = function (media, sctp) {\r\n      let output = [];\r\n      if (media.protocol !== 'DTLS/SCTP') {\r\n        output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctp-port:' + sctp.port + '\\r\\n'];\r\n      } else {\r\n        output = ['m=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n', 'c=IN IP4 0.0.0.0\\r\\n', 'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'];\r\n      }\r\n      if (sctp.maxMessageSize !== undefined) {\r\n        output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\r\n      }\r\n      return output.join('');\r\n    };\r\n\r\n    // Generate a session ID for SDP.\r\n    // https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\r\n    // recommends using a cryptographically random +ve 64-bit value\r\n    // but right now this should be acceptable and within the right range\r\n    SDPUtils.generateSessionId = function () {\r\n      return Math.random().toString().substr(2, 22);\r\n    };\r\n\r\n    // Write boiler plate for start of SDP\r\n    // sessId argument is optional - if not supplied it will\r\n    // be generated randomly\r\n    // sessVersion is optional and defaults to 2\r\n    // sessUser is optional and defaults to 'thisisadapterortc'\r\n    SDPUtils.writeSessionBoilerplate = function (sessId, sessVer, sessUser) {\r\n      let sessionId;\r\n      const version = sessVer !== undefined ? sessVer : 2;\r\n      if (sessId) {\r\n        sessionId = sessId;\r\n      } else {\r\n        sessionId = SDPUtils.generateSessionId();\r\n      }\r\n      const user = sessUser || 'thisisadapterortc';\r\n      // FIXME: sess-id should be an NTP timestamp.\r\n      return 'v=0\\r\\n' + 'o=' + user + ' ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' + 's=-\\r\\n' + 't=0 0\\r\\n';\r\n    };\r\n\r\n    // Gets the direction from the mediaSection or the sessionpart.\r\n    SDPUtils.getDirection = function (mediaSection, sessionpart) {\r\n      // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\r\n      const lines = SDPUtils.splitLines(mediaSection);\r\n      for (let i = 0; i < lines.length; i++) {\r\n        switch (lines[i]) {\r\n          case 'a=sendrecv':\r\n          case 'a=sendonly':\r\n          case 'a=recvonly':\r\n          case 'a=inactive':\r\n            return lines[i].substring(2);\r\n          // FIXME: What should happen here?\r\n        }\r\n      }\r\n      if (sessionpart) {\r\n        return SDPUtils.getDirection(sessionpart);\r\n      }\r\n      return 'sendrecv';\r\n    };\r\n    SDPUtils.getKind = function (mediaSection) {\r\n      const lines = SDPUtils.splitLines(mediaSection);\r\n      const mline = lines[0].split(' ');\r\n      return mline[0].substring(2);\r\n    };\r\n    SDPUtils.isRejected = function (mediaSection) {\r\n      return mediaSection.split(' ', 2)[1] === '0';\r\n    };\r\n    SDPUtils.parseMLine = function (mediaSection) {\r\n      const lines = SDPUtils.splitLines(mediaSection);\r\n      const parts = lines[0].substring(2).split(' ');\r\n      return {\r\n        kind: parts[0],\r\n        port: parseInt(parts[1], 10),\r\n        protocol: parts[2],\r\n        fmt: parts.slice(3).join(' ')\r\n      };\r\n    };\r\n    SDPUtils.parseOLine = function (mediaSection) {\r\n      const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\r\n      const parts = line.substring(2).split(' ');\r\n      return {\r\n        username: parts[0],\r\n        sessionId: parts[1],\r\n        sessionVersion: parseInt(parts[2], 10),\r\n        netType: parts[3],\r\n        addressType: parts[4],\r\n        address: parts[5]\r\n      };\r\n    };\r\n\r\n    // a very naive interpretation of a valid SDP.\r\n    SDPUtils.isValidSDP = function (blob) {\r\n      if (typeof blob !== 'string' || blob.length === 0) {\r\n        return false;\r\n      }\r\n      const lines = SDPUtils.splitLines(blob);\r\n      for (let i = 0; i < lines.length; i++) {\r\n        if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\r\n          return false;\r\n        }\r\n        // TODO: check the modifier a bit more.\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // Expose public methods.\r\n    {\r\n      module.exports = SDPUtils;\r\n    }\r\n  })(sdp$1);\r\n  return sdp$1.exports;\r\n}\r\n\r\nvar sdpExports = requireSdp();\r\nvar SDPUtils = /*@__PURE__*/getDefaultExportFromCjs(sdpExports);\r\n\r\nvar sdp = /*#__PURE__*/_mergeNamespaces({\r\n  __proto__: null,\r\n  default: SDPUtils\r\n}, [sdpExports]);\r\n\r\n/*\r\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\nfunction shimRTCIceCandidate(window) {\r\n  // foundation is arbitrarily chosen as an indicator for full support for\r\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\r\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'foundation' in window.RTCIceCandidate.prototype) {\r\n    return;\r\n  }\r\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\r\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\r\n    // Remove the a= which shouldn't be part of the candidate string.\r\n    if (typeof args === 'object' && args.candidate && args.candidate.indexOf('a=') === 0) {\r\n      args = JSON.parse(JSON.stringify(args));\r\n      args.candidate = args.candidate.substring(2);\r\n    }\r\n    if (args.candidate && args.candidate.length) {\r\n      // Augment the native candidate with the parsed fields.\r\n      const nativeCandidate = new NativeRTCIceCandidate(args);\r\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\r\n      for (const key in parsedCandidate) {\r\n        if (!(key in nativeCandidate)) {\r\n          Object.defineProperty(nativeCandidate, key, {\r\n            value: parsedCandidate[key]\r\n          });\r\n        }\r\n      }\r\n\r\n      // Override serializer to not serialize the extra attributes.\r\n      nativeCandidate.toJSON = function toJSON() {\r\n        return {\r\n          candidate: nativeCandidate.candidate,\r\n          sdpMid: nativeCandidate.sdpMid,\r\n          sdpMLineIndex: nativeCandidate.sdpMLineIndex,\r\n          usernameFragment: nativeCandidate.usernameFragment\r\n        };\r\n      };\r\n      return nativeCandidate;\r\n    }\r\n    return new NativeRTCIceCandidate(args);\r\n  };\r\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\r\n\r\n  // Hook up the augmented candidate in onicecandidate and\r\n  // addEventListener('icecandidate', ...)\r\n  wrapPeerConnectionEvent(window, 'icecandidate', e => {\r\n    if (e.candidate) {\r\n      Object.defineProperty(e, 'candidate', {\r\n        value: new window.RTCIceCandidate(e.candidate),\r\n        writable: 'false'\r\n      });\r\n    }\r\n    return e;\r\n  });\r\n}\r\nfunction shimRTCIceCandidateRelayProtocol(window) {\r\n  if (!window.RTCIceCandidate || window.RTCIceCandidate && 'relayProtocol' in window.RTCIceCandidate.prototype) {\r\n    return;\r\n  }\r\n\r\n  // Hook up the augmented candidate in onicecandidate and\r\n  // addEventListener('icecandidate', ...)\r\n  wrapPeerConnectionEvent(window, 'icecandidate', e => {\r\n    if (e.candidate) {\r\n      const parsedCandidate = SDPUtils.parseCandidate(e.candidate.candidate);\r\n      if (parsedCandidate.type === 'relay') {\r\n        // This is a libwebrtc-specific mapping of local type preference\r\n        // to relayProtocol.\r\n        e.candidate.relayProtocol = {\r\n          0: 'tls',\r\n          1: 'tcp',\r\n          2: 'udp'\r\n        }[parsedCandidate.priority >> 24];\r\n      }\r\n    }\r\n    return e;\r\n  });\r\n}\r\nfunction shimMaxMessageSize(window, browserDetails) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\r\n      get() {\r\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n      }\r\n    });\r\n  }\r\n  const sctpInDescription = function (description) {\r\n    if (!description || !description.sdp) {\r\n      return false;\r\n    }\r\n    const sections = SDPUtils.splitSections(description.sdp);\r\n    sections.shift();\r\n    return sections.some(mediaSection => {\r\n      const mLine = SDPUtils.parseMLine(mediaSection);\r\n      return mLine && mLine.kind === 'application' && mLine.protocol.indexOf('SCTP') !== -1;\r\n    });\r\n  };\r\n  const getRemoteFirefoxVersion = function (description) {\r\n    // TODO: Is there a better solution for detecting Firefox?\r\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\r\n    if (match === null || match.length < 2) {\r\n      return -1;\r\n    }\r\n    const version = parseInt(match[1], 10);\r\n    // Test for NaN (yes, this is ugly)\r\n    return version !== version ? -1 : version;\r\n  };\r\n  const getCanSendMaxMessageSize = function (remoteIsFirefox) {\r\n    // Every implementation we know can send at least 64 KiB.\r\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\r\n    //       data does not reach the other peer reliably.\r\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\r\n    let canSendMaxMessageSize = 65536;\r\n    if (browserDetails.browser === 'firefox') {\r\n      if (browserDetails.version < 57) {\r\n        if (remoteIsFirefox === -1) {\r\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\r\n          // fragmentation.\r\n          canSendMaxMessageSize = 16384;\r\n        } else {\r\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\r\n          // messages. Thus, supporting ~2 GiB when sending.\r\n          canSendMaxMessageSize = 2147483637;\r\n        }\r\n      } else if (browserDetails.version < 60) {\r\n        // Currently, all FF >= 57 will reset the remote maximum message size\r\n        // to the default value when a data channel is created at a later\r\n        // stage. :(\r\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n        canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;\r\n      } else {\r\n        // FF >= 60 supports sending ~2 GiB\r\n        canSendMaxMessageSize = 2147483637;\r\n      }\r\n    }\r\n    return canSendMaxMessageSize;\r\n  };\r\n  const getMaxMessageSize = function (description, remoteIsFirefox) {\r\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\r\n    //       every implementation we know supports receiving 65536 bytes.\r\n    let maxMessageSize = 65536;\r\n\r\n    // FF 57 has a slightly incorrect default remote max message size, so\r\n    // we need to adjust it here to avoid a failure when sending.\r\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\r\n    if (browserDetails.browser === 'firefox' && browserDetails.version === 57) {\r\n      maxMessageSize = 65535;\r\n    }\r\n    const match = SDPUtils.matchPrefix(description.sdp, 'a=max-message-size:');\r\n    if (match.length > 0) {\r\n      maxMessageSize = parseInt(match[0].substring(19), 10);\r\n    } else if (browserDetails.browser === 'firefox' && remoteIsFirefox !== -1) {\r\n      // If the maximum message size is not present in the remote SDP and\r\n      // both local and remote are Firefox, the remote peer can receive\r\n      // ~2 GiB.\r\n      maxMessageSize = 2147483637;\r\n    }\r\n    return maxMessageSize;\r\n  };\r\n  const origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {\r\n    this._sctp = null;\r\n    // Chrome decided to not expose .sctp in plan-b mode.\r\n    // As usual, adapter.js has to do an 'ugly worakaround'\r\n    // to cover up the mess.\r\n    if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\r\n      const {\r\n        sdpSemantics\r\n      } = this.getConfiguration();\r\n      if (sdpSemantics === 'plan-b') {\r\n        Object.defineProperty(this, 'sctp', {\r\n          get() {\r\n            return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n          },\r\n          enumerable: true,\r\n          configurable: true\r\n        });\r\n      }\r\n    }\r\n    if (sctpInDescription(arguments[0])) {\r\n      // Check if the remote is FF.\r\n      const isFirefox = getRemoteFirefoxVersion(arguments[0]);\r\n\r\n      // Get the maximum message size the local peer is capable of sending\r\n      const canSendMMS = getCanSendMaxMessageSize(isFirefox);\r\n\r\n      // Get the maximum message size of the remote peer.\r\n      const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\r\n\r\n      // Determine final maximum message size\r\n      let maxMessageSize;\r\n      if (canSendMMS === 0 && remoteMMS === 0) {\r\n        maxMessageSize = Number.POSITIVE_INFINITY;\r\n      } else if (canSendMMS === 0 || remoteMMS === 0) {\r\n        maxMessageSize = Math.max(canSendMMS, remoteMMS);\r\n      } else {\r\n        maxMessageSize = Math.min(canSendMMS, remoteMMS);\r\n      }\r\n\r\n      // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\r\n      // attribute.\r\n      const sctp = {};\r\n      Object.defineProperty(sctp, 'maxMessageSize', {\r\n        get() {\r\n          return maxMessageSize;\r\n        }\r\n      });\r\n      this._sctp = sctp;\r\n    }\r\n    return origSetRemoteDescription.apply(this, arguments);\r\n  };\r\n}\r\nfunction shimSendThrowTypeError(window) {\r\n  if (!(window.RTCPeerConnection && 'createDataChannel' in window.RTCPeerConnection.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\r\n  //       message size can be reset for all data channels at a later stage.\r\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n\r\n  function wrapDcSend(dc, pc) {\r\n    const origDataChannelSend = dc.send;\r\n    dc.send = function send() {\r\n      const data = arguments[0];\r\n      const length = data.length || data.size || data.byteLength;\r\n      if (dc.readyState === 'open' && pc.sctp && length > pc.sctp.maxMessageSize) {\r\n        throw new TypeError('Message too large (can send a maximum of ' + pc.sctp.maxMessageSize + ' bytes)');\r\n      }\r\n      return origDataChannelSend.apply(dc, arguments);\r\n    };\r\n  }\r\n  const origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;\r\n  window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {\r\n    const dataChannel = origCreateDataChannel.apply(this, arguments);\r\n    wrapDcSend(dataChannel, this);\r\n    return dataChannel;\r\n  };\r\n  wrapPeerConnectionEvent(window, 'datachannel', e => {\r\n    wrapDcSend(e.channel, e.target);\r\n    return e;\r\n  });\r\n}\r\n\r\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\r\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\r\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\r\n * since DTLS failures would be hidden. See\r\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\r\n * for the Firefox tracking bug.\r\n */\r\nfunction shimConnectionState(window) {\r\n  if (!window.RTCPeerConnection || 'connectionState' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  Object.defineProperty(proto, 'connectionState', {\r\n    get() {\r\n      return {\r\n        completed: 'connected',\r\n        checking: 'connecting'\r\n      }[this.iceConnectionState] || this.iceConnectionState;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n  Object.defineProperty(proto, 'onconnectionstatechange', {\r\n    get() {\r\n      return this._onconnectionstatechange || null;\r\n    },\r\n    set(cb) {\r\n      if (this._onconnectionstatechange) {\r\n        this.removeEventListener('connectionstatechange', this._onconnectionstatechange);\r\n        delete this._onconnectionstatechange;\r\n      }\r\n      if (cb) {\r\n        this.addEventListener('connectionstatechange', this._onconnectionstatechange = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n  ['setLocalDescription', 'setRemoteDescription'].forEach(method => {\r\n    const origMethod = proto[method];\r\n    proto[method] = function () {\r\n      if (!this._connectionstatechangepoly) {\r\n        this._connectionstatechangepoly = e => {\r\n          const pc = e.target;\r\n          if (pc._lastConnectionState !== pc.connectionState) {\r\n            pc._lastConnectionState = pc.connectionState;\r\n            const newEvent = new Event('connectionstatechange', e);\r\n            pc.dispatchEvent(newEvent);\r\n          }\r\n          return e;\r\n        };\r\n        this.addEventListener('iceconnectionstatechange', this._connectionstatechangepoly);\r\n      }\r\n      return origMethod.apply(this, arguments);\r\n    };\r\n  });\r\n}\r\nfunction removeExtmapAllowMixed(window, browserDetails) {\r\n  /* remove a=extmap-allow-mixed for webrtc.org < M71 */\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\r\n    return;\r\n  }\r\n  if (browserDetails.browser === 'safari' && browserDetails._safariVersion >= 13.1) {\r\n    return;\r\n  }\r\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {\r\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\r\n      const sdp = desc.sdp.split('\\n').filter(line => {\r\n        return line.trim() !== 'a=extmap-allow-mixed';\r\n      }).join('\\n');\r\n      // Safari enforces read-only-ness of RTCSessionDescription fields.\r\n      if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) {\r\n        arguments[0] = new window.RTCSessionDescription({\r\n          type: desc.type,\r\n          sdp\r\n        });\r\n      } else {\r\n        desc.sdp = sdp;\r\n      }\r\n    }\r\n    return nativeSRD.apply(this, arguments);\r\n  };\r\n}\r\nfunction shimAddIceCandidateNullOrEmpty(window, browserDetails) {\r\n  // Support for addIceCandidate(null or undefined)\r\n  // as well as addIceCandidate({candidate: \"\", ...})\r\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=978582\r\n  // Note: must be called before other polyfills which change the signature.\r\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\r\n    return;\r\n  }\r\n  const nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;\r\n  if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) {\r\n    return;\r\n  }\r\n  window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {\r\n    if (!arguments[0]) {\r\n      if (arguments[1]) {\r\n        arguments[1].apply(null);\r\n      }\r\n      return Promise.resolve();\r\n    }\r\n    // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n    // in older versions.\r\n    // Native support for ignoring exists for Chrome M77+.\r\n    // Safari ignores as well, exact version unknown but works in the same\r\n    // version that also ignores addIceCandidate(null).\r\n    if ((browserDetails.browser === 'chrome' && browserDetails.version < 78 || browserDetails.browser === 'firefox' && browserDetails.version < 68 || browserDetails.browser === 'safari') && arguments[0] && arguments[0].candidate === '') {\r\n      return Promise.resolve();\r\n    }\r\n    return nativeAddIceCandidate.apply(this, arguments);\r\n  };\r\n}\r\n\r\n// Note: Make sure to call this ahead of APIs that modify\r\n// setLocalDescription.length\r\nfunction shimParameterlessSetLocalDescription(window, browserDetails) {\r\n  if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) {\r\n    return;\r\n  }\r\n  const nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;\r\n  if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) {\r\n    return;\r\n  }\r\n  window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {\r\n    let desc = arguments[0] || {};\r\n    if (typeof desc !== 'object' || desc.type && desc.sdp) {\r\n      return nativeSetLocalDescription.apply(this, arguments);\r\n    }\r\n    // The remaining steps should technically happen when SLD comes off the\r\n    // RTCPeerConnection's operations chain (not ahead of going on it), but\r\n    // this is too difficult to shim. Instead, this shim only covers the\r\n    // common case where the operations chain is empty. This is imperfect, but\r\n    // should cover many cases. Rationale: Even if we can't reduce the glare\r\n    // window to zero on imperfect implementations, there's value in tapping\r\n    // into the perfect negotiation pattern that several browsers support.\r\n    desc = {\r\n      type: desc.type,\r\n      sdp: desc.sdp\r\n    };\r\n    if (!desc.type) {\r\n      switch (this.signalingState) {\r\n        case 'stable':\r\n        case 'have-local-offer':\r\n        case 'have-remote-pranswer':\r\n          desc.type = 'offer';\r\n          break;\r\n        default:\r\n          desc.type = 'answer';\r\n          break;\r\n      }\r\n    }\r\n    if (desc.sdp || desc.type !== 'offer' && desc.type !== 'answer') {\r\n      return nativeSetLocalDescription.apply(this, [desc]);\r\n    }\r\n    const func = desc.type === 'offer' ? this.createOffer : this.createAnswer;\r\n    return func.apply(this).then(d => nativeSetLocalDescription.apply(this, [d]));\r\n  };\r\n}\r\n\r\nvar commonShim = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  removeExtmapAllowMixed: removeExtmapAllowMixed,\r\n  shimAddIceCandidateNullOrEmpty: shimAddIceCandidateNullOrEmpty,\r\n  shimConnectionState: shimConnectionState,\r\n  shimMaxMessageSize: shimMaxMessageSize,\r\n  shimParameterlessSetLocalDescription: shimParameterlessSetLocalDescription,\r\n  shimRTCIceCandidate: shimRTCIceCandidate,\r\n  shimRTCIceCandidateRelayProtocol: shimRTCIceCandidateRelayProtocol,\r\n  shimSendThrowTypeError: shimSendThrowTypeError\r\n});\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n\r\n// Shimming starts here.\r\nfunction adapterFactory() {\r\n  let {\r\n    window\r\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\r\n    shimChrome: true,\r\n    shimFirefox: true,\r\n    shimSafari: true\r\n  };\r\n  // Utils.\r\n  const logging = log;\r\n  const browserDetails = detectBrowser(window);\r\n  const adapter = {\r\n    browserDetails,\r\n    commonShim,\r\n    extractVersion: extractVersion,\r\n    disableLog: disableLog,\r\n    disableWarnings: disableWarnings,\r\n    // Expose sdp as a convenience. For production apps include directly.\r\n    sdp\r\n  };\r\n\r\n  // Shim browser if found.\r\n  switch (browserDetails.browser) {\r\n    case 'chrome':\r\n      if (!chromeShim || !shimPeerConnection$1 || !options.shimChrome) {\r\n        logging('Chrome shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      if (browserDetails.version === null) {\r\n        logging('Chrome shim can not determine version, not shimming.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming chrome.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = chromeShim;\r\n\r\n      // Must be called before shimPeerConnection.\r\n      shimAddIceCandidateNullOrEmpty(window, browserDetails);\r\n      shimParameterlessSetLocalDescription(window);\r\n      shimGetUserMedia$2(window, browserDetails);\r\n      shimMediaStream(window);\r\n      shimPeerConnection$1(window, browserDetails);\r\n      shimOnTrack$1(window);\r\n      shimAddTrackRemoveTrack(window, browserDetails);\r\n      shimGetSendersWithDtmf(window);\r\n      shimSenderReceiverGetStats(window);\r\n      fixNegotiationNeeded(window, browserDetails);\r\n      shimRTCIceCandidate(window);\r\n      shimRTCIceCandidateRelayProtocol(window);\r\n      shimConnectionState(window);\r\n      shimMaxMessageSize(window, browserDetails);\r\n      shimSendThrowTypeError(window);\r\n      removeExtmapAllowMixed(window, browserDetails);\r\n      break;\r\n    case 'firefox':\r\n      if (!firefoxShim || !shimPeerConnection || !options.shimFirefox) {\r\n        logging('Firefox shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming firefox.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = firefoxShim;\r\n\r\n      // Must be called before shimPeerConnection.\r\n      shimAddIceCandidateNullOrEmpty(window, browserDetails);\r\n      shimParameterlessSetLocalDescription(window);\r\n      shimGetUserMedia$1(window, browserDetails);\r\n      shimPeerConnection(window, browserDetails);\r\n      shimOnTrack(window);\r\n      shimRemoveStream(window);\r\n      shimSenderGetStats(window);\r\n      shimReceiverGetStats(window);\r\n      shimRTCDataChannel(window);\r\n      shimAddTransceiver(window);\r\n      shimGetParameters(window);\r\n      shimCreateOffer(window);\r\n      shimCreateAnswer(window);\r\n      shimRTCIceCandidate(window);\r\n      shimConnectionState(window);\r\n      shimMaxMessageSize(window, browserDetails);\r\n      shimSendThrowTypeError(window);\r\n      break;\r\n    case 'safari':\r\n      if (!safariShim || !options.shimSafari) {\r\n        logging('Safari shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming safari.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = safariShim;\r\n\r\n      // Must be called before shimCallbackAPI.\r\n      shimAddIceCandidateNullOrEmpty(window, browserDetails);\r\n      shimParameterlessSetLocalDescription(window);\r\n      shimRTCIceServerUrls(window);\r\n      shimCreateOfferLegacy(window);\r\n      shimCallbacksAPI(window);\r\n      shimLocalStreamsAPI(window);\r\n      shimRemoteStreamsAPI(window);\r\n      shimTrackEventTransceiver(window);\r\n      shimGetUserMedia(window);\r\n      shimAudioContext(window);\r\n      shimRTCIceCandidate(window);\r\n      shimRTCIceCandidateRelayProtocol(window);\r\n      shimMaxMessageSize(window, browserDetails);\r\n      shimSendThrowTypeError(window);\r\n      removeExtmapAllowMixed(window, browserDetails);\r\n      break;\r\n    default:\r\n      logging('Unsupported browser!');\r\n      break;\r\n  }\r\n  return adapter;\r\n}\r\n\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n\r\nadapterFactory({\r\n  window: typeof window === 'undefined' ? undefined : window\r\n});\r\n\r\nconst ENCRYPTION_ALGORITHM = 'AES-GCM';\r\n// How many consecutive frames can fail decrypting before a particular key gets marked as invalid\r\nconst DECRYPTION_FAILURE_TOLERANCE = 10;\r\n// flag set to indicate that e2ee has been setup for sender/receiver;\r\nconst E2EE_FLAG = 'lk_e2ee';\r\nconst SALT = 'LKFrameEncryptionKey';\r\nconst KEY_PROVIDER_DEFAULTS = {\r\n  sharedKey: false,\r\n  ratchetSalt: SALT,\r\n  ratchetWindowSize: 8,\r\n  failureTolerance: DECRYPTION_FAILURE_TOLERANCE,\r\n  keyringSize: 16\r\n};\r\n\r\nvar KeyProviderEvent;\r\n(function (KeyProviderEvent) {\r\n  KeyProviderEvent[\"SetKey\"] = \"setKey\";\r\n  /** Event for requesting to ratchet the key used to encrypt the stream */\r\n  KeyProviderEvent[\"RatchetRequest\"] = \"ratchetRequest\";\r\n  /** Emitted when a key is ratcheted. Could be after auto-ratcheting on decryption failure or\r\n   *  following a `RatchetRequest`, will contain the ratcheted key material */\r\n  KeyProviderEvent[\"KeyRatcheted\"] = \"keyRatcheted\";\r\n})(KeyProviderEvent || (KeyProviderEvent = {}));\r\nvar KeyHandlerEvent;\r\n(function (KeyHandlerEvent) {\r\n  /** Emitted when a key has been ratcheted. Is emitted when any key has been ratcheted\r\n   * i.e. when the FrameCryptor tried to ratchet when decryption is failing  */\r\n  KeyHandlerEvent[\"KeyRatcheted\"] = \"keyRatcheted\";\r\n})(KeyHandlerEvent || (KeyHandlerEvent = {}));\r\nvar EncryptionEvent;\r\n(function (EncryptionEvent) {\r\n  EncryptionEvent[\"ParticipantEncryptionStatusChanged\"] = \"participantEncryptionStatusChanged\";\r\n  EncryptionEvent[\"EncryptionError\"] = \"encryptionError\";\r\n})(EncryptionEvent || (EncryptionEvent = {}));\r\nvar CryptorEvent;\r\n(function (CryptorEvent) {\r\n  CryptorEvent[\"Error\"] = \"cryptorError\";\r\n})(CryptorEvent || (CryptorEvent = {}));\r\n\r\nfunction isE2EESupported() {\r\n  return isInsertableStreamSupported() || isScriptTransformSupported();\r\n}\r\nfunction isScriptTransformSupported() {\r\n  // @ts-ignore\r\n  return typeof window.RTCRtpScriptTransform !== 'undefined';\r\n}\r\nfunction isInsertableStreamSupported() {\r\n  return typeof window.RTCRtpSender !== 'undefined' &&\r\n  // @ts-ignore\r\n  typeof window.RTCRtpSender.prototype.createEncodedStreams !== 'undefined';\r\n}\r\nfunction isVideoFrame(frame) {\r\n  return 'type' in frame;\r\n}\r\nfunction importKey(keyBytes_1) {\r\n  return __awaiter(this, arguments, void 0, function (keyBytes) {\r\n    let algorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\r\n      name: ENCRYPTION_ALGORITHM\r\n    };\r\n    let usage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'encrypt';\r\n    return function* () {\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n      return crypto.subtle.importKey('raw', keyBytes, algorithm, false, usage === 'derive' ? ['deriveBits', 'deriveKey'] : ['encrypt', 'decrypt']);\r\n    }();\r\n  });\r\n}\r\nfunction createKeyMaterialFromString(password) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    let enc = new TextEncoder();\r\n    const keyMaterial = yield crypto.subtle.importKey('raw', enc.encode(password), {\r\n      name: 'PBKDF2'\r\n    }, false, ['deriveBits', 'deriveKey']);\r\n    return keyMaterial;\r\n  });\r\n}\r\nfunction createKeyMaterialFromBuffer(cryptoBuffer) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    const keyMaterial = yield crypto.subtle.importKey('raw', cryptoBuffer, 'HKDF', false, ['deriveBits', 'deriveKey']);\r\n    return keyMaterial;\r\n  });\r\n}\r\nfunction getAlgoOptions(algorithmName, salt) {\r\n  const textEncoder = new TextEncoder();\r\n  const encodedSalt = textEncoder.encode(salt);\r\n  switch (algorithmName) {\r\n    case 'HKDF':\r\n      return {\r\n        name: 'HKDF',\r\n        salt: encodedSalt,\r\n        hash: 'SHA-256',\r\n        info: new ArrayBuffer(128)\r\n      };\r\n    case 'PBKDF2':\r\n      {\r\n        return {\r\n          name: 'PBKDF2',\r\n          salt: encodedSalt,\r\n          hash: 'SHA-256',\r\n          iterations: 100000\r\n        };\r\n      }\r\n    default:\r\n      throw new Error(\"algorithm \".concat(algorithmName, \" is currently unsupported\"));\r\n  }\r\n}\r\n/**\r\n * Derives a set of keys from the master key.\r\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\r\n */\r\nfunction deriveKeys(material, salt) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\r\n    const encryptionKey = yield crypto.subtle.deriveKey(algorithmOptions, material, {\r\n      name: ENCRYPTION_ALGORITHM,\r\n      length: 128\r\n    }, false, ['encrypt', 'decrypt']);\r\n    return {\r\n      material,\r\n      encryptionKey\r\n    };\r\n  });\r\n}\r\nfunction createE2EEKey() {\r\n  return window.crypto.getRandomValues(new Uint8Array(32));\r\n}\r\n/**\r\n * Ratchets a key. See\r\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\r\n */\r\nfunction ratchet(material, salt) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\r\n    return crypto.subtle.deriveBits(algorithmOptions, material, 256);\r\n  });\r\n}\r\nfunction needsRbspUnescaping(frameData) {\r\n  for (var i = 0; i < frameData.length - 3; i++) {\r\n    if (frameData[i] == 0 && frameData[i + 1] == 0 && frameData[i + 2] == 3) return true;\r\n  }\r\n  return false;\r\n}\r\nfunction parseRbsp(stream) {\r\n  const dataOut = [];\r\n  var length = stream.length;\r\n  for (var i = 0; i < stream.length;) {\r\n    // Be careful about over/underflow here. byte_length_ - 3 can underflow, and\r\n    // i + 3 can overflow, but byte_length_ - i can't, because i < byte_length_\r\n    // above, and that expression will produce the number of bytes left in\r\n    // the stream including the byte at i.\r\n    if (length - i >= 3 && !stream[i] && !stream[i + 1] && stream[i + 2] == 3) {\r\n      // Two rbsp bytes.\r\n      dataOut.push(stream[i++]);\r\n      dataOut.push(stream[i++]);\r\n      // Skip the emulation byte.\r\n      i++;\r\n    } else {\r\n      // Single rbsp byte.\r\n      dataOut.push(stream[i++]);\r\n    }\r\n  }\r\n  return new Uint8Array(dataOut);\r\n}\r\nconst kZerosInStartSequence = 2;\r\nconst kEmulationByte = 3;\r\nfunction writeRbsp(data_in) {\r\n  const dataOut = [];\r\n  var numConsecutiveZeros = 0;\r\n  for (var i = 0; i < data_in.length; ++i) {\r\n    var byte = data_in[i];\r\n    if (byte <= kEmulationByte && numConsecutiveZeros >= kZerosInStartSequence) {\r\n      // Need to escape.\r\n      dataOut.push(kEmulationByte);\r\n      numConsecutiveZeros = 0;\r\n    }\r\n    dataOut.push(byte);\r\n    if (byte == 0) {\r\n      ++numConsecutiveZeros;\r\n    } else {\r\n      numConsecutiveZeros = 0;\r\n    }\r\n  }\r\n  return new Uint8Array(dataOut);\r\n}\r\n\r\n/**\r\n * @experimental\r\n */\r\nclass BaseKeyProvider extends eventsExports.EventEmitter {\r\n  constructor() {\r\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    super();\r\n    /**\r\n     * Callback being invoked after a key has been ratcheted.\r\n     * Can happen when:\r\n     * - A decryption failure occurs and the key is auto-ratcheted\r\n     * - A ratchet request is sent (see {@link ratchetKey()})\r\n     * @param ratchetResult Contains the ratcheted chain key (exportable to other participants) and the derived new key material.\r\n     * @param participantId\r\n     * @param keyIndex\r\n     */\r\n    this.onKeyRatcheted = (ratchetResult, participantId, keyIndex) => {\r\n      livekitLogger.debug('key ratcheted event received', {\r\n        ratchetResult,\r\n        participantId,\r\n        keyIndex\r\n      });\r\n    };\r\n    this.keyInfoMap = new Map();\r\n    this.options = Object.assign(Object.assign({}, KEY_PROVIDER_DEFAULTS), options);\r\n    this.on(KeyProviderEvent.KeyRatcheted, this.onKeyRatcheted);\r\n  }\r\n  /**\r\n   * callback to invoke once a key has been set for a participant\r\n   * @param key\r\n   * @param participantIdentity\r\n   * @param keyIndex\r\n   */\r\n  onSetEncryptionKey(key, participantIdentity, keyIndex) {\r\n    const keyInfo = {\r\n      key,\r\n      participantIdentity,\r\n      keyIndex\r\n    };\r\n    if (!this.options.sharedKey && !participantIdentity) {\r\n      throw new Error('participant identity needs to be passed for encryption key if sharedKey option is false');\r\n    }\r\n    this.keyInfoMap.set(\"\".concat(participantIdentity !== null && participantIdentity !== void 0 ? participantIdentity : 'shared', \"-\").concat(keyIndex !== null && keyIndex !== void 0 ? keyIndex : 0), keyInfo);\r\n    this.emit(KeyProviderEvent.SetKey, keyInfo);\r\n  }\r\n  getKeys() {\r\n    return Array.from(this.keyInfoMap.values());\r\n  }\r\n  getOptions() {\r\n    return this.options;\r\n  }\r\n  ratchetKey(participantIdentity, keyIndex) {\r\n    this.emit(KeyProviderEvent.RatchetRequest, participantIdentity, keyIndex);\r\n  }\r\n}\r\n/**\r\n * A basic KeyProvider implementation intended for a single shared\r\n * passphrase between all participants\r\n * @experimental\r\n */\r\nclass ExternalE2EEKeyProvider extends BaseKeyProvider {\r\n  constructor() {\r\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\r\n    const opts = Object.assign(Object.assign({}, options), {\r\n      sharedKey: true,\r\n      // for a shared key provider failing to decrypt for a specific participant\r\n      // should not mark the key as invalid, so we accept wrong keys forever\r\n      // and won't try to auto-ratchet\r\n      ratchetWindowSize: 0,\r\n      failureTolerance: -1\r\n    });\r\n    super(opts);\r\n  }\r\n  /**\r\n   * Accepts a passphrase that's used to create the crypto keys.\r\n   * When passing in a string, PBKDF2 is used.\r\n   * When passing in an Array buffer of cryptographically random numbers, HKDF is being used. (recommended)\r\n   * @param key\r\n   */\r\n  setKey(key) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const derivedKey = typeof key === 'string' ? yield createKeyMaterialFromString(key) : yield createKeyMaterialFromBuffer(key);\r\n      this.onSetEncryptionKey(derivedKey);\r\n    });\r\n  }\r\n}\r\n\r\nclass LivekitError extends Error {\r\n  constructor(code, message) {\r\n    super(message || 'an error has occured');\r\n    this.name = 'LiveKitError';\r\n    this.code = code;\r\n  }\r\n}\r\nvar ConnectionErrorReason;\r\n(function (ConnectionErrorReason) {\r\n  ConnectionErrorReason[ConnectionErrorReason[\"NotAllowed\"] = 0] = \"NotAllowed\";\r\n  ConnectionErrorReason[ConnectionErrorReason[\"ServerUnreachable\"] = 1] = \"ServerUnreachable\";\r\n  ConnectionErrorReason[ConnectionErrorReason[\"InternalError\"] = 2] = \"InternalError\";\r\n  ConnectionErrorReason[ConnectionErrorReason[\"Cancelled\"] = 3] = \"Cancelled\";\r\n  ConnectionErrorReason[ConnectionErrorReason[\"LeaveRequest\"] = 4] = \"LeaveRequest\";\r\n  ConnectionErrorReason[ConnectionErrorReason[\"Timeout\"] = 5] = \"Timeout\";\r\n})(ConnectionErrorReason || (ConnectionErrorReason = {}));\r\nclass ConnectionError extends LivekitError {\r\n  constructor(message, reason, status, context) {\r\n    super(1, message);\r\n    this.name = 'ConnectionError';\r\n    this.status = status;\r\n    this.reason = reason;\r\n    this.context = context;\r\n    this.reasonName = ConnectionErrorReason[reason];\r\n  }\r\n}\r\nclass DeviceUnsupportedError extends LivekitError {\r\n  constructor(message) {\r\n    super(21, message !== null && message !== void 0 ? message : 'device is unsupported');\r\n    this.name = 'DeviceUnsupportedError';\r\n  }\r\n}\r\nclass TrackInvalidError extends LivekitError {\r\n  constructor(message) {\r\n    super(20, message !== null && message !== void 0 ? message : 'track is invalid');\r\n    this.name = 'TrackInvalidError';\r\n  }\r\n}\r\nclass UnsupportedServer extends LivekitError {\r\n  constructor(message) {\r\n    super(10, message !== null && message !== void 0 ? message : 'unsupported server');\r\n    this.name = 'UnsupportedServer';\r\n  }\r\n}\r\nclass UnexpectedConnectionState extends LivekitError {\r\n  constructor(message) {\r\n    super(12, message !== null && message !== void 0 ? message : 'unexpected connection state');\r\n    this.name = 'UnexpectedConnectionState';\r\n  }\r\n}\r\nclass NegotiationError extends LivekitError {\r\n  constructor(message) {\r\n    super(13, message !== null && message !== void 0 ? message : 'unable to negotiate');\r\n    this.name = 'NegotiationError';\r\n  }\r\n}\r\nclass PublishDataError extends LivekitError {\r\n  constructor(message) {\r\n    super(14, message !== null && message !== void 0 ? message : 'unable to publish data');\r\n    this.name = 'PublishDataError';\r\n  }\r\n}\r\nclass PublishTrackError extends LivekitError {\r\n  constructor(message, status) {\r\n    super(15, message);\r\n    this.name = 'PublishTrackError';\r\n    this.status = status;\r\n  }\r\n}\r\nclass SignalRequestError extends LivekitError {\r\n  constructor(message, reason) {\r\n    super(15, message);\r\n    this.reason = reason;\r\n    this.reasonName = typeof reason === 'string' ? reason : RequestResponse_Reason[reason];\r\n  }\r\n}\r\nvar MediaDeviceFailure;\r\n(function (MediaDeviceFailure) {\r\n  // user rejected permissions\r\n  MediaDeviceFailure[\"PermissionDenied\"] = \"PermissionDenied\";\r\n  // device is not available\r\n  MediaDeviceFailure[\"NotFound\"] = \"NotFound\";\r\n  // device is in use. On Windows, only a single tab may get access to a device at a time.\r\n  MediaDeviceFailure[\"DeviceInUse\"] = \"DeviceInUse\";\r\n  MediaDeviceFailure[\"Other\"] = \"Other\";\r\n})(MediaDeviceFailure || (MediaDeviceFailure = {}));\r\n(function (MediaDeviceFailure) {\r\n  function getFailure(error) {\r\n    if (error && 'name' in error) {\r\n      if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\r\n        return MediaDeviceFailure.NotFound;\r\n      }\r\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\r\n        return MediaDeviceFailure.PermissionDenied;\r\n      }\r\n      if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\r\n        return MediaDeviceFailure.DeviceInUse;\r\n      }\r\n      return MediaDeviceFailure.Other;\r\n    }\r\n  }\r\n  MediaDeviceFailure.getFailure = getFailure;\r\n})(MediaDeviceFailure || (MediaDeviceFailure = {}));\r\n\r\nvar CryptorErrorReason;\r\n(function (CryptorErrorReason) {\r\n  CryptorErrorReason[CryptorErrorReason[\"InvalidKey\"] = 0] = \"InvalidKey\";\r\n  CryptorErrorReason[CryptorErrorReason[\"MissingKey\"] = 1] = \"MissingKey\";\r\n  CryptorErrorReason[CryptorErrorReason[\"InternalError\"] = 2] = \"InternalError\";\r\n})(CryptorErrorReason || (CryptorErrorReason = {}));\r\nclass CryptorError extends LivekitError {\r\n  constructor(message) {\r\n    let reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CryptorErrorReason.InternalError;\r\n    let participantIdentity = arguments.length > 2 ? arguments[2] : undefined;\r\n    super(40, message);\r\n    this.reason = reason;\r\n    this.participantIdentity = participantIdentity;\r\n  }\r\n}\r\n\r\n/**\r\n * Events are the primary way LiveKit notifies your application of changes.\r\n *\r\n * The following are events emitted by [[Room]], listen to room events like\r\n *\r\n * ```typescript\r\n * room.on(RoomEvent.TrackPublished, (track, publication, participant) => {})\r\n * ```\r\n */\r\nvar RoomEvent;\r\n(function (RoomEvent) {\r\n  /**\r\n   * When the connection to the server has been established\r\n   */\r\n  RoomEvent[\"Connected\"] = \"connected\";\r\n  /**\r\n   * When the connection to the server has been interrupted and it's attempting\r\n   * to reconnect.\r\n   */\r\n  RoomEvent[\"Reconnecting\"] = \"reconnecting\";\r\n  /**\r\n   * When the signal connection to the server has been interrupted. This isn't noticeable to users most of the time.\r\n   * It will resolve with a `RoomEvent.Reconnected` once the signal connection has been re-established.\r\n   * If media fails additionally it an additional `RoomEvent.Reconnecting` will be emitted.\r\n   */\r\n  RoomEvent[\"SignalReconnecting\"] = \"signalReconnecting\";\r\n  /**\r\n   * Fires when a reconnection has been successful.\r\n   */\r\n  RoomEvent[\"Reconnected\"] = \"reconnected\";\r\n  /**\r\n   * When disconnected from room. This fires when room.disconnect() is called or\r\n   * when an unrecoverable connection issue had occured.\r\n   *\r\n   * DisconnectReason can be used to determine why the participant was disconnected. Notable reasons are\r\n   * - DUPLICATE_IDENTITY: another client with the same identity has joined the room\r\n   * - PARTICIPANT_REMOVED: participant was removed by RemoveParticipant API\r\n   * - ROOM_DELETED: the room has ended via DeleteRoom API\r\n   *\r\n   * args: ([[DisconnectReason]])\r\n   */\r\n  RoomEvent[\"Disconnected\"] = \"disconnected\";\r\n  /**\r\n   * Whenever the connection state of the room changes\r\n   *\r\n   * args: ([[ConnectionState]])\r\n   */\r\n  RoomEvent[\"ConnectionStateChanged\"] = \"connectionStateChanged\";\r\n  /**\r\n   * When participant has been moved to a different room by the service request.\r\n   * The behavior looks like the participant has been disconnected and reconnected to a different room\r\n   * seamlessly without connection state transition.\r\n   * A new token will be provided for reconnecting to the new room if needed.\r\n   *\r\n   * args: ([[room: string, token: string]])\r\n   */\r\n  RoomEvent[\"Moved\"] = \"moved\";\r\n  /**\r\n   * When input or output devices on the machine have changed.\r\n   */\r\n  RoomEvent[\"MediaDevicesChanged\"] = \"mediaDevicesChanged\";\r\n  /**\r\n   * When a [[RemoteParticipant]] joins *after* the local\r\n   * participant. It will not emit events for participants that are already\r\n   * in the room\r\n   *\r\n   * args: ([[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"ParticipantConnected\"] = \"participantConnected\";\r\n  /**\r\n   * When a [[RemoteParticipant]] leaves *after* the local\r\n   * participant has joined.\r\n   *\r\n   * args: ([[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"ParticipantDisconnected\"] = \"participantDisconnected\";\r\n  /**\r\n   * When a new track is published to room *after* the local\r\n   * participant has joined. It will not fire for tracks that are already published.\r\n   *\r\n   * A track published doesn't mean the participant has subscribed to it. It's\r\n   * simply reflecting the state of the room.\r\n   *\r\n   * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackPublished\"] = \"trackPublished\";\r\n  /**\r\n   * The [[LocalParticipant]] has subscribed to a new track. This event will **always**\r\n   * fire as long as new tracks are ready for use.\r\n   *\r\n   * args: ([[RemoteTrack]], [[RemoteTrackPublication]], [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackSubscribed\"] = \"trackSubscribed\";\r\n  /**\r\n   * Could not subscribe to a track\r\n   *\r\n   * args: (track sid, [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackSubscriptionFailed\"] = \"trackSubscriptionFailed\";\r\n  /**\r\n   * A [[RemoteParticipant]] has unpublished a track\r\n   *\r\n   * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackUnpublished\"] = \"trackUnpublished\";\r\n  /**\r\n   * A subscribed track is no longer available. Clients should listen to this\r\n   * event and ensure they detach tracks.\r\n   *\r\n   * args: ([[Track]], [[RemoteTrackPublication]], [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackUnsubscribed\"] = \"trackUnsubscribed\";\r\n  /**\r\n   * A track that was muted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\r\n   *\r\n   * args: ([[TrackPublication]], [[Participant]])\r\n   */\r\n  RoomEvent[\"TrackMuted\"] = \"trackMuted\";\r\n  /**\r\n   * A track that was unmuted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\r\n   *\r\n   * args: ([[TrackPublication]], [[Participant]])\r\n   */\r\n  RoomEvent[\"TrackUnmuted\"] = \"trackUnmuted\";\r\n  /**\r\n   * A local track was published successfully. This event is helpful to know\r\n   * when to update your local UI with the newly published track.\r\n   *\r\n   * args: ([[LocalTrackPublication]], [[LocalParticipant]])\r\n   */\r\n  RoomEvent[\"LocalTrackPublished\"] = \"localTrackPublished\";\r\n  /**\r\n   * A local track was unpublished. This event is helpful to know when to remove\r\n   * the local track from your UI.\r\n   *\r\n   * When a user stops sharing their screen by pressing \"End\" on the browser UI,\r\n   * this event will also fire.\r\n   *\r\n   * args: ([[LocalTrackPublication]], [[LocalParticipant]])\r\n   */\r\n  RoomEvent[\"LocalTrackUnpublished\"] = \"localTrackUnpublished\";\r\n  /**\r\n   * When a local audio track is published the SDK checks whether there is complete silence\r\n   * on that track and emits the LocalAudioSilenceDetected event in that case.\r\n   * This allows for applications to show UI informing users that they might have to\r\n   * reset their audio hardware or check for proper device connectivity.\r\n   */\r\n  RoomEvent[\"LocalAudioSilenceDetected\"] = \"localAudioSilenceDetected\";\r\n  /**\r\n   * Active speakers changed. List of speakers are ordered by their audio level.\r\n   * loudest speakers first. This will include the LocalParticipant too.\r\n   *\r\n   * Speaker updates are sent only to the publishing participant and their subscribers.\r\n   *\r\n   * args: (Array<[[Participant]]>)\r\n   */\r\n  RoomEvent[\"ActiveSpeakersChanged\"] = \"activeSpeakersChanged\";\r\n  /**\r\n   * Participant metadata is a simple way for app-specific state to be pushed to\r\n   * all users.\r\n   * When RoomService.UpdateParticipantMetadata is called to change a participant's\r\n   * state, *all*  participants in the room will fire this event.\r\n   *\r\n   * args: (prevMetadata: string, [[Participant]])\r\n   *\r\n   */\r\n  RoomEvent[\"ParticipantMetadataChanged\"] = \"participantMetadataChanged\";\r\n  /**\r\n   * Participant's display name changed\r\n   *\r\n   * args: (name: string, [[Participant]])\r\n   *\r\n   */\r\n  RoomEvent[\"ParticipantNameChanged\"] = \"participantNameChanged\";\r\n  /**\r\n   * Participant attributes is an app-specific key value state to be pushed to\r\n   * all users.\r\n   * When a participant's attributes changed, this event will be emitted with the changed attributes and the participant\r\n   * args: (changedAttributes: [[Record<string, string]], participant: [[Participant]])\r\n   */\r\n  RoomEvent[\"ParticipantAttributesChanged\"] = \"participantAttributesChanged\";\r\n  /**\r\n   * Emitted when the participant's state changes to ACTIVE and is ready to send/receive data messages\r\n   *\r\n   * args: (participant: [[Participant]])\r\n   */\r\n  RoomEvent[\"ParticipantActive\"] = \"participantActive\";\r\n  /**\r\n   * Room metadata is a simple way for app-specific state to be pushed to\r\n   * all users.\r\n   * When RoomService.UpdateRoomMetadata is called to change a room's state,\r\n   * *all*  participants in the room will fire this event.\r\n   *\r\n   * args: (string)\r\n   */\r\n  RoomEvent[\"RoomMetadataChanged\"] = \"roomMetadataChanged\";\r\n  /**\r\n   * Data received from another participant.\r\n   * Data packets provides the ability to use LiveKit to send/receive arbitrary payloads.\r\n   * All participants in the room will receive the messages sent to the room.\r\n   *\r\n   * args: (payload: Uint8Array, participant: [[Participant]], kind: [[DataPacket_Kind]], topic?: string)\r\n   */\r\n  RoomEvent[\"DataReceived\"] = \"dataReceived\";\r\n  /**\r\n   * SIP DTMF tones received from another participant.\r\n   *\r\n   * args: (participant: [[Participant]], dtmf: [[DataPacket_Kind]])\r\n   */\r\n  RoomEvent[\"SipDTMFReceived\"] = \"sipDTMFReceived\";\r\n  /**\r\n   * Transcription received from a participant's track.\r\n   * @beta\r\n   */\r\n  RoomEvent[\"TranscriptionReceived\"] = \"transcriptionReceived\";\r\n  /**\r\n   * Connection quality was changed for a Participant. It'll receive updates\r\n   * from the local participant, as well as any [[RemoteParticipant]]s that we are\r\n   * subscribed to.\r\n   *\r\n   * args: (connectionQuality: [[ConnectionQuality]], participant: [[Participant]])\r\n   */\r\n  RoomEvent[\"ConnectionQualityChanged\"] = \"connectionQualityChanged\";\r\n  /**\r\n   * StreamState indicates if a subscribed (remote) track has been paused by the SFU\r\n   * (typically this happens because of subscriber's bandwidth constraints)\r\n   *\r\n   * When bandwidth conditions allow, the track will be resumed automatically.\r\n   * TrackStreamStateChanged will also be emitted when that happens.\r\n   *\r\n   * args: (pub: [[RemoteTrackPublication]], streamState: [[Track.StreamState]],\r\n   *        participant: [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackStreamStateChanged\"] = \"trackStreamStateChanged\";\r\n  /**\r\n   * One of subscribed tracks have changed its permissions for the current\r\n   * participant. If permission was revoked, then the track will no longer\r\n   * be subscribed. If permission was granted, a TrackSubscribed event will\r\n   * be emitted.\r\n   *\r\n   * args: (pub: [[RemoteTrackPublication]],\r\n   *        status: [[TrackPublication.PermissionStatus]],\r\n   *        participant: [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackSubscriptionPermissionChanged\"] = \"trackSubscriptionPermissionChanged\";\r\n  /**\r\n   * One of subscribed tracks have changed its status for the current\r\n   * participant.\r\n   *\r\n   * args: (pub: [[RemoteTrackPublication]],\r\n   *        status: [[TrackPublication.SubscriptionStatus]],\r\n   *        participant: [[RemoteParticipant]])\r\n   */\r\n  RoomEvent[\"TrackSubscriptionStatusChanged\"] = \"trackSubscriptionStatusChanged\";\r\n  /**\r\n   * LiveKit will attempt to autoplay all audio tracks when you attach them to\r\n   * audio elements. However, if that fails, we'll notify you via AudioPlaybackStatusChanged.\r\n   * `Room.canPlaybackAudio` will indicate if audio playback is permitted.\r\n   */\r\n  RoomEvent[\"AudioPlaybackStatusChanged\"] = \"audioPlaybackChanged\";\r\n  /**\r\n   * LiveKit will attempt to autoplay all video tracks when you attach them to\r\n   * a video element. However, if that fails, we'll notify you via VideoPlaybackStatusChanged.\r\n   * Calling `room.startVideo()` in a user gesture event handler will resume the video playback.\r\n   */\r\n  RoomEvent[\"VideoPlaybackStatusChanged\"] = \"videoPlaybackChanged\";\r\n  /**\r\n   * When we have encountered an error while attempting to create a track.\r\n   * The errors take place in getUserMedia().\r\n   * Use MediaDeviceFailure.getFailure(error) to get the reason of failure.\r\n   * [[LocalParticipant.lastCameraError]] and [[LocalParticipant.lastMicrophoneError]]\r\n   * will indicate if it had an error while creating the audio or video track respectively.\r\n   *\r\n   * args: (error: Error)\r\n   */\r\n  RoomEvent[\"MediaDevicesError\"] = \"mediaDevicesError\";\r\n  /**\r\n   * A participant's permission has changed.\r\n   * args: (prevPermissions: [[ParticipantPermission]], participant: [[Participant]])\r\n   */\r\n  RoomEvent[\"ParticipantPermissionsChanged\"] = \"participantPermissionsChanged\";\r\n  /**\r\n   * Signal connected, can publish tracks.\r\n   */\r\n  RoomEvent[\"SignalConnected\"] = \"signalConnected\";\r\n  /**\r\n   * Recording of a room has started/stopped. Room.isRecording will be updated too.\r\n   * args: (isRecording: boolean)\r\n   */\r\n  RoomEvent[\"RecordingStatusChanged\"] = \"recordingStatusChanged\";\r\n  RoomEvent[\"ParticipantEncryptionStatusChanged\"] = \"participantEncryptionStatusChanged\";\r\n  RoomEvent[\"EncryptionError\"] = \"encryptionError\";\r\n  /**\r\n   * Emits whenever the current buffer status of a data channel changes\r\n   * args: (isLow: boolean, kind: [[DataPacket_Kind]])\r\n   */\r\n  RoomEvent[\"DCBufferStatusChanged\"] = \"dcBufferStatusChanged\";\r\n  /**\r\n   * Triggered by a call to room.switchActiveDevice\r\n   * args: (kind: MediaDeviceKind, deviceId: string)\r\n   */\r\n  RoomEvent[\"ActiveDeviceChanged\"] = \"activeDeviceChanged\";\r\n  RoomEvent[\"ChatMessage\"] = \"chatMessage\";\r\n  /**\r\n   * fired when the first remote participant has subscribed to the localParticipant's track\r\n   */\r\n  RoomEvent[\"LocalTrackSubscribed\"] = \"localTrackSubscribed\";\r\n  /**\r\n   * fired when the client receives connection metrics from other participants\r\n   */\r\n  RoomEvent[\"MetricsReceived\"] = \"metricsReceived\";\r\n})(RoomEvent || (RoomEvent = {}));\r\nvar ParticipantEvent;\r\n(function (ParticipantEvent) {\r\n  /**\r\n   * When a new track is published to room *after* the local\r\n   * participant has joined. It will not fire for tracks that are already published.\r\n   *\r\n   * A track published doesn't mean the participant has subscribed to it. It's\r\n   * simply reflecting the state of the room.\r\n   *\r\n   * args: ([[RemoteTrackPublication]])\r\n   */\r\n  ParticipantEvent[\"TrackPublished\"] = \"trackPublished\";\r\n  /**\r\n   * Successfully subscribed to the [[RemoteParticipant]]'s track.\r\n   * This event will **always** fire as long as new tracks are ready for use.\r\n   *\r\n   * args: ([[RemoteTrack]], [[RemoteTrackPublication]])\r\n   */\r\n  ParticipantEvent[\"TrackSubscribed\"] = \"trackSubscribed\";\r\n  /**\r\n   * Could not subscribe to a track\r\n   *\r\n   * args: (track sid)\r\n   */\r\n  ParticipantEvent[\"TrackSubscriptionFailed\"] = \"trackSubscriptionFailed\";\r\n  /**\r\n   * A [[RemoteParticipant]] has unpublished a track\r\n   *\r\n   * args: ([[RemoteTrackPublication]])\r\n   */\r\n  ParticipantEvent[\"TrackUnpublished\"] = \"trackUnpublished\";\r\n  /**\r\n   * A subscribed track is no longer available. Clients should listen to this\r\n   * event and ensure they detach tracks.\r\n   *\r\n   * args: ([[RemoteTrack]], [[RemoteTrackPublication]])\r\n   */\r\n  ParticipantEvent[\"TrackUnsubscribed\"] = \"trackUnsubscribed\";\r\n  /**\r\n   * A track that was muted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\r\n   *\r\n   * args: ([[TrackPublication]])\r\n   */\r\n  ParticipantEvent[\"TrackMuted\"] = \"trackMuted\";\r\n  /**\r\n   * A track that was unmuted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]\r\n   *\r\n   * args: ([[TrackPublication]])\r\n   */\r\n  ParticipantEvent[\"TrackUnmuted\"] = \"trackUnmuted\";\r\n  /**\r\n   * A local track was published successfully. This event is helpful to know\r\n   * when to update your local UI with the newly published track.\r\n   *\r\n   * args: ([[LocalTrackPublication]])\r\n   */\r\n  ParticipantEvent[\"LocalTrackPublished\"] = \"localTrackPublished\";\r\n  /**\r\n   * A local track was unpublished. This event is helpful to know when to remove\r\n   * the local track from your UI.\r\n   *\r\n   * When a user stops sharing their screen by pressing \"End\" on the browser UI,\r\n   * this event will also fire.\r\n   *\r\n   * args: ([[LocalTrackPublication]])\r\n   */\r\n  ParticipantEvent[\"LocalTrackUnpublished\"] = \"localTrackUnpublished\";\r\n  /**\r\n   * Participant metadata is a simple way for app-specific state to be pushed to\r\n   * all users.\r\n   * When RoomService.UpdateParticipantMetadata is called to change a participant's\r\n   * state, *all*  participants in the room will fire this event.\r\n   * To access the current metadata, see [[Participant.metadata]].\r\n   *\r\n   * args: (prevMetadata: string)\r\n   *\r\n   */\r\n  ParticipantEvent[\"ParticipantMetadataChanged\"] = \"participantMetadataChanged\";\r\n  /**\r\n   * Participant's display name changed\r\n   *\r\n   * args: (name: string, [[Participant]])\r\n   *\r\n   */\r\n  ParticipantEvent[\"ParticipantNameChanged\"] = \"participantNameChanged\";\r\n  /**\r\n   * Data received from this participant as sender.\r\n   * Data packets provides the ability to use LiveKit to send/receive arbitrary payloads.\r\n   * All participants in the room will receive the messages sent to the room.\r\n   *\r\n   * args: (payload: Uint8Array, kind: [[DataPacket_Kind]])\r\n   */\r\n  ParticipantEvent[\"DataReceived\"] = \"dataReceived\";\r\n  /**\r\n   * SIP DTMF tones received from this participant as sender.\r\n   *\r\n   * args: (dtmf: [[DataPacket_Kind]])\r\n   */\r\n  ParticipantEvent[\"SipDTMFReceived\"] = \"sipDTMFReceived\";\r\n  /**\r\n   * Transcription received from this participant as data source.\r\n   * @beta\r\n   */\r\n  ParticipantEvent[\"TranscriptionReceived\"] = \"transcriptionReceived\";\r\n  /**\r\n   * Has speaking status changed for the current participant\r\n   *\r\n   * args: (speaking: boolean)\r\n   */\r\n  ParticipantEvent[\"IsSpeakingChanged\"] = \"isSpeakingChanged\";\r\n  /**\r\n   * Connection quality was changed for a Participant. It'll receive updates\r\n   * from the local participant, as well as any [[RemoteParticipant]]s that we are\r\n   * subscribed to.\r\n   *\r\n   * args: (connectionQuality: [[ConnectionQuality]])\r\n   */\r\n  ParticipantEvent[\"ConnectionQualityChanged\"] = \"connectionQualityChanged\";\r\n  /**\r\n   * StreamState indicates if a subscribed track has been paused by the SFU\r\n   * (typically this happens because of subscriber's bandwidth constraints)\r\n   *\r\n   * When bandwidth conditions allow, the track will be resumed automatically.\r\n   * TrackStreamStateChanged will also be emitted when that happens.\r\n   *\r\n   * args: (pub: [[RemoteTrackPublication]], streamState: [[Track.StreamState]])\r\n   */\r\n  ParticipantEvent[\"TrackStreamStateChanged\"] = \"trackStreamStateChanged\";\r\n  /**\r\n   * One of subscribed tracks have changed its permissions for the current\r\n   * participant. If permission was revoked, then the track will no longer\r\n   * be subscribed. If permission was granted, a TrackSubscribed event will\r\n   * be emitted.\r\n   *\r\n   * args: (pub: [[RemoteTrackPublication]],\r\n   *        status: [[TrackPublication.SubscriptionStatus]])\r\n   */\r\n  ParticipantEvent[\"TrackSubscriptionPermissionChanged\"] = \"trackSubscriptionPermissionChanged\";\r\n  /**\r\n   * One of the remote participants publications has changed its subscription status.\r\n   *\r\n   */\r\n  ParticipantEvent[\"TrackSubscriptionStatusChanged\"] = \"trackSubscriptionStatusChanged\";\r\n  // fired only on LocalParticipant\r\n  /** @internal */\r\n  ParticipantEvent[\"MediaDevicesError\"] = \"mediaDevicesError\";\r\n  // fired only on LocalParticipant\r\n  /** @internal */\r\n  ParticipantEvent[\"AudioStreamAcquired\"] = \"audioStreamAcquired\";\r\n  /**\r\n   * A participant's permission has changed.\r\n   * args: (prevPermissions: [[ParticipantPermission]])\r\n   */\r\n  ParticipantEvent[\"ParticipantPermissionsChanged\"] = \"participantPermissionsChanged\";\r\n  /** @internal */\r\n  ParticipantEvent[\"PCTrackAdded\"] = \"pcTrackAdded\";\r\n  /**\r\n   * Participant attributes is an app-specific key value state to be pushed to\r\n   * all users.\r\n   * When a participant's attributes changed, this event will be emitted with the changed attributes\r\n   * args: (changedAttributes: [[Record<string, string]])\r\n   */\r\n  ParticipantEvent[\"AttributesChanged\"] = \"attributesChanged\";\r\n  /**\r\n   * fired on local participant only, when the first remote participant has subscribed to the track specified in the payload\r\n   */\r\n  ParticipantEvent[\"LocalTrackSubscribed\"] = \"localTrackSubscribed\";\r\n  /** only emitted on local participant */\r\n  ParticipantEvent[\"ChatMessage\"] = \"chatMessage\";\r\n  /**\r\n   * Emitted when the participant's state changes to ACTIVE and is ready to send/receive data messages\r\n   */\r\n  ParticipantEvent[\"Active\"] = \"active\";\r\n})(ParticipantEvent || (ParticipantEvent = {}));\r\n/** @internal */\r\nvar EngineEvent;\r\n(function (EngineEvent) {\r\n  EngineEvent[\"TransportsCreated\"] = \"transportsCreated\";\r\n  EngineEvent[\"Connected\"] = \"connected\";\r\n  EngineEvent[\"Disconnected\"] = \"disconnected\";\r\n  EngineEvent[\"Resuming\"] = \"resuming\";\r\n  EngineEvent[\"Resumed\"] = \"resumed\";\r\n  EngineEvent[\"Restarting\"] = \"restarting\";\r\n  EngineEvent[\"Restarted\"] = \"restarted\";\r\n  EngineEvent[\"SignalResumed\"] = \"signalResumed\";\r\n  EngineEvent[\"SignalRestarted\"] = \"signalRestarted\";\r\n  EngineEvent[\"Closing\"] = \"closing\";\r\n  EngineEvent[\"MediaTrackAdded\"] = \"mediaTrackAdded\";\r\n  EngineEvent[\"ActiveSpeakersUpdate\"] = \"activeSpeakersUpdate\";\r\n  EngineEvent[\"DataPacketReceived\"] = \"dataPacketReceived\";\r\n  EngineEvent[\"RTPVideoMapUpdate\"] = \"rtpVideoMapUpdate\";\r\n  EngineEvent[\"DCBufferStatusChanged\"] = \"dcBufferStatusChanged\";\r\n  EngineEvent[\"ParticipantUpdate\"] = \"participantUpdate\";\r\n  EngineEvent[\"RoomUpdate\"] = \"roomUpdate\";\r\n  EngineEvent[\"SpeakersChanged\"] = \"speakersChanged\";\r\n  EngineEvent[\"StreamStateChanged\"] = \"streamStateChanged\";\r\n  EngineEvent[\"ConnectionQualityUpdate\"] = \"connectionQualityUpdate\";\r\n  EngineEvent[\"SubscriptionError\"] = \"subscriptionError\";\r\n  EngineEvent[\"SubscriptionPermissionUpdate\"] = \"subscriptionPermissionUpdate\";\r\n  EngineEvent[\"RemoteMute\"] = \"remoteMute\";\r\n  EngineEvent[\"SubscribedQualityUpdate\"] = \"subscribedQualityUpdate\";\r\n  EngineEvent[\"LocalTrackUnpublished\"] = \"localTrackUnpublished\";\r\n  EngineEvent[\"LocalTrackSubscribed\"] = \"localTrackSubscribed\";\r\n  EngineEvent[\"Offline\"] = \"offline\";\r\n  EngineEvent[\"SignalRequestResponse\"] = \"signalRequestResponse\";\r\n  EngineEvent[\"SignalConnected\"] = \"signalConnected\";\r\n  EngineEvent[\"RoomMoved\"] = \"roomMoved\";\r\n})(EngineEvent || (EngineEvent = {}));\r\nvar TrackEvent;\r\n(function (TrackEvent) {\r\n  TrackEvent[\"Message\"] = \"message\";\r\n  TrackEvent[\"Muted\"] = \"muted\";\r\n  TrackEvent[\"Unmuted\"] = \"unmuted\";\r\n  /**\r\n   * Only fires on LocalTracks\r\n   */\r\n  TrackEvent[\"Restarted\"] = \"restarted\";\r\n  TrackEvent[\"Ended\"] = \"ended\";\r\n  TrackEvent[\"Subscribed\"] = \"subscribed\";\r\n  TrackEvent[\"Unsubscribed\"] = \"unsubscribed\";\r\n  /** @internal */\r\n  TrackEvent[\"UpdateSettings\"] = \"updateSettings\";\r\n  /** @internal */\r\n  TrackEvent[\"UpdateSubscription\"] = \"updateSubscription\";\r\n  /** @internal */\r\n  TrackEvent[\"AudioPlaybackStarted\"] = \"audioPlaybackStarted\";\r\n  /** @internal */\r\n  TrackEvent[\"AudioPlaybackFailed\"] = \"audioPlaybackFailed\";\r\n  /**\r\n   * @internal\r\n   * Only fires on LocalAudioTrack instances\r\n   */\r\n  TrackEvent[\"AudioSilenceDetected\"] = \"audioSilenceDetected\";\r\n  /** @internal */\r\n  TrackEvent[\"VisibilityChanged\"] = \"visibilityChanged\";\r\n  /** @internal */\r\n  TrackEvent[\"VideoDimensionsChanged\"] = \"videoDimensionsChanged\";\r\n  /** @internal */\r\n  TrackEvent[\"VideoPlaybackStarted\"] = \"videoPlaybackStarted\";\r\n  /** @internal */\r\n  TrackEvent[\"VideoPlaybackFailed\"] = \"videoPlaybackFailed\";\r\n  /** @internal */\r\n  TrackEvent[\"ElementAttached\"] = \"elementAttached\";\r\n  /** @internal */\r\n  TrackEvent[\"ElementDetached\"] = \"elementDetached\";\r\n  /**\r\n   * @internal\r\n   * Only fires on LocalTracks\r\n   */\r\n  TrackEvent[\"UpstreamPaused\"] = \"upstreamPaused\";\r\n  /**\r\n   * @internal\r\n   * Only fires on LocalTracks\r\n   */\r\n  TrackEvent[\"UpstreamResumed\"] = \"upstreamResumed\";\r\n  /**\r\n   * @internal\r\n   * Fires on RemoteTrackPublication\r\n   */\r\n  TrackEvent[\"SubscriptionPermissionChanged\"] = \"subscriptionPermissionChanged\";\r\n  /**\r\n   * Fires on RemoteTrackPublication\r\n   */\r\n  TrackEvent[\"SubscriptionStatusChanged\"] = \"subscriptionStatusChanged\";\r\n  /**\r\n   * Fires on RemoteTrackPublication\r\n   */\r\n  TrackEvent[\"SubscriptionFailed\"] = \"subscriptionFailed\";\r\n  /**\r\n   * @internal\r\n   */\r\n  TrackEvent[\"TrackProcessorUpdate\"] = \"trackProcessorUpdate\";\r\n  /**\r\n   * @internal\r\n   */\r\n  TrackEvent[\"AudioTrackFeatureUpdate\"] = \"audioTrackFeatureUpdate\";\r\n  /**\r\n   * @beta\r\n   */\r\n  TrackEvent[\"TranscriptionReceived\"] = \"transcriptionReceived\";\r\n  /**\r\n   * @experimental\r\n   */\r\n  TrackEvent[\"TimeSyncUpdate\"] = \"timeSyncUpdate\";\r\n  /**\r\n   * @internal\r\n   */\r\n  TrackEvent[\"PreConnectBufferFlushed\"] = \"preConnectBufferFlushed\";\r\n})(TrackEvent || (TrackEvent = {}));\r\n\r\nfunction cloneDeep(value) {\r\n  if (typeof value === 'undefined') {\r\n    return value;\r\n  }\r\n  if (typeof structuredClone === 'function') {\r\n    if (typeof value === 'object' && value !== null) {\r\n      // ensure that the value is not a proxy by spreading it\r\n      return structuredClone(Object.assign({}, value));\r\n    }\r\n    return structuredClone(value);\r\n  } else {\r\n    return JSON.parse(JSON.stringify(value));\r\n  }\r\n}\r\n\r\n// tiny, simplified version of https://github.com/lancedikson/bowser/blob/master/src/parser-browsers.js\r\n// reduced to only differentiate Chrome(ium) based browsers / Firefox / Safari\r\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\r\nlet browserDetails;\r\n/**\r\n * @internal\r\n */\r\nfunction getBrowser(userAgent) {\r\n  let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n  if (typeof userAgent === 'undefined' && typeof navigator === 'undefined') {\r\n    return;\r\n  }\r\n  const ua = (userAgent !== null && userAgent !== void 0 ? userAgent : navigator.userAgent).toLowerCase();\r\n  if (browserDetails === undefined || force) {\r\n    const browser = browsersList.find(_ref => {\r\n      let {\r\n        test\r\n      } = _ref;\r\n      return test.test(ua);\r\n    });\r\n    browserDetails = browser === null || browser === void 0 ? void 0 : browser.describe(ua);\r\n  }\r\n  return browserDetails;\r\n}\r\nconst browsersList = [{\r\n  test: /firefox|iceweasel|fxios/i,\r\n  describe(ua) {\r\n    const browser = {\r\n      name: 'Firefox',\r\n      version: getMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua),\r\n      os: ua.toLowerCase().includes('fxios') ? 'iOS' : undefined,\r\n      osVersion: getOSVersion(ua)\r\n    };\r\n    return browser;\r\n  }\r\n}, {\r\n  test: /chrom|crios|crmo/i,\r\n  describe(ua) {\r\n    const browser = {\r\n      name: 'Chrome',\r\n      version: getMatch(/(?:chrome|chromium|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua),\r\n      os: ua.toLowerCase().includes('crios') ? 'iOS' : undefined,\r\n      osVersion: getOSVersion(ua)\r\n    };\r\n    return browser;\r\n  }\r\n}, /* Safari */\r\n{\r\n  test: /safari|applewebkit/i,\r\n  describe(ua) {\r\n    const browser = {\r\n      name: 'Safari',\r\n      version: getMatch(commonVersionIdentifier, ua),\r\n      os: ua.includes('mobile/') ? 'iOS' : 'macOS',\r\n      osVersion: getOSVersion(ua)\r\n    };\r\n    return browser;\r\n  }\r\n}];\r\nfunction getMatch(exp, ua) {\r\n  let id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\r\n  const match = ua.match(exp);\r\n  return match && match.length >= id && match[id] || '';\r\n}\r\nfunction getOSVersion(ua) {\r\n  return ua.includes('mac os') ? getMatch(/\\(.+?(\\d+_\\d+(:?_\\d+)?)/, ua, 1).replace(/_/g, '.') : undefined;\r\n}\r\n\r\nvar version$1 = \"2.13.5\";\r\n\r\nconst version = version$1;\r\nconst protocolVersion = 16;\r\n\r\n/**\r\n * Timers that can be overridden with platform specific implementations\r\n * that ensure that they are fired. These should be used when it is critical\r\n * that the timer fires on time.\r\n */\r\nclass CriticalTimers {}\r\nCriticalTimers.setTimeout = function () {\r\n  return setTimeout(...arguments);\r\n};\r\nCriticalTimers.setInterval =\r\n// eslint-disable-next-line @typescript-eslint/no-implied-eval\r\nfunction () {\r\n  return setInterval(...arguments);\r\n};\r\nCriticalTimers.clearTimeout = function () {\r\n  return clearTimeout(...arguments);\r\n};\r\nCriticalTimers.clearInterval = function () {\r\n  return clearInterval(...arguments);\r\n};\r\n\r\nconst BACKGROUND_REACTION_DELAY = 5000;\r\n// keep old audio elements when detached, we would re-use them since on iOS\r\n// Safari tracks which audio elements have been \"blessed\" by the user.\r\nconst recycledElements = [];\r\nvar VideoQuality;\r\n(function (VideoQuality) {\r\n  VideoQuality[VideoQuality[\"LOW\"] = 0] = \"LOW\";\r\n  VideoQuality[VideoQuality[\"MEDIUM\"] = 1] = \"MEDIUM\";\r\n  VideoQuality[VideoQuality[\"HIGH\"] = 2] = \"HIGH\";\r\n})(VideoQuality || (VideoQuality = {}));\r\nclass Track extends eventsExports.EventEmitter {\r\n  constructor(mediaTrack, kind) {\r\n    let loggerOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    var _a;\r\n    super();\r\n    this.attachedElements = [];\r\n    this.isMuted = false;\r\n    /**\r\n     * indicates current state of stream, it'll indicate `paused` if the track\r\n     * has been paused by congestion controller\r\n     */\r\n    this.streamState = Track.StreamState.Active;\r\n    this.isInBackground = false;\r\n    this._currentBitrate = 0;\r\n    this.log = livekitLogger;\r\n    this.appVisibilityChangedListener = () => {\r\n      if (this.backgroundTimeout) {\r\n        clearTimeout(this.backgroundTimeout);\r\n      }\r\n      // delay app visibility update if it goes to hidden\r\n      // update immediately if it comes back to focus\r\n      if (document.visibilityState === 'hidden') {\r\n        this.backgroundTimeout = setTimeout(() => this.handleAppVisibilityChanged(), BACKGROUND_REACTION_DELAY);\r\n      } else {\r\n        this.handleAppVisibilityChanged();\r\n      }\r\n    };\r\n    this.log = getLogger((_a = loggerOptions.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.Track);\r\n    this.loggerContextCb = loggerOptions.loggerContextCb;\r\n    this.setMaxListeners(100);\r\n    this.kind = kind;\r\n    this._mediaStreamTrack = mediaTrack;\r\n    this._mediaStreamID = mediaTrack.id;\r\n    this.source = Track.Source.Unknown;\r\n  }\r\n  get logContext() {\r\n    var _a;\r\n    return Object.assign(Object.assign({}, (_a = this.loggerContextCb) === null || _a === void 0 ? void 0 : _a.call(this)), getLogContextFromTrack(this));\r\n  }\r\n  /** current receive bits per second */\r\n  get currentBitrate() {\r\n    return this._currentBitrate;\r\n  }\r\n  get mediaStreamTrack() {\r\n    return this._mediaStreamTrack;\r\n  }\r\n  /**\r\n   * @internal\r\n   * used for keep mediaStream's first id, since it's id might change\r\n   * if we disable/enable a track\r\n   */\r\n  get mediaStreamID() {\r\n    return this._mediaStreamID;\r\n  }\r\n  attach(element) {\r\n    let elementType = 'audio';\r\n    if (this.kind === Track.Kind.Video) {\r\n      elementType = 'video';\r\n    }\r\n    if (this.attachedElements.length === 0 && this.kind === Track.Kind.Video) {\r\n      this.addAppVisibilityListener();\r\n    }\r\n    if (!element) {\r\n      if (elementType === 'audio') {\r\n        recycledElements.forEach(e => {\r\n          if (e.parentElement === null && !element) {\r\n            element = e;\r\n          }\r\n        });\r\n        if (element) {\r\n          // remove it from pool\r\n          recycledElements.splice(recycledElements.indexOf(element), 1);\r\n        }\r\n      }\r\n      if (!element) {\r\n        element = document.createElement(elementType);\r\n      }\r\n    }\r\n    if (!this.attachedElements.includes(element)) {\r\n      this.attachedElements.push(element);\r\n    }\r\n    // even if we believe it's already attached to the element, it's possible\r\n    // the element's srcObject was set to something else out of band.\r\n    // we'll want to re-attach it in that case\r\n    attachToElement(this.mediaStreamTrack, element);\r\n    // handle auto playback failures\r\n    const allMediaStreamTracks = element.srcObject.getTracks();\r\n    const hasAudio = allMediaStreamTracks.some(tr => tr.kind === 'audio');\r\n    // manually play media to detect auto playback status\r\n    element.play().then(() => {\r\n      this.emit(hasAudio ? TrackEvent.AudioPlaybackStarted : TrackEvent.VideoPlaybackStarted);\r\n    }).catch(e => {\r\n      if (e.name === 'NotAllowedError') {\r\n        this.emit(hasAudio ? TrackEvent.AudioPlaybackFailed : TrackEvent.VideoPlaybackFailed, e);\r\n      } else if (e.name === 'AbortError') {\r\n        // commonly triggered by another `play` request, only log for debugging purposes\r\n        livekitLogger.debug(\"\".concat(hasAudio ? 'audio' : 'video', \" playback aborted, likely due to new play request\"));\r\n      } else {\r\n        livekitLogger.warn(\"could not playback \".concat(hasAudio ? 'audio' : 'video'), e);\r\n      }\r\n      // If audio playback isn't allowed make sure we still play back the video\r\n      if (hasAudio && element && allMediaStreamTracks.some(tr => tr.kind === 'video') && e.name === 'NotAllowedError') {\r\n        element.muted = true;\r\n        element.play().catch(() => {\r\n          // catch for Safari, exceeded options at this point to automatically play the media element\r\n        });\r\n      }\r\n    });\r\n    this.emit(TrackEvent.ElementAttached, element);\r\n    return element;\r\n  }\r\n  detach(element) {\r\n    try {\r\n      // detach from a single element\r\n      if (element) {\r\n        detachTrack(this.mediaStreamTrack, element);\r\n        const idx = this.attachedElements.indexOf(element);\r\n        if (idx >= 0) {\r\n          this.attachedElements.splice(idx, 1);\r\n          this.recycleElement(element);\r\n          this.emit(TrackEvent.ElementDetached, element);\r\n        }\r\n        return element;\r\n      }\r\n      const detached = [];\r\n      this.attachedElements.forEach(elm => {\r\n        detachTrack(this.mediaStreamTrack, elm);\r\n        detached.push(elm);\r\n        this.recycleElement(elm);\r\n        this.emit(TrackEvent.ElementDetached, elm);\r\n      });\r\n      // remove all tracks\r\n      this.attachedElements = [];\r\n      return detached;\r\n    } finally {\r\n      if (this.attachedElements.length === 0) {\r\n        this.removeAppVisibilityListener();\r\n      }\r\n    }\r\n  }\r\n  stop() {\r\n    this.stopMonitor();\r\n    this._mediaStreamTrack.stop();\r\n  }\r\n  enable() {\r\n    this._mediaStreamTrack.enabled = true;\r\n  }\r\n  disable() {\r\n    this._mediaStreamTrack.enabled = false;\r\n  }\r\n  /* @internal */\r\n  stopMonitor() {\r\n    if (this.monitorInterval) {\r\n      clearInterval(this.monitorInterval);\r\n    }\r\n    if (this.timeSyncHandle) {\r\n      cancelAnimationFrame(this.timeSyncHandle);\r\n    }\r\n  }\r\n  /** @internal */\r\n  updateLoggerOptions(loggerOptions) {\r\n    if (loggerOptions.loggerName) {\r\n      this.log = getLogger(loggerOptions.loggerName);\r\n    }\r\n    if (loggerOptions.loggerContextCb) {\r\n      this.loggerContextCb = loggerOptions.loggerContextCb;\r\n    }\r\n  }\r\n  recycleElement(element) {\r\n    if (element instanceof HTMLAudioElement) {\r\n      // we only need to re-use a single element\r\n      let shouldCache = true;\r\n      element.pause();\r\n      recycledElements.forEach(e => {\r\n        if (!e.parentElement) {\r\n          shouldCache = false;\r\n        }\r\n      });\r\n      if (shouldCache) {\r\n        recycledElements.push(element);\r\n      }\r\n    }\r\n  }\r\n  handleAppVisibilityChanged() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.isInBackground = document.visibilityState === 'hidden';\r\n      if (!this.isInBackground && this.kind === Track.Kind.Video) {\r\n        setTimeout(() => this.attachedElements.forEach(el => el.play().catch(() => {\r\n          /** catch clause necessary for Safari */\r\n        })), 0);\r\n      }\r\n    });\r\n  }\r\n  addAppVisibilityListener() {\r\n    if (isWeb()) {\r\n      this.isInBackground = document.visibilityState === 'hidden';\r\n      document.addEventListener('visibilitychange', this.appVisibilityChangedListener);\r\n    } else {\r\n      this.isInBackground = false;\r\n    }\r\n  }\r\n  removeAppVisibilityListener() {\r\n    if (isWeb()) {\r\n      document.removeEventListener('visibilitychange', this.appVisibilityChangedListener);\r\n    }\r\n  }\r\n}\r\nfunction attachToElement(track, element) {\r\n  let mediaStream;\r\n  if (element.srcObject instanceof MediaStream) {\r\n    mediaStream = element.srcObject;\r\n  } else {\r\n    mediaStream = new MediaStream();\r\n  }\r\n  // check if track matches existing track\r\n  let existingTracks;\r\n  if (track.kind === 'audio') {\r\n    existingTracks = mediaStream.getAudioTracks();\r\n  } else {\r\n    existingTracks = mediaStream.getVideoTracks();\r\n  }\r\n  if (!existingTracks.includes(track)) {\r\n    existingTracks.forEach(et => {\r\n      mediaStream.removeTrack(et);\r\n    });\r\n    mediaStream.addTrack(track);\r\n  }\r\n  if (!isSafari() || !(element instanceof HTMLVideoElement)) {\r\n    // when in low power mode (applies to both macOS and iOS), Safari will show a play/pause overlay\r\n    // when a video starts that has the `autoplay` attribute is set.\r\n    // we work around this by _not_ setting the autoplay attribute on safari and instead call `setTimeout(() => el.play(),0)` further down\r\n    element.autoplay = true;\r\n  }\r\n  // In case there are no audio tracks present on the mediastream, we set the element as muted to ensure autoplay works\r\n  element.muted = mediaStream.getAudioTracks().length === 0;\r\n  if (element instanceof HTMLVideoElement) {\r\n    element.playsInline = true;\r\n  }\r\n  // avoid flicker\r\n  if (element.srcObject !== mediaStream) {\r\n    element.srcObject = mediaStream;\r\n    if ((isSafari() || isFireFox()) && element instanceof HTMLVideoElement) {\r\n      // Firefox also has a timing issue where video doesn't actually get attached unless\r\n      // performed out-of-band\r\n      // Safari 15 has a bug where in certain layouts, video element renders\r\n      // black until the page is resized or other changes take place.\r\n      // Resetting the src triggers it to render.\r\n      // https://developer.apple.com/forums/thread/690523\r\n      setTimeout(() => {\r\n        element.srcObject = mediaStream;\r\n        // Safari 15 sometimes fails to start a video\r\n        // when the window is backgrounded before the first frame is drawn\r\n        // manually calling play here seems to fix that\r\n        element.play().catch(() => {\r\n          /** do nothing */\r\n        });\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n/** @internal */\r\nfunction detachTrack(track, element) {\r\n  if (element.srcObject instanceof MediaStream) {\r\n    const mediaStream = element.srcObject;\r\n    mediaStream.removeTrack(track);\r\n    if (mediaStream.getTracks().length > 0) {\r\n      element.srcObject = mediaStream;\r\n    } else {\r\n      element.srcObject = null;\r\n    }\r\n  }\r\n}\r\n(function (Track) {\r\n  let Kind;\r\n  (function (Kind) {\r\n    Kind[\"Audio\"] = \"audio\";\r\n    Kind[\"Video\"] = \"video\";\r\n    Kind[\"Unknown\"] = \"unknown\";\r\n  })(Kind = Track.Kind || (Track.Kind = {}));\r\n  let Source;\r\n  (function (Source) {\r\n    Source[\"Camera\"] = \"camera\";\r\n    Source[\"Microphone\"] = \"microphone\";\r\n    Source[\"ScreenShare\"] = \"screen_share\";\r\n    Source[\"ScreenShareAudio\"] = \"screen_share_audio\";\r\n    Source[\"Unknown\"] = \"unknown\";\r\n  })(Source = Track.Source || (Track.Source = {}));\r\n  let StreamState$1;\r\n  (function (StreamState) {\r\n    StreamState[\"Active\"] = \"active\";\r\n    StreamState[\"Paused\"] = \"paused\";\r\n    StreamState[\"Unknown\"] = \"unknown\";\r\n  })(StreamState$1 = Track.StreamState || (Track.StreamState = {}));\r\n  /** @internal */\r\n  function kindToProto(k) {\r\n    switch (k) {\r\n      case Kind.Audio:\r\n        return TrackType.AUDIO;\r\n      case Kind.Video:\r\n        return TrackType.VIDEO;\r\n      default:\r\n        // FIXME this was UNRECOGNIZED before\r\n        return TrackType.DATA;\r\n    }\r\n  }\r\n  Track.kindToProto = kindToProto;\r\n  /** @internal */\r\n  function kindFromProto(t) {\r\n    switch (t) {\r\n      case TrackType.AUDIO:\r\n        return Kind.Audio;\r\n      case TrackType.VIDEO:\r\n        return Kind.Video;\r\n      default:\r\n        return Kind.Unknown;\r\n    }\r\n  }\r\n  Track.kindFromProto = kindFromProto;\r\n  /** @internal */\r\n  function sourceToProto(s) {\r\n    switch (s) {\r\n      case Source.Camera:\r\n        return TrackSource.CAMERA;\r\n      case Source.Microphone:\r\n        return TrackSource.MICROPHONE;\r\n      case Source.ScreenShare:\r\n        return TrackSource.SCREEN_SHARE;\r\n      case Source.ScreenShareAudio:\r\n        return TrackSource.SCREEN_SHARE_AUDIO;\r\n      default:\r\n        return TrackSource.UNKNOWN;\r\n    }\r\n  }\r\n  Track.sourceToProto = sourceToProto;\r\n  /** @internal */\r\n  function sourceFromProto(s) {\r\n    switch (s) {\r\n      case TrackSource.CAMERA:\r\n        return Source.Camera;\r\n      case TrackSource.MICROPHONE:\r\n        return Source.Microphone;\r\n      case TrackSource.SCREEN_SHARE:\r\n        return Source.ScreenShare;\r\n      case TrackSource.SCREEN_SHARE_AUDIO:\r\n        return Source.ScreenShareAudio;\r\n      default:\r\n        return Source.Unknown;\r\n    }\r\n  }\r\n  Track.sourceFromProto = sourceFromProto;\r\n  /** @internal */\r\n  function streamStateFromProto(s) {\r\n    switch (s) {\r\n      case StreamState.ACTIVE:\r\n        return StreamState$1.Active;\r\n      case StreamState.PAUSED:\r\n        return StreamState$1.Paused;\r\n      default:\r\n        return StreamState$1.Unknown;\r\n    }\r\n  }\r\n  Track.streamStateFromProto = streamStateFromProto;\r\n})(Track || (Track = {}));\r\n\r\nclass VideoPreset {\r\n  constructor(widthOrOptions, height, maxBitrate, maxFramerate, priority) {\r\n    if (typeof widthOrOptions === 'object') {\r\n      this.width = widthOrOptions.width;\r\n      this.height = widthOrOptions.height;\r\n      this.aspectRatio = widthOrOptions.aspectRatio;\r\n      this.encoding = {\r\n        maxBitrate: widthOrOptions.maxBitrate,\r\n        maxFramerate: widthOrOptions.maxFramerate,\r\n        priority: widthOrOptions.priority\r\n      };\r\n    } else if (height !== undefined && maxBitrate !== undefined) {\r\n      this.width = widthOrOptions;\r\n      this.height = height;\r\n      this.aspectRatio = widthOrOptions / height;\r\n      this.encoding = {\r\n        maxBitrate,\r\n        maxFramerate,\r\n        priority\r\n      };\r\n    } else {\r\n      throw new TypeError('Unsupported options: provide at least width, height and maxBitrate');\r\n    }\r\n  }\r\n  get resolution() {\r\n    return {\r\n      width: this.width,\r\n      height: this.height,\r\n      frameRate: this.encoding.maxFramerate,\r\n      aspectRatio: this.aspectRatio\r\n    };\r\n  }\r\n}\r\nconst backupCodecs = ['vp8', 'h264'];\r\nconst videoCodecs = ['vp8', 'h264', 'vp9', 'av1'];\r\nfunction isBackupCodec(codec) {\r\n  return !!backupCodecs.find(backup => backup === codec);\r\n}\r\nvar BackupCodecPolicy;\r\n(function (BackupCodecPolicy) {\r\n  // codec regression is preferred, the sfu will try to regress codec if possible but not guaranteed\r\n  BackupCodecPolicy[BackupCodecPolicy[\"PREFER_REGRESSION\"] = 0] = \"PREFER_REGRESSION\";\r\n  // multi-codec simulcast, publish both primary and backup codec at the same time\r\n  BackupCodecPolicy[BackupCodecPolicy[\"SIMULCAST\"] = 1] = \"SIMULCAST\";\r\n  // always use backup codec only\r\n  BackupCodecPolicy[BackupCodecPolicy[\"REGRESSION\"] = 2] = \"REGRESSION\";\r\n})(BackupCodecPolicy || (BackupCodecPolicy = {}));\r\nvar AudioPresets;\r\n(function (AudioPresets) {\r\n  AudioPresets.telephone = {\r\n    maxBitrate: 12000\r\n  };\r\n  AudioPresets.speech = {\r\n    maxBitrate: 24000\r\n  };\r\n  AudioPresets.music = {\r\n    maxBitrate: 48000\r\n  };\r\n  AudioPresets.musicStereo = {\r\n    maxBitrate: 64000\r\n  };\r\n  AudioPresets.musicHighQuality = {\r\n    maxBitrate: 96000\r\n  };\r\n  AudioPresets.musicHighQualityStereo = {\r\n    maxBitrate: 128000\r\n  };\r\n})(AudioPresets || (AudioPresets = {}));\r\n/**\r\n * Sane presets for video resolution/encoding\r\n */\r\nconst VideoPresets = {\r\n  h90: new VideoPreset(160, 90, 90000, 20),\r\n  h180: new VideoPreset(320, 180, 160000, 20),\r\n  h216: new VideoPreset(384, 216, 180000, 20),\r\n  h360: new VideoPreset(640, 360, 450000, 20),\r\n  h540: new VideoPreset(960, 540, 800000, 25),\r\n  h720: new VideoPreset(1280, 720, 1700000, 30),\r\n  h1080: new VideoPreset(1920, 1080, 3000000, 30),\r\n  h1440: new VideoPreset(2560, 1440, 5000000, 30),\r\n  h2160: new VideoPreset(3840, 2160, 8000000, 30)\r\n};\r\n/**\r\n * Four by three presets\r\n */\r\nconst VideoPresets43 = {\r\n  h120: new VideoPreset(160, 120, 70000, 20),\r\n  h180: new VideoPreset(240, 180, 125000, 20),\r\n  h240: new VideoPreset(320, 240, 140000, 20),\r\n  h360: new VideoPreset(480, 360, 330000, 20),\r\n  h480: new VideoPreset(640, 480, 500000, 20),\r\n  h540: new VideoPreset(720, 540, 600000, 25),\r\n  h720: new VideoPreset(960, 720, 1300000, 30),\r\n  h1080: new VideoPreset(1440, 1080, 2300000, 30),\r\n  h1440: new VideoPreset(1920, 1440, 3800000, 30)\r\n};\r\nconst ScreenSharePresets = {\r\n  h360fps3: new VideoPreset(640, 360, 200000, 3, 'medium'),\r\n  h360fps15: new VideoPreset(640, 360, 400000, 15, 'medium'),\r\n  h720fps5: new VideoPreset(1280, 720, 800000, 5, 'medium'),\r\n  h720fps15: new VideoPreset(1280, 720, 1500000, 15, 'medium'),\r\n  h720fps30: new VideoPreset(1280, 720, 2000000, 30, 'medium'),\r\n  h1080fps15: new VideoPreset(1920, 1080, 2500000, 15, 'medium'),\r\n  h1080fps30: new VideoPreset(1920, 1080, 5000000, 30, 'medium'),\r\n  // original resolution, without resizing\r\n  original: new VideoPreset(0, 0, 7000000, 30, 'medium')\r\n};\r\n\r\nconst separator = '|';\r\nconst ddExtensionURI = 'https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension';\r\nfunction unpackStreamId(packed) {\r\n  const parts = packed.split(separator);\r\n  if (parts.length > 1) {\r\n    return [parts[0], packed.substr(parts[0].length + 1)];\r\n  }\r\n  return [packed, ''];\r\n}\r\nfunction sleep(duration) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    return new Promise(resolve => CriticalTimers.setTimeout(resolve, duration));\r\n  });\r\n}\r\n/** @internal */\r\nfunction supportsTransceiver() {\r\n  return 'addTransceiver' in RTCPeerConnection.prototype;\r\n}\r\n/** @internal */\r\nfunction supportsAddTrack() {\r\n  return 'addTrack' in RTCPeerConnection.prototype;\r\n}\r\nfunction supportsAdaptiveStream() {\r\n  return typeof ResizeObserver !== undefined && typeof IntersectionObserver !== undefined;\r\n}\r\nfunction supportsDynacast() {\r\n  return supportsTransceiver();\r\n}\r\nfunction supportsAV1() {\r\n  if (!('getCapabilities' in RTCRtpSender)) {\r\n    return false;\r\n  }\r\n  if (isSafari()) {\r\n    // Safari 17 on iPhone14 reports AV1 capability, but does not actually support it\r\n    return false;\r\n  }\r\n  const capabilities = RTCRtpSender.getCapabilities('video');\r\n  let hasAV1 = false;\r\n  if (capabilities) {\r\n    for (const codec of capabilities.codecs) {\r\n      if (codec.mimeType === 'video/AV1') {\r\n        hasAV1 = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return hasAV1;\r\n}\r\nfunction supportsVP9() {\r\n  if (!('getCapabilities' in RTCRtpSender)) {\r\n    return false;\r\n  }\r\n  if (isFireFox()) {\r\n    // technically speaking FireFox supports VP9, but SVC publishing is broken\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\r\n    return false;\r\n  }\r\n  if (isSafari()) {\r\n    const browser = getBrowser();\r\n    if ((browser === null || browser === void 0 ? void 0 : browser.version) && compareVersions(browser.version, '16') < 0) {\r\n      // Safari 16 and below does not support VP9\r\n      return false;\r\n    }\r\n  }\r\n  const capabilities = RTCRtpSender.getCapabilities('video');\r\n  let hasVP9 = false;\r\n  if (capabilities) {\r\n    for (const codec of capabilities.codecs) {\r\n      if (codec.mimeType === 'video/VP9') {\r\n        hasVP9 = true;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return hasVP9;\r\n}\r\nfunction isSVCCodec(codec) {\r\n  return codec === 'av1' || codec === 'vp9';\r\n}\r\nfunction supportsSetSinkId(elm) {\r\n  if (!document) {\r\n    return false;\r\n  }\r\n  if (!elm) {\r\n    elm = document.createElement('audio');\r\n  }\r\n  return 'setSinkId' in elm;\r\n}\r\nfunction isBrowserSupported() {\r\n  if (typeof RTCPeerConnection === 'undefined') {\r\n    return false;\r\n  }\r\n  return supportsTransceiver() || supportsAddTrack();\r\n}\r\nfunction isFireFox() {\r\n  var _a;\r\n  return ((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.name) === 'Firefox';\r\n}\r\nfunction isSafari() {\r\n  var _a;\r\n  return ((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.name) === 'Safari';\r\n}\r\nfunction isSafariBased() {\r\n  const b = getBrowser();\r\n  return (b === null || b === void 0 ? void 0 : b.name) === 'Safari' || (b === null || b === void 0 ? void 0 : b.os) === 'iOS';\r\n}\r\nfunction isSafari17() {\r\n  const b = getBrowser();\r\n  return (b === null || b === void 0 ? void 0 : b.name) === 'Safari' && b.version.startsWith('17.');\r\n}\r\nfunction isSafariSvcApi(browser) {\r\n  if (!browser) {\r\n    browser = getBrowser();\r\n  }\r\n  // Safari 18.4 requires legacy svc api and scaleResolutionDown to be set\r\n  return (browser === null || browser === void 0 ? void 0 : browser.name) === 'Safari' && compareVersions(browser.version, '18.3') > 0;\r\n}\r\nfunction isMobile() {\r\n  var _a, _b;\r\n  if (!isWeb()) return false;\r\n  return (\r\n    // @ts-expect-error `userAgentData` is not yet part of typescript\r\n    (_b = (_a = navigator.userAgentData) === null || _a === void 0 ? void 0 : _a.mobile) !== null && _b !== void 0 ? _b : /Tablet|iPad|Mobile|Android|BlackBerry/.test(navigator.userAgent)\r\n  );\r\n}\r\nfunction isE2EESimulcastSupported() {\r\n  const browser = getBrowser();\r\n  const supportedSafariVersion = '17.2'; // see https://bugs.webkit.org/show_bug.cgi?id=257803\r\n  if (browser) {\r\n    if (browser.name !== 'Safari' && browser.os !== 'iOS') {\r\n      return true;\r\n    } else if (browser.os === 'iOS' && browser.osVersion && compareVersions(supportedSafariVersion, browser.osVersion) >= 0) {\r\n      return true;\r\n    } else if (browser.name === 'Safari' && compareVersions(supportedSafariVersion, browser.version) >= 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\nfunction isWeb() {\r\n  return typeof document !== 'undefined';\r\n}\r\nfunction isReactNative() {\r\n  // navigator.product is deprecated on browsers, but will be set appropriately for react-native.\r\n  return navigator.product == 'ReactNative';\r\n}\r\nfunction isCloud(serverUrl) {\r\n  return serverUrl.hostname.endsWith('.livekit.cloud') || serverUrl.hostname.endsWith('.livekit.run');\r\n}\r\nfunction getLKReactNativeInfo() {\r\n  // global defined only for ReactNative.\r\n  // @ts-ignore\r\n  if (global && global.LiveKitReactNativeGlobal) {\r\n    // @ts-ignore\r\n    return global.LiveKitReactNativeGlobal;\r\n  }\r\n  return undefined;\r\n}\r\nfunction getReactNativeOs() {\r\n  if (!isReactNative()) {\r\n    return undefined;\r\n  }\r\n  let info = getLKReactNativeInfo();\r\n  if (info) {\r\n    return info.platform;\r\n  }\r\n  return undefined;\r\n}\r\nfunction getDevicePixelRatio() {\r\n  if (isWeb()) {\r\n    return window.devicePixelRatio;\r\n  }\r\n  if (isReactNative()) {\r\n    let info = getLKReactNativeInfo();\r\n    if (info) {\r\n      return info.devicePixelRatio;\r\n    }\r\n  }\r\n  return 1;\r\n}\r\nfunction compareVersions(v1, v2) {\r\n  const parts1 = v1.split('.');\r\n  const parts2 = v2.split('.');\r\n  const k = Math.min(parts1.length, parts2.length);\r\n  for (let i = 0; i < k; ++i) {\r\n    const p1 = parseInt(parts1[i], 10);\r\n    const p2 = parseInt(parts2[i], 10);\r\n    if (p1 > p2) return 1;\r\n    if (p1 < p2) return -1;\r\n    if (i === k - 1 && p1 === p2) return 0;\r\n  }\r\n  if (v1 === '' && v2 !== '') {\r\n    return -1;\r\n  } else if (v2 === '') {\r\n    return 1;\r\n  }\r\n  return parts1.length == parts2.length ? 0 : parts1.length < parts2.length ? -1 : 1;\r\n}\r\nfunction roDispatchCallback(entries) {\r\n  for (const entry of entries) {\r\n    entry.target.handleResize(entry);\r\n  }\r\n}\r\nfunction ioDispatchCallback(entries) {\r\n  for (const entry of entries) {\r\n    entry.target.handleVisibilityChanged(entry);\r\n  }\r\n}\r\nlet resizeObserver = null;\r\nconst getResizeObserver = () => {\r\n  if (!resizeObserver) resizeObserver = new ResizeObserver(roDispatchCallback);\r\n  return resizeObserver;\r\n};\r\nlet intersectionObserver = null;\r\nconst getIntersectionObserver = () => {\r\n  if (!intersectionObserver) {\r\n    intersectionObserver = new IntersectionObserver(ioDispatchCallback, {\r\n      root: null,\r\n      rootMargin: '0px'\r\n    });\r\n  }\r\n  return intersectionObserver;\r\n};\r\nfunction getClientInfo() {\r\n  var _a;\r\n  const info = new ClientInfo({\r\n    sdk: ClientInfo_SDK.JS,\r\n    protocol: protocolVersion,\r\n    version\r\n  });\r\n  if (isReactNative()) {\r\n    info.os = (_a = getReactNativeOs()) !== null && _a !== void 0 ? _a : '';\r\n  }\r\n  return info;\r\n}\r\nlet emptyVideoStreamTrack;\r\nfunction getEmptyVideoStreamTrack() {\r\n  if (!emptyVideoStreamTrack) {\r\n    emptyVideoStreamTrack = createDummyVideoStreamTrack();\r\n  }\r\n  return emptyVideoStreamTrack.clone();\r\n}\r\nfunction createDummyVideoStreamTrack() {\r\n  let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 16;\r\n  let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\r\n  let enabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n  let paintContent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\r\n  const canvas = document.createElement('canvas');\r\n  // the canvas size is set to 16 by default, because electron apps seem to fail with smaller values\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx === null || ctx === void 0 ? void 0 : ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  if (paintContent && ctx) {\r\n    ctx.beginPath();\r\n    ctx.arc(width / 2, height / 2, 50, 0, Math.PI * 2, true);\r\n    ctx.closePath();\r\n    ctx.fillStyle = 'grey';\r\n    ctx.fill();\r\n  }\r\n  // @ts-ignore\r\n  const dummyStream = canvas.captureStream();\r\n  const [dummyTrack] = dummyStream.getTracks();\r\n  if (!dummyTrack) {\r\n    throw Error('Could not get empty media stream video track');\r\n  }\r\n  dummyTrack.enabled = enabled;\r\n  return dummyTrack;\r\n}\r\nlet emptyAudioStreamTrack;\r\nfunction getEmptyAudioStreamTrack() {\r\n  if (!emptyAudioStreamTrack) {\r\n    // implementation adapted from https://blog.mozilla.org/webrtc/warm-up-with-replacetrack/\r\n    const ctx = new AudioContext();\r\n    const oscillator = ctx.createOscillator();\r\n    const gain = ctx.createGain();\r\n    gain.gain.setValueAtTime(0, 0);\r\n    const dst = ctx.createMediaStreamDestination();\r\n    oscillator.connect(gain);\r\n    gain.connect(dst);\r\n    oscillator.start();\r\n    [emptyAudioStreamTrack] = dst.stream.getAudioTracks();\r\n    if (!emptyAudioStreamTrack) {\r\n      throw Error('Could not get empty media stream audio track');\r\n    }\r\n    emptyAudioStreamTrack.enabled = false;\r\n  }\r\n  return emptyAudioStreamTrack.clone();\r\n}\r\nclass Future {\r\n  constructor(futureBase, onFinally) {\r\n    this.onFinally = onFinally;\r\n    this.promise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n      this.resolve = resolve;\r\n      this.reject = reject;\r\n      if (futureBase) {\r\n        yield futureBase(resolve, reject);\r\n      }\r\n    })).finally(() => {\r\n      var _a;\r\n      return (_a = this.onFinally) === null || _a === void 0 ? void 0 : _a.call(this);\r\n    });\r\n  }\r\n}\r\n/**\r\n * Creates and returns an analyser web audio node that is attached to the provided track.\r\n * Additionally returns a convenience method `calculateVolume` to perform instant volume readings on that track.\r\n * Call the returned `cleanup` function to close the audioContext that has been created for the instance of this helper\r\n */\r\nfunction createAudioAnalyser(track, options) {\r\n  const opts = Object.assign({\r\n    cloneTrack: false,\r\n    fftSize: 2048,\r\n    smoothingTimeConstant: 0.8,\r\n    minDecibels: -100,\r\n    maxDecibels: -80\r\n  }, options);\r\n  const audioContext = getNewAudioContext();\r\n  if (!audioContext) {\r\n    throw new Error('Audio Context not supported on this browser');\r\n  }\r\n  const streamTrack = opts.cloneTrack ? track.mediaStreamTrack.clone() : track.mediaStreamTrack;\r\n  const mediaStreamSource = audioContext.createMediaStreamSource(new MediaStream([streamTrack]));\r\n  const analyser = audioContext.createAnalyser();\r\n  analyser.minDecibels = opts.minDecibels;\r\n  analyser.maxDecibels = opts.maxDecibels;\r\n  analyser.fftSize = opts.fftSize;\r\n  analyser.smoothingTimeConstant = opts.smoothingTimeConstant;\r\n  mediaStreamSource.connect(analyser);\r\n  const dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n  /**\r\n   * Calculates the current volume of the track in the range from 0 to 1\r\n   */\r\n  const calculateVolume = () => {\r\n    analyser.getByteFrequencyData(dataArray);\r\n    let sum = 0;\r\n    for (const amplitude of dataArray) {\r\n      sum += Math.pow(amplitude / 255, 2);\r\n    }\r\n    const volume = Math.sqrt(sum / dataArray.length);\r\n    return volume;\r\n  };\r\n  const cleanup = () => __awaiter(this, void 0, void 0, function* () {\r\n    yield audioContext.close();\r\n    if (opts.cloneTrack) {\r\n      streamTrack.stop();\r\n    }\r\n  });\r\n  return {\r\n    calculateVolume,\r\n    analyser,\r\n    cleanup\r\n  };\r\n}\r\nfunction isVideoCodec(maybeCodec) {\r\n  return videoCodecs.includes(maybeCodec);\r\n}\r\nfunction unwrapConstraint(constraint) {\r\n  if (typeof constraint === 'string' || typeof constraint === 'number') {\r\n    return constraint;\r\n  }\r\n  if (Array.isArray(constraint)) {\r\n    return constraint[0];\r\n  }\r\n  if (constraint.exact) {\r\n    if (Array.isArray(constraint.exact)) {\r\n      return constraint.exact[0];\r\n    }\r\n    return constraint.exact;\r\n  }\r\n  if (constraint.ideal) {\r\n    if (Array.isArray(constraint.ideal)) {\r\n      return constraint.ideal[0];\r\n    }\r\n    return constraint.ideal;\r\n  }\r\n  throw Error('could not unwrap constraint');\r\n}\r\nfunction toWebsocketUrl(url) {\r\n  if (url.startsWith('http')) {\r\n    return url.replace(/^(http)/, 'ws');\r\n  }\r\n  return url;\r\n}\r\nfunction toHttpUrl(url) {\r\n  if (url.startsWith('ws')) {\r\n    return url.replace(/^(ws)/, 'http');\r\n  }\r\n  return url;\r\n}\r\nfunction extractTranscriptionSegments(transcription, firstReceivedTimesMap) {\r\n  return transcription.segments.map(_ref => {\r\n    let {\r\n      id,\r\n      text,\r\n      language,\r\n      startTime,\r\n      endTime,\r\n      final\r\n    } = _ref;\r\n    var _a;\r\n    const firstReceivedTime = (_a = firstReceivedTimesMap.get(id)) !== null && _a !== void 0 ? _a : Date.now();\r\n    const lastReceivedTime = Date.now();\r\n    if (final) {\r\n      firstReceivedTimesMap.delete(id);\r\n    } else {\r\n      firstReceivedTimesMap.set(id, firstReceivedTime);\r\n    }\r\n    return {\r\n      id,\r\n      text,\r\n      startTime: Number.parseInt(startTime.toString()),\r\n      endTime: Number.parseInt(endTime.toString()),\r\n      final,\r\n      language,\r\n      firstReceivedTime,\r\n      lastReceivedTime\r\n    };\r\n  });\r\n}\r\nfunction extractChatMessage(msg) {\r\n  const {\r\n    id,\r\n    timestamp,\r\n    message,\r\n    editTimestamp\r\n  } = msg;\r\n  return {\r\n    id,\r\n    timestamp: Number.parseInt(timestamp.toString()),\r\n    editTimestamp: editTimestamp ? Number.parseInt(editTimestamp.toString()) : undefined,\r\n    message\r\n  };\r\n}\r\nfunction getDisconnectReasonFromConnectionError(e) {\r\n  switch (e.reason) {\r\n    case ConnectionErrorReason.LeaveRequest:\r\n      return e.context;\r\n    case ConnectionErrorReason.Cancelled:\r\n      return DisconnectReason.CLIENT_INITIATED;\r\n    case ConnectionErrorReason.NotAllowed:\r\n      return DisconnectReason.USER_REJECTED;\r\n    case ConnectionErrorReason.ServerUnreachable:\r\n      return DisconnectReason.JOIN_FAILURE;\r\n    default:\r\n      return DisconnectReason.UNKNOWN_REASON;\r\n  }\r\n}\r\n/** convert bigints to numbers preserving undefined values */\r\nfunction bigIntToNumber(value) {\r\n  return value !== undefined ? Number(value) : undefined;\r\n}\r\n/** convert numbers to bigints preserving undefined values */\r\nfunction numberToBigInt(value) {\r\n  return value !== undefined ? BigInt(value) : undefined;\r\n}\r\nfunction isLocalTrack(track) {\r\n  return !!track && !(track instanceof MediaStreamTrack) && track.isLocal;\r\n}\r\nfunction isAudioTrack(track) {\r\n  return !!track && track.kind == Track.Kind.Audio;\r\n}\r\nfunction isVideoTrack(track) {\r\n  return !!track && track.kind == Track.Kind.Video;\r\n}\r\nfunction isLocalVideoTrack(track) {\r\n  return isLocalTrack(track) && isVideoTrack(track);\r\n}\r\nfunction isLocalAudioTrack(track) {\r\n  return isLocalTrack(track) && isAudioTrack(track);\r\n}\r\nfunction isRemoteTrack(track) {\r\n  return !!track && !track.isLocal;\r\n}\r\nfunction isRemotePub(pub) {\r\n  return !!pub && !pub.isLocal;\r\n}\r\nfunction isRemoteVideoTrack(track) {\r\n  return isRemoteTrack(track) && isVideoTrack(track);\r\n}\r\nfunction isLocalParticipant(p) {\r\n  return p.isLocal;\r\n}\r\nfunction isRemoteParticipant(p) {\r\n  return !p.isLocal;\r\n}\r\nfunction splitUtf8(s, n) {\r\n  // adapted from https://stackoverflow.com/a/6043797\r\n  const result = [];\r\n  let encoded = new TextEncoder().encode(s);\r\n  while (encoded.length > n) {\r\n    let k = n;\r\n    while (k > 0) {\r\n      const byte = encoded[k];\r\n      if (byte !== undefined && (byte & 0xc0) !== 0x80) {\r\n        break;\r\n      }\r\n      k--;\r\n    }\r\n    result.push(encoded.slice(0, k));\r\n    encoded = encoded.slice(k);\r\n  }\r\n  if (encoded.length > 0) {\r\n    result.push(encoded);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction mergeDefaultOptions(options, audioDefaults, videoDefaults) {\r\n  var _a, _b;\r\n  var _c, _d;\r\n  const {\r\n    optionsWithoutProcessor,\r\n    audioProcessor,\r\n    videoProcessor\r\n  } = extractProcessorsFromOptions(options !== null && options !== void 0 ? options : {});\r\n  const defaultAudioProcessor = audioDefaults === null || audioDefaults === void 0 ? void 0 : audioDefaults.processor;\r\n  const defaultVideoProcessor = videoDefaults === null || videoDefaults === void 0 ? void 0 : videoDefaults.processor;\r\n  const clonedOptions = optionsWithoutProcessor !== null && optionsWithoutProcessor !== void 0 ? optionsWithoutProcessor : {};\r\n  if (clonedOptions.audio === true) clonedOptions.audio = {};\r\n  if (clonedOptions.video === true) clonedOptions.video = {};\r\n  // use defaults\r\n  if (clonedOptions.audio) {\r\n    mergeObjectWithoutOverwriting(clonedOptions.audio, audioDefaults);\r\n    (_a = (_c = clonedOptions.audio).deviceId) !== null && _a !== void 0 ? _a : _c.deviceId = {\r\n      ideal: 'default'\r\n    };\r\n    if (audioProcessor || defaultAudioProcessor) {\r\n      clonedOptions.audio.processor = audioProcessor !== null && audioProcessor !== void 0 ? audioProcessor : defaultAudioProcessor;\r\n    }\r\n  }\r\n  if (clonedOptions.video) {\r\n    mergeObjectWithoutOverwriting(clonedOptions.video, videoDefaults);\r\n    (_b = (_d = clonedOptions.video).deviceId) !== null && _b !== void 0 ? _b : _d.deviceId = {\r\n      ideal: 'default'\r\n    };\r\n    if (videoProcessor || defaultVideoProcessor) {\r\n      clonedOptions.video.processor = videoProcessor !== null && videoProcessor !== void 0 ? videoProcessor : defaultVideoProcessor;\r\n    }\r\n  }\r\n  return clonedOptions;\r\n}\r\nfunction mergeObjectWithoutOverwriting(mainObject, objectToMerge) {\r\n  Object.keys(objectToMerge).forEach(key => {\r\n    if (mainObject[key] === undefined) mainObject[key] = objectToMerge[key];\r\n  });\r\n  return mainObject;\r\n}\r\nfunction constraintsForOptions(options) {\r\n  var _a, _b;\r\n  var _c, _d;\r\n  const constraints = {};\r\n  if (options.video) {\r\n    // default video options\r\n    if (typeof options.video === 'object') {\r\n      const videoOptions = {};\r\n      const target = videoOptions;\r\n      const source = options.video;\r\n      Object.keys(source).forEach(key => {\r\n        switch (key) {\r\n          case 'resolution':\r\n            // flatten VideoResolution fields\r\n            mergeObjectWithoutOverwriting(target, source.resolution);\r\n            break;\r\n          default:\r\n            target[key] = source[key];\r\n        }\r\n      });\r\n      constraints.video = videoOptions;\r\n      (_a = (_c = constraints.video).deviceId) !== null && _a !== void 0 ? _a : _c.deviceId = {\r\n        ideal: 'default'\r\n      };\r\n    } else {\r\n      constraints.video = options.video ? {\r\n        deviceId: {\r\n          ideal: 'default'\r\n        }\r\n      } : false;\r\n    }\r\n  } else {\r\n    constraints.video = false;\r\n  }\r\n  if (options.audio) {\r\n    if (typeof options.audio === 'object') {\r\n      constraints.audio = options.audio;\r\n      (_b = (_d = constraints.audio).deviceId) !== null && _b !== void 0 ? _b : _d.deviceId = {\r\n        ideal: 'default'\r\n      };\r\n    } else {\r\n      constraints.audio = {\r\n        deviceId: {\r\n          ideal: 'default'\r\n        }\r\n      };\r\n    }\r\n  } else {\r\n    constraints.audio = false;\r\n  }\r\n  return constraints;\r\n}\r\n/**\r\n * This function detects silence on a given [[Track]] instance.\r\n * Returns true if the track seems to be entirely silent.\r\n */\r\nfunction detectSilence(track_1) {\r\n  return __awaiter(this, arguments, void 0, function (track) {\r\n    let timeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\r\n    return function* () {\r\n      const ctx = getNewAudioContext();\r\n      if (ctx) {\r\n        const analyser = ctx.createAnalyser();\r\n        analyser.fftSize = 2048;\r\n        const bufferLength = analyser.frequencyBinCount;\r\n        const dataArray = new Uint8Array(bufferLength);\r\n        const source = ctx.createMediaStreamSource(new MediaStream([track.mediaStreamTrack]));\r\n        source.connect(analyser);\r\n        yield sleep(timeOffset);\r\n        analyser.getByteTimeDomainData(dataArray);\r\n        const someNoise = dataArray.some(sample => sample !== 128 && sample !== 0);\r\n        ctx.close();\r\n        return !someNoise;\r\n      }\r\n      return false;\r\n    }();\r\n  });\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction getNewAudioContext() {\r\n  var _a;\r\n  const AudioContext =\r\n  // @ts-ignore\r\n  typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\r\n  if (AudioContext) {\r\n    const audioContext = new AudioContext({\r\n      latencyHint: 'interactive'\r\n    });\r\n    // If the audio context is suspended, we need to resume it when the user clicks on the page\r\n    if (audioContext.state === 'suspended' && typeof window !== 'undefined' && ((_a = window.document) === null || _a === void 0 ? void 0 : _a.body)) {\r\n      const handleResume = () => __awaiter(this, void 0, void 0, function* () {\r\n        var _a;\r\n        try {\r\n          if (audioContext.state === 'suspended') {\r\n            yield audioContext.resume();\r\n          }\r\n        } catch (e) {\r\n          console.warn('Error trying to auto-resume audio context', e);\r\n        }\r\n        (_a = window.document.body) === null || _a === void 0 ? void 0 : _a.removeEventListener('click', handleResume);\r\n      });\r\n      window.document.body.addEventListener('click', handleResume);\r\n    }\r\n    return audioContext;\r\n  }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction kindToSource(kind) {\r\n  if (kind === 'audioinput') {\r\n    return Track.Source.Microphone;\r\n  } else if (kind === 'videoinput') {\r\n    return Track.Source.Camera;\r\n  } else {\r\n    return Track.Source.Unknown;\r\n  }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction sourceToKind(source) {\r\n  if (source === Track.Source.Microphone) {\r\n    return 'audioinput';\r\n  } else if (source === Track.Source.Camera) {\r\n    return 'videoinput';\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction screenCaptureToDisplayMediaStreamOptions(options) {\r\n  var _a, _b;\r\n  let videoConstraints = (_a = options.video) !== null && _a !== void 0 ? _a : true;\r\n  // treat 0 as uncapped\r\n  if (options.resolution && options.resolution.width > 0 && options.resolution.height > 0) {\r\n    videoConstraints = typeof videoConstraints === 'boolean' ? {} : videoConstraints;\r\n    if (isSafari()) {\r\n      videoConstraints = Object.assign(Object.assign({}, videoConstraints), {\r\n        width: {\r\n          max: options.resolution.width\r\n        },\r\n        height: {\r\n          max: options.resolution.height\r\n        },\r\n        frameRate: options.resolution.frameRate\r\n      });\r\n    } else {\r\n      videoConstraints = Object.assign(Object.assign({}, videoConstraints), {\r\n        width: {\r\n          ideal: options.resolution.width\r\n        },\r\n        height: {\r\n          ideal: options.resolution.height\r\n        },\r\n        frameRate: options.resolution.frameRate\r\n      });\r\n    }\r\n  }\r\n  return {\r\n    audio: (_b = options.audio) !== null && _b !== void 0 ? _b : false,\r\n    video: videoConstraints,\r\n    // @ts-expect-error support for experimental display media features\r\n    controller: options.controller,\r\n    selfBrowserSurface: options.selfBrowserSurface,\r\n    surfaceSwitching: options.surfaceSwitching,\r\n    systemAudio: options.systemAudio,\r\n    preferCurrentTab: options.preferCurrentTab\r\n  };\r\n}\r\nfunction mimeTypeToVideoCodecString(mimeType) {\r\n  return mimeType.split('/')[1].toLowerCase();\r\n}\r\nfunction getTrackPublicationInfo(tracks) {\r\n  const infos = [];\r\n  tracks.forEach(track => {\r\n    if (track.track !== undefined) {\r\n      infos.push(new TrackPublishedResponse({\r\n        cid: track.track.mediaStreamID,\r\n        track: track.trackInfo\r\n      }));\r\n    }\r\n  });\r\n  return infos;\r\n}\r\nfunction getLogContextFromTrack(track) {\r\n  if ('mediaStreamTrack' in track) {\r\n    return {\r\n      trackID: track.sid,\r\n      source: track.source,\r\n      muted: track.isMuted,\r\n      enabled: track.mediaStreamTrack.enabled,\r\n      kind: track.kind,\r\n      streamID: track.mediaStreamID,\r\n      streamTrackID: track.mediaStreamTrack.id\r\n    };\r\n  } else {\r\n    return {\r\n      trackID: track.trackSid,\r\n      enabled: track.isEnabled,\r\n      muted: track.isMuted,\r\n      trackInfo: Object.assign({\r\n        mimeType: track.mimeType,\r\n        name: track.trackName,\r\n        encrypted: track.isEncrypted,\r\n        kind: track.kind,\r\n        source: track.source\r\n      }, track.track ? getLogContextFromTrack(track.track) : {})\r\n    };\r\n  }\r\n}\r\nfunction supportsSynchronizationSources() {\r\n  return typeof RTCRtpReceiver !== 'undefined' && 'getSynchronizationSources' in RTCRtpReceiver;\r\n}\r\nfunction diffAttributes(oldValues, newValues) {\r\n  var _a;\r\n  if (oldValues === undefined) {\r\n    oldValues = {};\r\n  }\r\n  if (newValues === undefined) {\r\n    newValues = {};\r\n  }\r\n  const allKeys = [...Object.keys(newValues), ...Object.keys(oldValues)];\r\n  const diff = {};\r\n  for (const key of allKeys) {\r\n    if (oldValues[key] !== newValues[key]) {\r\n      diff[key] = (_a = newValues[key]) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n  }\r\n  return diff;\r\n}\r\n/** @internal */\r\nfunction extractProcessorsFromOptions(options) {\r\n  const newOptions = Object.assign({}, options);\r\n  let audioProcessor;\r\n  let videoProcessor;\r\n  if (typeof newOptions.audio === 'object' && newOptions.audio.processor) {\r\n    audioProcessor = newOptions.audio.processor;\r\n    newOptions.audio = Object.assign(Object.assign({}, newOptions.audio), {\r\n      processor: undefined\r\n    });\r\n  }\r\n  if (typeof newOptions.video === 'object' && newOptions.video.processor) {\r\n    videoProcessor = newOptions.video.processor;\r\n    newOptions.video = Object.assign(Object.assign({}, newOptions.video), {\r\n      processor: undefined\r\n    });\r\n  }\r\n  return {\r\n    audioProcessor,\r\n    videoProcessor,\r\n    optionsWithoutProcessor: cloneDeep(newOptions)\r\n  };\r\n}\r\nfunction getTrackSourceFromProto(source) {\r\n  switch (source) {\r\n    case TrackSource.CAMERA:\r\n      return Track.Source.Camera;\r\n    case TrackSource.MICROPHONE:\r\n      return Track.Source.Microphone;\r\n    case TrackSource.SCREEN_SHARE:\r\n      return Track.Source.ScreenShare;\r\n    case TrackSource.SCREEN_SHARE_AUDIO:\r\n      return Track.Source.ScreenShareAudio;\r\n    default:\r\n      return Track.Source.Unknown;\r\n  }\r\n}\r\n\r\n/**\r\n * @experimental\r\n */\r\nclass E2EEManager extends eventsExports.EventEmitter {\r\n  constructor(options) {\r\n    super();\r\n    this.onWorkerMessage = ev => {\r\n      var _a, _b;\r\n      const {\r\n        kind,\r\n        data\r\n      } = ev.data;\r\n      switch (kind) {\r\n        case 'error':\r\n          livekitLogger.error(data.error.message);\r\n          this.emit(EncryptionEvent.EncryptionError, data.error);\r\n          break;\r\n        case 'initAck':\r\n          if (data.enabled) {\r\n            this.keyProvider.getKeys().forEach(keyInfo => {\r\n              this.postKey(keyInfo);\r\n            });\r\n          }\r\n          break;\r\n        case 'enable':\r\n          if (data.enabled) {\r\n            this.keyProvider.getKeys().forEach(keyInfo => {\r\n              this.postKey(keyInfo);\r\n            });\r\n          }\r\n          if (this.encryptionEnabled !== data.enabled && data.participantIdentity === ((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity)) {\r\n            this.emit(EncryptionEvent.ParticipantEncryptionStatusChanged, data.enabled, this.room.localParticipant);\r\n            this.encryptionEnabled = data.enabled;\r\n          } else if (data.participantIdentity) {\r\n            const participant = (_b = this.room) === null || _b === void 0 ? void 0 : _b.getParticipantByIdentity(data.participantIdentity);\r\n            if (!participant) {\r\n              throw TypeError(\"couldn't set encryption status, participant not found\".concat(data.participantIdentity));\r\n            }\r\n            this.emit(EncryptionEvent.ParticipantEncryptionStatusChanged, data.enabled, participant);\r\n          }\r\n          break;\r\n        case 'ratchetKey':\r\n          this.keyProvider.emit(KeyProviderEvent.KeyRatcheted, data.ratchetResult, data.participantIdentity, data.keyIndex);\r\n          break;\r\n      }\r\n    };\r\n    this.onWorkerError = ev => {\r\n      livekitLogger.error('e2ee worker encountered an error:', {\r\n        error: ev.error\r\n      });\r\n      this.emit(EncryptionEvent.EncryptionError, ev.error);\r\n    };\r\n    this.keyProvider = options.keyProvider;\r\n    this.worker = options.worker;\r\n    this.encryptionEnabled = false;\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  setup(room) {\r\n    if (!isE2EESupported()) {\r\n      throw new DeviceUnsupportedError('tried to setup end-to-end encryption on an unsupported browser');\r\n    }\r\n    livekitLogger.info('setting up e2ee');\r\n    if (room !== this.room) {\r\n      this.room = room;\r\n      this.setupEventListeners(room, this.keyProvider);\r\n      // this.worker = new Worker('');\r\n      const msg = {\r\n        kind: 'init',\r\n        data: {\r\n          keyProviderOptions: this.keyProvider.getOptions(),\r\n          loglevel: workerLogger.getLevel()\r\n        }\r\n      };\r\n      if (this.worker) {\r\n        livekitLogger.info(\"initializing worker\", {\r\n          worker: this.worker\r\n        });\r\n        this.worker.onmessage = this.onWorkerMessage;\r\n        this.worker.onerror = this.onWorkerError;\r\n        this.worker.postMessage(msg);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  setParticipantCryptorEnabled(enabled, participantIdentity) {\r\n    livekitLogger.debug(\"set e2ee to \".concat(enabled, \" for participant \").concat(participantIdentity));\r\n    this.postEnable(enabled, participantIdentity);\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  setSifTrailer(trailer) {\r\n    if (!trailer || trailer.length === 0) {\r\n      livekitLogger.warn(\"ignoring server sent trailer as it's empty\");\r\n    } else {\r\n      this.postSifTrailer(trailer);\r\n    }\r\n  }\r\n  setupEngine(engine) {\r\n    engine.on(EngineEvent.RTPVideoMapUpdate, rtpMap => {\r\n      this.postRTPMap(rtpMap);\r\n    });\r\n  }\r\n  setupEventListeners(room, keyProvider) {\r\n    room.on(RoomEvent.TrackPublished, (pub, participant) => this.setParticipantCryptorEnabled(pub.trackInfo.encryption !== Encryption_Type.NONE, participant.identity));\r\n    room.on(RoomEvent.ConnectionStateChanged, state => {\r\n      if (state === ConnectionState.Connected) {\r\n        room.remoteParticipants.forEach(participant => {\r\n          participant.trackPublications.forEach(pub => {\r\n            this.setParticipantCryptorEnabled(pub.trackInfo.encryption !== Encryption_Type.NONE, participant.identity);\r\n          });\r\n        });\r\n      }\r\n    }).on(RoomEvent.TrackUnsubscribed, (track, _, participant) => {\r\n      var _a;\r\n      const msg = {\r\n        kind: 'removeTransform',\r\n        data: {\r\n          participantIdentity: participant.identity,\r\n          trackId: track.mediaStreamID\r\n        }\r\n      };\r\n      (_a = this.worker) === null || _a === void 0 ? void 0 : _a.postMessage(msg);\r\n    }).on(RoomEvent.TrackSubscribed, (track, pub, participant) => {\r\n      this.setupE2EEReceiver(track, participant.identity, pub.trackInfo);\r\n    }).on(RoomEvent.SignalConnected, () => {\r\n      if (!this.room) {\r\n        throw new TypeError(\"expected room to be present on signal connect\");\r\n      }\r\n      keyProvider.getKeys().forEach(keyInfo => {\r\n        this.postKey(keyInfo);\r\n      });\r\n      this.setParticipantCryptorEnabled(this.room.localParticipant.isE2EEEnabled, this.room.localParticipant.identity);\r\n    });\r\n    room.localParticipant.on(ParticipantEvent.LocalTrackPublished, publication => __awaiter(this, void 0, void 0, function* () {\r\n      this.setupE2EESender(publication.track, publication.track.sender);\r\n    }));\r\n    keyProvider.on(KeyProviderEvent.SetKey, keyInfo => this.postKey(keyInfo)).on(KeyProviderEvent.RatchetRequest, (participantId, keyIndex) => this.postRatchetRequest(participantId, keyIndex));\r\n  }\r\n  postRatchetRequest(participantIdentity, keyIndex) {\r\n    if (!this.worker) {\r\n      throw Error('could not ratchet key, worker is missing');\r\n    }\r\n    const msg = {\r\n      kind: 'ratchetRequest',\r\n      data: {\r\n        participantIdentity: participantIdentity,\r\n        keyIndex\r\n      }\r\n    };\r\n    this.worker.postMessage(msg);\r\n  }\r\n  postKey(_ref) {\r\n    let {\r\n      key,\r\n      participantIdentity,\r\n      keyIndex\r\n    } = _ref;\r\n    var _a;\r\n    if (!this.worker) {\r\n      throw Error('could not set key, worker is missing');\r\n    }\r\n    const msg = {\r\n      kind: 'setKey',\r\n      data: {\r\n        participantIdentity: participantIdentity,\r\n        isPublisher: participantIdentity === ((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity),\r\n        key,\r\n        keyIndex\r\n      }\r\n    };\r\n    this.worker.postMessage(msg);\r\n  }\r\n  postEnable(enabled, participantIdentity) {\r\n    if (this.worker) {\r\n      const enableMsg = {\r\n        kind: 'enable',\r\n        data: {\r\n          enabled,\r\n          participantIdentity\r\n        }\r\n      };\r\n      this.worker.postMessage(enableMsg);\r\n    } else {\r\n      throw new ReferenceError('failed to enable e2ee, worker is not ready');\r\n    }\r\n  }\r\n  postRTPMap(map) {\r\n    var _a;\r\n    if (!this.worker) {\r\n      throw TypeError('could not post rtp map, worker is missing');\r\n    }\r\n    if (!((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity)) {\r\n      throw TypeError('could not post rtp map, local participant identity is missing');\r\n    }\r\n    const msg = {\r\n      kind: 'setRTPMap',\r\n      data: {\r\n        map,\r\n        participantIdentity: this.room.localParticipant.identity\r\n      }\r\n    };\r\n    this.worker.postMessage(msg);\r\n  }\r\n  postSifTrailer(trailer) {\r\n    if (!this.worker) {\r\n      throw Error('could not post SIF trailer, worker is missing');\r\n    }\r\n    const msg = {\r\n      kind: 'setSifTrailer',\r\n      data: {\r\n        trailer\r\n      }\r\n    };\r\n    this.worker.postMessage(msg);\r\n  }\r\n  setupE2EEReceiver(track, remoteId, trackInfo) {\r\n    if (!track.receiver) {\r\n      return;\r\n    }\r\n    if (!(trackInfo === null || trackInfo === void 0 ? void 0 : trackInfo.mimeType) || trackInfo.mimeType === '') {\r\n      throw new TypeError('MimeType missing from trackInfo, cannot set up E2EE cryptor');\r\n    }\r\n    this.handleReceiver(track.receiver, track.mediaStreamID, remoteId, track.kind === 'video' ? mimeTypeToVideoCodecString(trackInfo.mimeType) : undefined);\r\n  }\r\n  setupE2EESender(track, sender) {\r\n    if (!isLocalTrack(track) || !sender) {\r\n      if (!sender) livekitLogger.warn('early return because sender is not ready');\r\n      return;\r\n    }\r\n    this.handleSender(sender, track.mediaStreamID, undefined);\r\n  }\r\n  /**\r\n   * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\r\n   * a frame decoder.\r\n   *\r\n   */\r\n  handleReceiver(receiver, trackId, participantIdentity, codec) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.worker) {\r\n        return;\r\n      }\r\n      if (isScriptTransformSupported()) {\r\n        const options = {\r\n          kind: 'decode',\r\n          participantIdentity,\r\n          trackId,\r\n          codec\r\n        };\r\n        // @ts-ignore\r\n        receiver.transform = new RTCRtpScriptTransform(this.worker, options);\r\n      } else {\r\n        if (E2EE_FLAG in receiver && codec) {\r\n          // only update codec\r\n          const msg = {\r\n            kind: 'updateCodec',\r\n            data: {\r\n              trackId,\r\n              codec,\r\n              participantIdentity: participantIdentity\r\n            }\r\n          };\r\n          this.worker.postMessage(msg);\r\n          return;\r\n        }\r\n        // @ts-ignore\r\n        let writable = receiver.writableStream;\r\n        // @ts-ignore\r\n        let readable = receiver.readableStream;\r\n        if (!writable || !readable) {\r\n          // @ts-ignore\r\n          const receiverStreams = receiver.createEncodedStreams();\r\n          // @ts-ignore\r\n          receiver.writableStream = receiverStreams.writable;\r\n          writable = receiverStreams.writable;\r\n          // @ts-ignore\r\n          receiver.readableStream = receiverStreams.readable;\r\n          readable = receiverStreams.readable;\r\n        }\r\n        const msg = {\r\n          kind: 'decode',\r\n          data: {\r\n            readableStream: readable,\r\n            writableStream: writable,\r\n            trackId: trackId,\r\n            codec,\r\n            participantIdentity: participantIdentity\r\n          }\r\n        };\r\n        this.worker.postMessage(msg, [readable, writable]);\r\n      }\r\n      // @ts-ignore\r\n      receiver[E2EE_FLAG] = true;\r\n    });\r\n  }\r\n  /**\r\n   * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\r\n   * a frame encoder.\r\n   *\r\n   */\r\n  handleSender(sender, trackId, codec) {\r\n    var _a;\r\n    if (E2EE_FLAG in sender || !this.worker) {\r\n      return;\r\n    }\r\n    if (!((_a = this.room) === null || _a === void 0 ? void 0 : _a.localParticipant.identity) || this.room.localParticipant.identity === '') {\r\n      throw TypeError('local identity needs to be known in order to set up encrypted sender');\r\n    }\r\n    if (isScriptTransformSupported()) {\r\n      livekitLogger.info('initialize script transform');\r\n      const options = {\r\n        kind: 'encode',\r\n        participantIdentity: this.room.localParticipant.identity,\r\n        trackId,\r\n        codec\r\n      };\r\n      // @ts-ignore\r\n      sender.transform = new RTCRtpScriptTransform(this.worker, options);\r\n    } else {\r\n      livekitLogger.info('initialize encoded streams');\r\n      // @ts-ignore\r\n      const senderStreams = sender.createEncodedStreams();\r\n      const msg = {\r\n        kind: 'encode',\r\n        data: {\r\n          readableStream: senderStreams.readable,\r\n          writableStream: senderStreams.writable,\r\n          codec,\r\n          trackId,\r\n          participantIdentity: this.room.localParticipant.identity\r\n        }\r\n      };\r\n      this.worker.postMessage(msg, [senderStreams.readable, senderStreams.writable]);\r\n    }\r\n    // @ts-ignore\r\n    sender[E2EE_FLAG] = true;\r\n  }\r\n}\r\n\r\nconst defaultId = 'default';\r\nclass DeviceManager {\r\n  constructor() {\r\n    this._previousDevices = [];\r\n  }\r\n  static getInstance() {\r\n    if (this.instance === undefined) {\r\n      this.instance = new DeviceManager();\r\n    }\r\n    return this.instance;\r\n  }\r\n  get previousDevices() {\r\n    return this._previousDevices;\r\n  }\r\n  getDevices(kind_1) {\r\n    return __awaiter(this, arguments, void 0, function (kind) {\r\n      var _this = this;\r\n      let requestPermissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n      return function* () {\r\n        var _a;\r\n        if (((_a = DeviceManager.userMediaPromiseMap) === null || _a === void 0 ? void 0 : _a.size) > 0) {\r\n          livekitLogger.debug('awaiting getUserMedia promise');\r\n          try {\r\n            if (kind) {\r\n              yield DeviceManager.userMediaPromiseMap.get(kind);\r\n            } else {\r\n              yield Promise.all(DeviceManager.userMediaPromiseMap.values());\r\n            }\r\n          } catch (e) {\r\n            livekitLogger.warn('error waiting for media permissons');\r\n          }\r\n        }\r\n        let devices = yield navigator.mediaDevices.enumerateDevices();\r\n        if (requestPermissions &&\r\n        // for safari we need to skip this check, as otherwise it will re-acquire user media and fail on iOS https://bugs.webkit.org/show_bug.cgi?id=179363\r\n        !(isSafari() && _this.hasDeviceInUse(kind))) {\r\n          const isDummyDeviceOrEmpty = devices.filter(d => d.kind === kind).length === 0 || devices.some(device => {\r\n            const noLabel = device.label === '';\r\n            const isRelevant = kind ? device.kind === kind : true;\r\n            return noLabel && isRelevant;\r\n          });\r\n          if (isDummyDeviceOrEmpty) {\r\n            const permissionsToAcquire = {\r\n              video: kind !== 'audioinput' && kind !== 'audiooutput',\r\n              audio: kind !== 'videoinput' && {\r\n                deviceId: {\r\n                  ideal: 'default'\r\n                }\r\n              }\r\n            };\r\n            const stream = yield navigator.mediaDevices.getUserMedia(permissionsToAcquire);\r\n            devices = yield navigator.mediaDevices.enumerateDevices();\r\n            stream.getTracks().forEach(track => {\r\n              track.stop();\r\n            });\r\n          }\r\n        }\r\n        _this._previousDevices = devices;\r\n        if (kind) {\r\n          devices = devices.filter(device => device.kind === kind);\r\n        }\r\n        return devices;\r\n      }();\r\n    });\r\n  }\r\n  normalizeDeviceId(kind, deviceId, groupId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (deviceId !== defaultId) {\r\n        return deviceId;\r\n      }\r\n      // resolve actual device id if it's 'default': Chrome returns it when no\r\n      // device has been chosen\r\n      const devices = yield this.getDevices(kind);\r\n      const defaultDevice = devices.find(d => d.deviceId === defaultId);\r\n      if (!defaultDevice) {\r\n        livekitLogger.warn('could not reliably determine default device');\r\n        return undefined;\r\n      }\r\n      const device = devices.find(d => d.deviceId !== defaultId && d.groupId === (groupId !== null && groupId !== void 0 ? groupId : defaultDevice.groupId));\r\n      if (!device) {\r\n        livekitLogger.warn('could not reliably determine default device');\r\n        return undefined;\r\n      }\r\n      return device === null || device === void 0 ? void 0 : device.deviceId;\r\n    });\r\n  }\r\n  hasDeviceInUse(kind) {\r\n    return kind ? DeviceManager.userMediaPromiseMap.has(kind) : DeviceManager.userMediaPromiseMap.size > 0;\r\n  }\r\n}\r\nDeviceManager.mediaDeviceKinds = ['audioinput', 'audiooutput', 'videoinput'];\r\nDeviceManager.userMediaPromiseMap = new Map();\r\n\r\nvar QueueTaskStatus;\r\n(function (QueueTaskStatus) {\r\n  QueueTaskStatus[QueueTaskStatus[\"WAITING\"] = 0] = \"WAITING\";\r\n  QueueTaskStatus[QueueTaskStatus[\"RUNNING\"] = 1] = \"RUNNING\";\r\n  QueueTaskStatus[QueueTaskStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\r\n})(QueueTaskStatus || (QueueTaskStatus = {}));\r\nclass AsyncQueue {\r\n  constructor() {\r\n    this.pendingTasks = new Map();\r\n    this.taskMutex = new _();\r\n    this.nextTaskIndex = 0;\r\n  }\r\n  run(task) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const taskInfo = {\r\n        id: this.nextTaskIndex++,\r\n        enqueuedAt: Date.now(),\r\n        status: QueueTaskStatus.WAITING\r\n      };\r\n      this.pendingTasks.set(taskInfo.id, taskInfo);\r\n      const unlock = yield this.taskMutex.lock();\r\n      try {\r\n        taskInfo.executedAt = Date.now();\r\n        taskInfo.status = QueueTaskStatus.RUNNING;\r\n        return yield task();\r\n      } finally {\r\n        taskInfo.status = QueueTaskStatus.COMPLETED;\r\n        this.pendingTasks.delete(taskInfo.id);\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  flush() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.run(() => __awaiter(this, void 0, void 0, function* () {}));\r\n    });\r\n  }\r\n  snapshot() {\r\n    return Array.from(this.pendingTasks.values());\r\n  }\r\n}\r\n\r\nfunction createRtcUrl(url, searchParams) {\r\n  const urlObj = new URL(toWebsocketUrl(url));\r\n  searchParams.forEach((value, key) => {\r\n    urlObj.searchParams.set(key, value);\r\n  });\r\n  return appendUrlPath(urlObj, 'rtc');\r\n}\r\nfunction createValidateUrl(rtcWsUrl) {\r\n  const urlObj = new URL(toHttpUrl(rtcWsUrl));\r\n  return appendUrlPath(urlObj, 'validate');\r\n}\r\nfunction ensureTrailingSlash(path) {\r\n  return path.endsWith('/') ? path : \"\".concat(path, \"/\");\r\n}\r\nfunction appendUrlPath(urlObj, path) {\r\n  urlObj.pathname = \"\".concat(ensureTrailingSlash(urlObj.pathname)).concat(path);\r\n  return urlObj.toString();\r\n}\r\n\r\nconst passThroughQueueSignals = ['syncState', 'trickle', 'offer', 'answer', 'simulate', 'leave'];\r\nfunction canPassThroughQueue(req) {\r\n  const canPass = passThroughQueueSignals.indexOf(req.case) >= 0;\r\n  livekitLogger.trace('request allowed to bypass queue:', {\r\n    canPass,\r\n    req\r\n  });\r\n  return canPass;\r\n}\r\nvar SignalConnectionState;\r\n(function (SignalConnectionState) {\r\n  SignalConnectionState[SignalConnectionState[\"CONNECTING\"] = 0] = \"CONNECTING\";\r\n  SignalConnectionState[SignalConnectionState[\"CONNECTED\"] = 1] = \"CONNECTED\";\r\n  SignalConnectionState[SignalConnectionState[\"RECONNECTING\"] = 2] = \"RECONNECTING\";\r\n  SignalConnectionState[SignalConnectionState[\"DISCONNECTING\"] = 3] = \"DISCONNECTING\";\r\n  SignalConnectionState[SignalConnectionState[\"DISCONNECTED\"] = 4] = \"DISCONNECTED\";\r\n})(SignalConnectionState || (SignalConnectionState = {}));\r\n/** @internal */\r\nclass SignalClient {\r\n  get currentState() {\r\n    return this.state;\r\n  }\r\n  get isDisconnected() {\r\n    return this.state === SignalConnectionState.DISCONNECTING || this.state === SignalConnectionState.DISCONNECTED;\r\n  }\r\n  get isEstablishingConnection() {\r\n    return this.state === SignalConnectionState.CONNECTING || this.state === SignalConnectionState.RECONNECTING;\r\n  }\r\n  getNextRequestId() {\r\n    this._requestId += 1;\r\n    return this._requestId;\r\n  }\r\n  constructor() {\r\n    let useJSON = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\r\n    let loggerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    var _a;\r\n    /** signal rtt in milliseconds */\r\n    this.rtt = 0;\r\n    this.state = SignalConnectionState.DISCONNECTED;\r\n    this.log = livekitLogger;\r\n    this._requestId = 0;\r\n    /** @internal */\r\n    this.resetCallbacks = () => {\r\n      this.onAnswer = undefined;\r\n      this.onLeave = undefined;\r\n      this.onLocalTrackPublished = undefined;\r\n      this.onLocalTrackUnpublished = undefined;\r\n      this.onNegotiateRequested = undefined;\r\n      this.onOffer = undefined;\r\n      this.onRemoteMuteChanged = undefined;\r\n      this.onSubscribedQualityUpdate = undefined;\r\n      this.onTokenRefresh = undefined;\r\n      this.onTrickle = undefined;\r\n      this.onClose = undefined;\r\n    };\r\n    this.log = getLogger((_a = loggerOptions.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.Signal);\r\n    this.loggerContextCb = loggerOptions.loggerContextCb;\r\n    this.useJSON = useJSON;\r\n    this.requestQueue = new AsyncQueue();\r\n    this.queuedRequests = [];\r\n    this.closingLock = new _();\r\n    this.connectionLock = new _();\r\n    this.state = SignalConnectionState.DISCONNECTED;\r\n  }\r\n  get logContext() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.loggerContextCb) === null || _a === void 0 ? void 0 : _a.call(this)) !== null && _b !== void 0 ? _b : {};\r\n  }\r\n  join(url, token, opts, abortSignal) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      // during a full reconnect, we'd want to start the sequence even if currently\r\n      // connected\r\n      this.state = SignalConnectionState.CONNECTING;\r\n      this.options = opts;\r\n      const res = yield this.connect(url, token, opts, abortSignal);\r\n      return res;\r\n    });\r\n  }\r\n  reconnect(url, token, sid, reason) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.options) {\r\n        this.log.warn('attempted to reconnect without signal options being set, ignoring', this.logContext);\r\n        return;\r\n      }\r\n      this.state = SignalConnectionState.RECONNECTING;\r\n      // clear ping interval and restart it once reconnected\r\n      this.clearPingInterval();\r\n      const res = yield this.connect(url, token, Object.assign(Object.assign({}, this.options), {\r\n        reconnect: true,\r\n        sid,\r\n        reconnectReason: reason\r\n      }));\r\n      if (res instanceof ReconnectResponse) {\r\n        return res;\r\n      }\r\n      return;\r\n    });\r\n  }\r\n  connect(url, token, opts, abortSignal) {\r\n    this.connectOptions = opts;\r\n    const clientInfo = getClientInfo();\r\n    const params = createConnectionParams(token, clientInfo, opts);\r\n    const rtcUrl = createRtcUrl(url, params);\r\n    const validateUrl = createValidateUrl(rtcUrl);\r\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n      const unlock = yield this.connectionLock.lock();\r\n      try {\r\n        const abortHandler = () => __awaiter(this, void 0, void 0, function* () {\r\n          this.close();\r\n          clearTimeout(wsTimeout);\r\n          reject(new ConnectionError('room connection has been cancelled (signal)', ConnectionErrorReason.Cancelled));\r\n        });\r\n        const wsTimeout = setTimeout(() => {\r\n          this.close();\r\n          reject(new ConnectionError('room connection has timed out (signal)', ConnectionErrorReason.ServerUnreachable));\r\n        }, opts.websocketTimeout);\r\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\r\n          abortHandler();\r\n        }\r\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener('abort', abortHandler);\r\n        const redactedUrl = new URL(rtcUrl);\r\n        if (redactedUrl.searchParams.has('access_token')) {\r\n          redactedUrl.searchParams.set('access_token', '<redacted>');\r\n        }\r\n        this.log.debug(\"connecting to \".concat(redactedUrl), Object.assign({\r\n          reconnect: opts.reconnect,\r\n          reconnectReason: opts.reconnectReason\r\n        }, this.logContext));\r\n        if (this.ws) {\r\n          yield this.close(false);\r\n        }\r\n        this.ws = new WebSocket(rtcUrl);\r\n        this.ws.binaryType = 'arraybuffer';\r\n        this.ws.onopen = () => {\r\n          clearTimeout(wsTimeout);\r\n        };\r\n        this.ws.onerror = ev => __awaiter(this, void 0, void 0, function* () {\r\n          if (this.state !== SignalConnectionState.CONNECTED) {\r\n            this.state = SignalConnectionState.DISCONNECTED;\r\n            clearTimeout(wsTimeout);\r\n            try {\r\n              const resp = yield fetch(validateUrl);\r\n              if (resp.status.toFixed(0).startsWith('4')) {\r\n                const msg = yield resp.text();\r\n                reject(new ConnectionError(msg, ConnectionErrorReason.NotAllowed, resp.status));\r\n              } else {\r\n                reject(new ConnectionError(\"Encountered unknown websocket error during connection: \".concat(ev.toString()), ConnectionErrorReason.InternalError, resp.status));\r\n              }\r\n            } catch (e) {\r\n              reject(new ConnectionError(e instanceof Error ? e.message : 'server was not reachable', ConnectionErrorReason.ServerUnreachable));\r\n            }\r\n            return;\r\n          }\r\n          // other errors, handle\r\n          this.handleWSError(ev);\r\n        });\r\n        this.ws.onmessage = ev => __awaiter(this, void 0, void 0, function* () {\r\n          var _a, _b, _c;\r\n          // not considered connected until JoinResponse is received\r\n          let resp;\r\n          if (typeof ev.data === 'string') {\r\n            const json = JSON.parse(ev.data);\r\n            resp = SignalResponse.fromJson(json, {\r\n              ignoreUnknownFields: true\r\n            });\r\n          } else if (ev.data instanceof ArrayBuffer) {\r\n            resp = SignalResponse.fromBinary(new Uint8Array(ev.data));\r\n          } else {\r\n            this.log.error(\"could not decode websocket message: \".concat(typeof ev.data), this.logContext);\r\n            return;\r\n          }\r\n          if (this.state !== SignalConnectionState.CONNECTED) {\r\n            let shouldProcessMessage = false;\r\n            // handle join message only\r\n            if (((_a = resp.message) === null || _a === void 0 ? void 0 : _a.case) === 'join') {\r\n              this.state = SignalConnectionState.CONNECTED;\r\n              abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener('abort', abortHandler);\r\n              this.pingTimeoutDuration = resp.message.value.pingTimeout;\r\n              this.pingIntervalDuration = resp.message.value.pingInterval;\r\n              if (this.pingTimeoutDuration && this.pingTimeoutDuration > 0) {\r\n                this.log.debug('ping config', Object.assign(Object.assign({}, this.logContext), {\r\n                  timeout: this.pingTimeoutDuration,\r\n                  interval: this.pingIntervalDuration\r\n                }));\r\n                this.startPingInterval();\r\n              }\r\n              resolve(resp.message.value);\r\n            } else if (this.state === SignalConnectionState.RECONNECTING && resp.message.case !== 'leave') {\r\n              // in reconnecting, any message received means signal reconnected\r\n              this.state = SignalConnectionState.CONNECTED;\r\n              abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener('abort', abortHandler);\r\n              this.startPingInterval();\r\n              if (((_b = resp.message) === null || _b === void 0 ? void 0 : _b.case) === 'reconnect') {\r\n                resolve(resp.message.value);\r\n              } else {\r\n                this.log.debug('declaring signal reconnected without reconnect response received', this.logContext);\r\n                resolve(undefined);\r\n                shouldProcessMessage = true;\r\n              }\r\n            } else if (this.isEstablishingConnection && resp.message.case === 'leave') {\r\n              reject(new ConnectionError('Received leave request while trying to (re)connect', ConnectionErrorReason.LeaveRequest, undefined, resp.message.value.reason));\r\n            } else if (!opts.reconnect) {\r\n              // non-reconnect case, should receive join response first\r\n              reject(new ConnectionError(\"did not receive join response, got \".concat((_c = resp.message) === null || _c === void 0 ? void 0 : _c.case, \" instead\"), ConnectionErrorReason.InternalError));\r\n            }\r\n            if (!shouldProcessMessage) {\r\n              return;\r\n            }\r\n          }\r\n          if (this.signalLatency) {\r\n            yield sleep(this.signalLatency);\r\n          }\r\n          this.handleSignalResponse(resp);\r\n        });\r\n        this.ws.onclose = ev => {\r\n          if (this.isEstablishingConnection) {\r\n            reject(new ConnectionError('Websocket got closed during a (re)connection attempt', ConnectionErrorReason.InternalError));\r\n          }\r\n          this.log.warn(\"websocket closed\", Object.assign(Object.assign({}, this.logContext), {\r\n            reason: ev.reason,\r\n            code: ev.code,\r\n            wasClean: ev.wasClean,\r\n            state: this.state\r\n          }));\r\n          this.handleOnClose(ev.reason);\r\n        };\r\n      } finally {\r\n        unlock();\r\n      }\r\n    }));\r\n  }\r\n  close() {\r\n    return __awaiter(this, arguments, void 0, function () {\r\n      var _this = this;\r\n      let updateState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n      return function* () {\r\n        const unlock = yield _this.closingLock.lock();\r\n        try {\r\n          _this.clearPingInterval();\r\n          if (updateState) {\r\n            _this.state = SignalConnectionState.DISCONNECTING;\r\n          }\r\n          if (_this.ws) {\r\n            _this.ws.onmessage = null;\r\n            _this.ws.onopen = null;\r\n            _this.ws.onclose = null;\r\n            // calling `ws.close()` only starts the closing handshake (CLOSING state), prefer to wait until state is actually CLOSED\r\n            const closePromise = new Promise(resolve => {\r\n              if (_this.ws) {\r\n                _this.ws.onclose = () => {\r\n                  resolve();\r\n                };\r\n              } else {\r\n                resolve();\r\n              }\r\n            });\r\n            if (_this.ws.readyState < _this.ws.CLOSING) {\r\n              _this.ws.close();\r\n              // 250ms grace period for ws to close gracefully\r\n              yield Promise.race([closePromise, sleep(250)]);\r\n            }\r\n            _this.ws = undefined;\r\n          }\r\n        } finally {\r\n          if (updateState) {\r\n            _this.state = SignalConnectionState.DISCONNECTED;\r\n          }\r\n          unlock();\r\n        }\r\n      }();\r\n    });\r\n  }\r\n  // initial offer after joining\r\n  sendOffer(offer) {\r\n    this.log.debug('sending offer', Object.assign(Object.assign({}, this.logContext), {\r\n      offerSdp: offer.sdp\r\n    }));\r\n    this.sendRequest({\r\n      case: 'offer',\r\n      value: toProtoSessionDescription(offer)\r\n    });\r\n  }\r\n  // answer a server-initiated offer\r\n  sendAnswer(answer) {\r\n    this.log.debug('sending answer', Object.assign(Object.assign({}, this.logContext), {\r\n      answerSdp: answer.sdp\r\n    }));\r\n    return this.sendRequest({\r\n      case: 'answer',\r\n      value: toProtoSessionDescription(answer)\r\n    });\r\n  }\r\n  sendIceCandidate(candidate, target) {\r\n    this.log.debug('sending ice candidate', Object.assign(Object.assign({}, this.logContext), {\r\n      candidate\r\n    }));\r\n    return this.sendRequest({\r\n      case: 'trickle',\r\n      value: new TrickleRequest({\r\n        candidateInit: JSON.stringify(candidate),\r\n        target\r\n      })\r\n    });\r\n  }\r\n  sendMuteTrack(trackSid, muted) {\r\n    return this.sendRequest({\r\n      case: 'mute',\r\n      value: new MuteTrackRequest({\r\n        sid: trackSid,\r\n        muted\r\n      })\r\n    });\r\n  }\r\n  sendAddTrack(req) {\r\n    return this.sendRequest({\r\n      case: 'addTrack',\r\n      value: req\r\n    });\r\n  }\r\n  sendUpdateLocalMetadata(metadata_1, name_1) {\r\n    return __awaiter(this, arguments, void 0, function (metadata, name) {\r\n      var _this2 = this;\r\n      let attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n      return function* () {\r\n        const requestId = _this2.getNextRequestId();\r\n        yield _this2.sendRequest({\r\n          case: 'updateMetadata',\r\n          value: new UpdateParticipantMetadata({\r\n            requestId,\r\n            metadata,\r\n            name,\r\n            attributes\r\n          })\r\n        });\r\n        return requestId;\r\n      }();\r\n    });\r\n  }\r\n  sendUpdateTrackSettings(settings) {\r\n    this.sendRequest({\r\n      case: 'trackSetting',\r\n      value: settings\r\n    });\r\n  }\r\n  sendUpdateSubscription(sub) {\r\n    return this.sendRequest({\r\n      case: 'subscription',\r\n      value: sub\r\n    });\r\n  }\r\n  sendSyncState(sync) {\r\n    return this.sendRequest({\r\n      case: 'syncState',\r\n      value: sync\r\n    });\r\n  }\r\n  sendUpdateVideoLayers(trackSid, layers) {\r\n    return this.sendRequest({\r\n      case: 'updateLayers',\r\n      value: new UpdateVideoLayers({\r\n        trackSid,\r\n        layers\r\n      })\r\n    });\r\n  }\r\n  sendUpdateSubscriptionPermissions(allParticipants, trackPermissions) {\r\n    return this.sendRequest({\r\n      case: 'subscriptionPermission',\r\n      value: new SubscriptionPermission({\r\n        allParticipants,\r\n        trackPermissions\r\n      })\r\n    });\r\n  }\r\n  sendSimulateScenario(scenario) {\r\n    return this.sendRequest({\r\n      case: 'simulate',\r\n      value: scenario\r\n    });\r\n  }\r\n  sendPing() {\r\n    /** send both of ping and pingReq for compatibility to old and new server */\r\n    return Promise.all([this.sendRequest({\r\n      case: 'ping',\r\n      value: protoInt64.parse(Date.now())\r\n    }), this.sendRequest({\r\n      case: 'pingReq',\r\n      value: new Ping({\r\n        timestamp: protoInt64.parse(Date.now()),\r\n        rtt: protoInt64.parse(this.rtt)\r\n      })\r\n    })]);\r\n  }\r\n  sendUpdateLocalAudioTrack(trackSid, features) {\r\n    return this.sendRequest({\r\n      case: 'updateAudioTrack',\r\n      value: new UpdateLocalAudioTrack({\r\n        trackSid,\r\n        features\r\n      })\r\n    });\r\n  }\r\n  sendLeave() {\r\n    return this.sendRequest({\r\n      case: 'leave',\r\n      value: new LeaveRequest({\r\n        reason: DisconnectReason.CLIENT_INITIATED,\r\n        // server doesn't process this field, keeping it here to indicate the intent of a full disconnect\r\n        action: LeaveRequest_Action.DISCONNECT\r\n      })\r\n    });\r\n  }\r\n  sendRequest(message_1) {\r\n    return __awaiter(this, arguments, void 0, function (message) {\r\n      var _this3 = this;\r\n      let fromQueue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\r\n      return function* () {\r\n        // capture all requests while reconnecting and put them in a queue\r\n        // unless the request originates from the queue, then don't enqueue again\r\n        const canQueue = !fromQueue && !canPassThroughQueue(message);\r\n        if (canQueue && _this3.state === SignalConnectionState.RECONNECTING) {\r\n          _this3.queuedRequests.push(() => __awaiter(_this3, void 0, void 0, function* () {\r\n            yield this.sendRequest(message, true);\r\n          }));\r\n          return;\r\n        }\r\n        // make sure previously queued requests are being sent first\r\n        if (!fromQueue) {\r\n          yield _this3.requestQueue.flush();\r\n        }\r\n        if (_this3.signalLatency) {\r\n          yield sleep(_this3.signalLatency);\r\n        }\r\n        if (!_this3.ws || _this3.ws.readyState !== _this3.ws.OPEN) {\r\n          _this3.log.error(\"cannot send signal request before connected, type: \".concat(message === null || message === void 0 ? void 0 : message.case), _this3.logContext);\r\n          return;\r\n        }\r\n        const req = new SignalRequest({\r\n          message\r\n        });\r\n        try {\r\n          if (_this3.useJSON) {\r\n            _this3.ws.send(req.toJsonString());\r\n          } else {\r\n            _this3.ws.send(req.toBinary());\r\n          }\r\n        } catch (e) {\r\n          _this3.log.error('error sending signal message', Object.assign(Object.assign({}, _this3.logContext), {\r\n            error: e\r\n          }));\r\n        }\r\n      }();\r\n    });\r\n  }\r\n  handleSignalResponse(res) {\r\n    var _a, _b;\r\n    const msg = res.message;\r\n    if (msg == undefined) {\r\n      this.log.debug('received unsupported message', this.logContext);\r\n      return;\r\n    }\r\n    let pingHandled = false;\r\n    if (msg.case === 'answer') {\r\n      const sd = fromProtoSessionDescription(msg.value);\r\n      if (this.onAnswer) {\r\n        this.onAnswer(sd);\r\n      }\r\n    } else if (msg.case === 'offer') {\r\n      const sd = fromProtoSessionDescription(msg.value);\r\n      if (this.onOffer) {\r\n        this.onOffer(sd);\r\n      }\r\n    } else if (msg.case === 'trickle') {\r\n      const candidate = JSON.parse(msg.value.candidateInit);\r\n      if (this.onTrickle) {\r\n        this.onTrickle(candidate, msg.value.target);\r\n      }\r\n    } else if (msg.case === 'update') {\r\n      if (this.onParticipantUpdate) {\r\n        this.onParticipantUpdate((_a = msg.value.participants) !== null && _a !== void 0 ? _a : []);\r\n      }\r\n    } else if (msg.case === 'trackPublished') {\r\n      if (this.onLocalTrackPublished) {\r\n        this.onLocalTrackPublished(msg.value);\r\n      }\r\n    } else if (msg.case === 'speakersChanged') {\r\n      if (this.onSpeakersChanged) {\r\n        this.onSpeakersChanged((_b = msg.value.speakers) !== null && _b !== void 0 ? _b : []);\r\n      }\r\n    } else if (msg.case === 'leave') {\r\n      if (this.onLeave) {\r\n        this.onLeave(msg.value);\r\n      }\r\n    } else if (msg.case === 'mute') {\r\n      if (this.onRemoteMuteChanged) {\r\n        this.onRemoteMuteChanged(msg.value.sid, msg.value.muted);\r\n      }\r\n    } else if (msg.case === 'roomUpdate') {\r\n      if (this.onRoomUpdate && msg.value.room) {\r\n        this.onRoomUpdate(msg.value.room);\r\n      }\r\n    } else if (msg.case === 'connectionQuality') {\r\n      if (this.onConnectionQuality) {\r\n        this.onConnectionQuality(msg.value);\r\n      }\r\n    } else if (msg.case === 'streamStateUpdate') {\r\n      if (this.onStreamStateUpdate) {\r\n        this.onStreamStateUpdate(msg.value);\r\n      }\r\n    } else if (msg.case === 'subscribedQualityUpdate') {\r\n      if (this.onSubscribedQualityUpdate) {\r\n        this.onSubscribedQualityUpdate(msg.value);\r\n      }\r\n    } else if (msg.case === 'subscriptionPermissionUpdate') {\r\n      if (this.onSubscriptionPermissionUpdate) {\r\n        this.onSubscriptionPermissionUpdate(msg.value);\r\n      }\r\n    } else if (msg.case === 'refreshToken') {\r\n      if (this.onTokenRefresh) {\r\n        this.onTokenRefresh(msg.value);\r\n      }\r\n    } else if (msg.case === 'trackUnpublished') {\r\n      if (this.onLocalTrackUnpublished) {\r\n        this.onLocalTrackUnpublished(msg.value);\r\n      }\r\n    } else if (msg.case === 'subscriptionResponse') {\r\n      if (this.onSubscriptionError) {\r\n        this.onSubscriptionError(msg.value);\r\n      }\r\n    } else if (msg.case === 'pong') ; else if (msg.case === 'pongResp') {\r\n      this.rtt = Date.now() - Number.parseInt(msg.value.lastPingTimestamp.toString());\r\n      this.resetPingTimeout();\r\n      pingHandled = true;\r\n    } else if (msg.case === 'requestResponse') {\r\n      if (this.onRequestResponse) {\r\n        this.onRequestResponse(msg.value);\r\n      }\r\n    } else if (msg.case === 'trackSubscribed') {\r\n      if (this.onLocalTrackSubscribed) {\r\n        this.onLocalTrackSubscribed(msg.value.trackSid);\r\n      }\r\n    } else if (msg.case === 'roomMoved') {\r\n      if (this.onTokenRefresh) {\r\n        this.onTokenRefresh(msg.value.token);\r\n      }\r\n      if (this.onRoomMoved) {\r\n        this.onRoomMoved(msg.value);\r\n      }\r\n    } else {\r\n      this.log.debug('unsupported message', Object.assign(Object.assign({}, this.logContext), {\r\n        msgCase: msg.case\r\n      }));\r\n    }\r\n    if (!pingHandled) {\r\n      this.resetPingTimeout();\r\n    }\r\n  }\r\n  setReconnected() {\r\n    while (this.queuedRequests.length > 0) {\r\n      const req = this.queuedRequests.shift();\r\n      if (req) {\r\n        this.requestQueue.run(req);\r\n      }\r\n    }\r\n  }\r\n  handleOnClose(reason) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.state === SignalConnectionState.DISCONNECTED) return;\r\n      const onCloseCallback = this.onClose;\r\n      yield this.close();\r\n      this.log.debug(\"websocket connection closed: \".concat(reason), Object.assign(Object.assign({}, this.logContext), {\r\n        reason\r\n      }));\r\n      if (onCloseCallback) {\r\n        onCloseCallback(reason);\r\n      }\r\n    });\r\n  }\r\n  handleWSError(ev) {\r\n    this.log.error('websocket error', Object.assign(Object.assign({}, this.logContext), {\r\n      error: ev\r\n    }));\r\n  }\r\n  /**\r\n   * Resets the ping timeout and starts a new timeout.\r\n   * Call this after receiving a pong message\r\n   */\r\n  resetPingTimeout() {\r\n    this.clearPingTimeout();\r\n    if (!this.pingTimeoutDuration) {\r\n      this.log.warn('ping timeout duration not set', this.logContext);\r\n      return;\r\n    }\r\n    this.pingTimeout = CriticalTimers.setTimeout(() => {\r\n      this.log.warn(\"ping timeout triggered. last pong received at: \".concat(new Date(Date.now() - this.pingTimeoutDuration * 1000).toUTCString()), this.logContext);\r\n      this.handleOnClose('ping timeout');\r\n    }, this.pingTimeoutDuration * 1000);\r\n  }\r\n  /**\r\n   * Clears ping timeout (does not start a new timeout)\r\n   */\r\n  clearPingTimeout() {\r\n    if (this.pingTimeout) {\r\n      CriticalTimers.clearTimeout(this.pingTimeout);\r\n    }\r\n  }\r\n  startPingInterval() {\r\n    this.clearPingInterval();\r\n    this.resetPingTimeout();\r\n    if (!this.pingIntervalDuration) {\r\n      this.log.warn('ping interval duration not set', this.logContext);\r\n      return;\r\n    }\r\n    this.log.debug('start ping interval', this.logContext);\r\n    this.pingInterval = CriticalTimers.setInterval(() => {\r\n      this.sendPing();\r\n    }, this.pingIntervalDuration * 1000);\r\n  }\r\n  clearPingInterval() {\r\n    this.log.debug('clearing ping interval', this.logContext);\r\n    this.clearPingTimeout();\r\n    if (this.pingInterval) {\r\n      CriticalTimers.clearInterval(this.pingInterval);\r\n    }\r\n  }\r\n}\r\nfunction fromProtoSessionDescription(sd) {\r\n  const rsd = {\r\n    type: 'offer',\r\n    sdp: sd.sdp\r\n  };\r\n  switch (sd.type) {\r\n    case 'answer':\r\n    case 'offer':\r\n    case 'pranswer':\r\n    case 'rollback':\r\n      rsd.type = sd.type;\r\n      break;\r\n  }\r\n  return rsd;\r\n}\r\nfunction toProtoSessionDescription(rsd) {\r\n  const sd = new SessionDescription({\r\n    sdp: rsd.sdp,\r\n    type: rsd.type\r\n  });\r\n  return sd;\r\n}\r\nfunction createConnectionParams(token, info, opts) {\r\n  var _a;\r\n  const params = new URLSearchParams();\r\n  params.set('access_token', token);\r\n  // opts\r\n  if (opts.reconnect) {\r\n    params.set('reconnect', '1');\r\n    if (opts.sid) {\r\n      params.set('sid', opts.sid);\r\n    }\r\n  }\r\n  params.set('auto_subscribe', opts.autoSubscribe ? '1' : '0');\r\n  // ClientInfo\r\n  params.set('sdk', isReactNative() ? 'reactnative' : 'js');\r\n  params.set('version', info.version);\r\n  params.set('protocol', info.protocol.toString());\r\n  if (info.deviceModel) {\r\n    params.set('device_model', info.deviceModel);\r\n  }\r\n  if (info.os) {\r\n    params.set('os', info.os);\r\n  }\r\n  if (info.osVersion) {\r\n    params.set('os_version', info.osVersion);\r\n  }\r\n  if (info.browser) {\r\n    params.set('browser', info.browser);\r\n  }\r\n  if (info.browserVersion) {\r\n    params.set('browser_version', info.browserVersion);\r\n  }\r\n  if (opts.adaptiveStream) {\r\n    params.set('adaptive_stream', '1');\r\n  }\r\n  if (opts.reconnectReason) {\r\n    params.set('reconnect_reason', opts.reconnectReason.toString());\r\n  }\r\n  // @ts-ignore\r\n  if ((_a = navigator.connection) === null || _a === void 0 ? void 0 : _a.type) {\r\n    // @ts-ignore\r\n    params.set('network', navigator.connection.type);\r\n  }\r\n  return params;\r\n}\r\n\r\nclass DataPacketBuffer {\r\n  constructor() {\r\n    this.buffer = [];\r\n    this._totalSize = 0;\r\n  }\r\n  push(item) {\r\n    this.buffer.push(item);\r\n    this._totalSize += item.data.byteLength;\r\n  }\r\n  pop() {\r\n    const item = this.buffer.shift();\r\n    if (item) {\r\n      this._totalSize -= item.data.byteLength;\r\n    }\r\n    return item;\r\n  }\r\n  getAll() {\r\n    return this.buffer.slice();\r\n  }\r\n  popToSequence(sequence) {\r\n    while (this.buffer.length > 0) {\r\n      const first = this.buffer[0];\r\n      if (first.sequence <= sequence) {\r\n        this.pop();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  alignBufferedAmount(bufferedAmount) {\r\n    while (this.buffer.length > 0) {\r\n      const first = this.buffer[0];\r\n      if (this._totalSize - first.data.byteLength <= bufferedAmount) {\r\n        break;\r\n      }\r\n      this.pop();\r\n    }\r\n  }\r\n  get length() {\r\n    return this.buffer.length;\r\n  }\r\n}\r\n\r\nclass TTLMap {\r\n  /**\r\n   * @param ttl ttl of the key (ms)\r\n   */\r\n  constructor(ttl) {\r\n    this._map = new Map();\r\n    this._lastCleanup = 0;\r\n    this.ttl = ttl;\r\n  }\r\n  set(key, value) {\r\n    const now = Date.now();\r\n    if (now - this._lastCleanup > this.ttl / 2) {\r\n      this.cleanup();\r\n    }\r\n    const expiresAt = now + this.ttl;\r\n    this._map.set(key, {\r\n      value,\r\n      expiresAt\r\n    });\r\n    return this;\r\n  }\r\n  get(key) {\r\n    const entry = this._map.get(key);\r\n    if (!entry) return undefined;\r\n    if (entry.expiresAt < Date.now()) {\r\n      this._map.delete(key);\r\n      return undefined;\r\n    }\r\n    return entry.value;\r\n  }\r\n  has(key) {\r\n    const entry = this._map.get(key);\r\n    if (!entry) return false;\r\n    if (entry.expiresAt < Date.now()) {\r\n      this._map.delete(key);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  delete(key) {\r\n    return this._map.delete(key);\r\n  }\r\n  clear() {\r\n    this._map.clear();\r\n  }\r\n  cleanup() {\r\n    const now = Date.now();\r\n    for (const [key, entry] of this._map.entries()) {\r\n      if (entry.expiresAt < now) {\r\n        this._map.delete(key);\r\n      }\r\n    }\r\n    this._lastCleanup = now;\r\n  }\r\n  get size() {\r\n    this.cleanup();\r\n    return this._map.size;\r\n  }\r\n  forEach(callback) {\r\n    this.cleanup();\r\n    for (const [key, entry] of this._map.entries()) {\r\n      if (entry.expiresAt >= Date.now()) {\r\n        callback(entry.value, key, this.asValueMap());\r\n      }\r\n    }\r\n  }\r\n  map(callback) {\r\n    this.cleanup();\r\n    const result = [];\r\n    const valueMap = this.asValueMap();\r\n    for (const [key, value] of valueMap.entries()) {\r\n      result.push(callback(value, key, valueMap));\r\n    }\r\n    return result;\r\n  }\r\n  asValueMap() {\r\n    const result = new Map();\r\n    for (const [key, entry] of this._map.entries()) {\r\n      if (entry.expiresAt >= Date.now()) {\r\n        result.set(key, entry.value);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nvar lib = {};\r\n\r\nvar parser = {};\r\n\r\nvar grammar = {exports: {}};\r\n\r\nvar hasRequiredGrammar;\r\nfunction requireGrammar() {\r\n  if (hasRequiredGrammar) return grammar.exports;\r\n  hasRequiredGrammar = 1;\r\n  var grammar$1 = grammar.exports = {\r\n    v: [{\r\n      name: 'version',\r\n      reg: /^(\\d*)$/\r\n    }],\r\n    o: [{\r\n      // o=- 20518 0 IN IP4 203.0.113.1\r\n      // NB: sessionId will be a String in most cases because it is huge\r\n      name: 'origin',\r\n      reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\r\n      names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\r\n      format: '%s %s %d %s IP%d %s'\r\n    }],\r\n    // default parsing of these only (though some of these feel outdated)\r\n    s: [{\r\n      name: 'name'\r\n    }],\r\n    i: [{\r\n      name: 'description'\r\n    }],\r\n    u: [{\r\n      name: 'uri'\r\n    }],\r\n    e: [{\r\n      name: 'email'\r\n    }],\r\n    p: [{\r\n      name: 'phone'\r\n    }],\r\n    z: [{\r\n      name: 'timezones'\r\n    }],\r\n    // TODO: this one can actually be parsed properly...\r\n    r: [{\r\n      name: 'repeats'\r\n    }],\r\n    // TODO: this one can also be parsed properly\r\n    // k: [{}], // outdated thing ignored\r\n    t: [{\r\n      // t=0 0\r\n      name: 'timing',\r\n      reg: /^(\\d*) (\\d*)/,\r\n      names: ['start', 'stop'],\r\n      format: '%d %d'\r\n    }],\r\n    c: [{\r\n      // c=IN IP4 10.47.197.26\r\n      name: 'connection',\r\n      reg: /^IN IP(\\d) (\\S*)/,\r\n      names: ['version', 'ip'],\r\n      format: 'IN IP%d %s'\r\n    }],\r\n    b: [{\r\n      // b=AS:4000\r\n      push: 'bandwidth',\r\n      reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\r\n      names: ['type', 'limit'],\r\n      format: '%s:%s'\r\n    }],\r\n    m: [{\r\n      // m=video 51744 RTP/AVP 126 97 98 34 31\r\n      // NB: special - pushes to session\r\n      // TODO: rtp/fmtp should be filtered by the payloads found here?\r\n      reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\r\n      names: ['type', 'port', 'protocol', 'payloads'],\r\n      format: '%s %d %s %s'\r\n    }],\r\n    a: [{\r\n      // a=rtpmap:110 opus/48000/2\r\n      push: 'rtp',\r\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\r\n      names: ['payload', 'codec', 'rate', 'encoding'],\r\n      format: function (o) {\r\n        return o.encoding ? 'rtpmap:%d %s/%s/%s' : o.rate ? 'rtpmap:%d %s/%s' : 'rtpmap:%d %s';\r\n      }\r\n    }, {\r\n      // a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\r\n      // a=fmtp:111 minptime=10; useinbandfec=1\r\n      push: 'fmtp',\r\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\r\n      names: ['payload', 'config'],\r\n      format: 'fmtp:%d %s'\r\n    }, {\r\n      // a=control:streamid=0\r\n      name: 'control',\r\n      reg: /^control:(.*)/,\r\n      format: 'control:%s'\r\n    }, {\r\n      // a=rtcp:65179 IN IP4 193.84.77.194\r\n      name: 'rtcp',\r\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\r\n      names: ['port', 'netType', 'ipVer', 'address'],\r\n      format: function (o) {\r\n        return o.address != null ? 'rtcp:%d %s IP%d %s' : 'rtcp:%d';\r\n      }\r\n    }, {\r\n      // a=rtcp-fb:98 trr-int 100\r\n      push: 'rtcpFbTrrInt',\r\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\r\n      names: ['payload', 'value'],\r\n      format: 'rtcp-fb:%s trr-int %d'\r\n    }, {\r\n      // a=rtcp-fb:98 nack rpsi\r\n      push: 'rtcpFb',\r\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\r\n      names: ['payload', 'type', 'subtype'],\r\n      format: function (o) {\r\n        return o.subtype != null ? 'rtcp-fb:%s %s %s' : 'rtcp-fb:%s %s';\r\n      }\r\n    }, {\r\n      // a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n      // a=extmap:1/recvonly URI-gps-string\r\n      // a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\r\n      push: 'ext',\r\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\r\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\r\n      format: function (o) {\r\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + (o['encrypt-uri'] ? ' %s' : '%v') + ' %s' + (o.config ? ' %s' : '');\r\n      }\r\n    }, {\r\n      // a=extmap-allow-mixed\r\n      name: 'extmapAllowMixed',\r\n      reg: /^(extmap-allow-mixed)/\r\n    }, {\r\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\r\n      push: 'crypto',\r\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['id', 'suite', 'config', 'sessionConfig'],\r\n      format: function (o) {\r\n        return o.sessionConfig != null ? 'crypto:%d %s %s %s' : 'crypto:%d %s %s';\r\n      }\r\n    }, {\r\n      // a=setup:actpass\r\n      name: 'setup',\r\n      reg: /^setup:(\\w*)/,\r\n      format: 'setup:%s'\r\n    }, {\r\n      // a=connection:new\r\n      name: 'connectionType',\r\n      reg: /^connection:(new|existing)/,\r\n      format: 'connection:%s'\r\n    }, {\r\n      // a=mid:1\r\n      name: 'mid',\r\n      reg: /^mid:([^\\s]*)/,\r\n      format: 'mid:%s'\r\n    }, {\r\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\r\n      name: 'msid',\r\n      reg: /^msid:(.*)/,\r\n      format: 'msid:%s'\r\n    }, {\r\n      // a=ptime:20\r\n      name: 'ptime',\r\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\r\n      format: 'ptime:%d'\r\n    }, {\r\n      // a=maxptime:60\r\n      name: 'maxptime',\r\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\r\n      format: 'maxptime:%d'\r\n    }, {\r\n      // a=sendrecv\r\n      name: 'direction',\r\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\r\n    }, {\r\n      // a=ice-lite\r\n      name: 'icelite',\r\n      reg: /^(ice-lite)/\r\n    }, {\r\n      // a=ice-ufrag:F7gI\r\n      name: 'iceUfrag',\r\n      reg: /^ice-ufrag:(\\S*)/,\r\n      format: 'ice-ufrag:%s'\r\n    }, {\r\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\r\n      name: 'icePwd',\r\n      reg: /^ice-pwd:(\\S*)/,\r\n      format: 'ice-pwd:%s'\r\n    }, {\r\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\r\n      name: 'fingerprint',\r\n      reg: /^fingerprint:(\\S*) (\\S*)/,\r\n      names: ['type', 'hash'],\r\n      format: 'fingerprint:%s %s'\r\n    }, {\r\n      // a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\r\n      // a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\r\n      // a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\r\n      // a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\r\n      // a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\r\n      push: 'candidates',\r\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\r\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\r\n      format: function (o) {\r\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\r\n        str += o.raddr != null ? ' raddr %s rport %d' : '%v%v';\r\n\r\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\r\n        str += o.tcptype != null ? ' tcptype %s' : '%v';\r\n        if (o.generation != null) {\r\n          str += ' generation %d';\r\n        }\r\n        str += o['network-id'] != null ? ' network-id %d' : '%v';\r\n        str += o['network-cost'] != null ? ' network-cost %d' : '%v';\r\n        return str;\r\n      }\r\n    }, {\r\n      // a=end-of-candidates (keep after the candidates line for readability)\r\n      name: 'endOfCandidates',\r\n      reg: /^(end-of-candidates)/\r\n    }, {\r\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\r\n      name: 'remoteCandidates',\r\n      reg: /^remote-candidates:(.*)/,\r\n      format: 'remote-candidates:%s'\r\n    }, {\r\n      // a=ice-options:google-ice\r\n      name: 'iceOptions',\r\n      reg: /^ice-options:(\\S*)/,\r\n      format: 'ice-options:%s'\r\n    }, {\r\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\r\n      push: 'ssrcs',\r\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\r\n      names: ['id', 'attribute', 'value'],\r\n      format: function (o) {\r\n        var str = 'ssrc:%d';\r\n        if (o.attribute != null) {\r\n          str += ' %s';\r\n          if (o.value != null) {\r\n            str += ':%s';\r\n          }\r\n        }\r\n        return str;\r\n      }\r\n    }, {\r\n      // a=ssrc-group:FEC 1 2\r\n      // a=ssrc-group:FEC-FR 3004364195 1080772241\r\n      push: 'ssrcGroups',\r\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\r\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\r\n      names: ['semantics', 'ssrcs'],\r\n      format: 'ssrc-group:%s %s'\r\n    }, {\r\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\r\n      name: 'msidSemantic',\r\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\r\n      names: ['semantic', 'token'],\r\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\r\n    }, {\r\n      // a=group:BUNDLE audio video\r\n      push: 'groups',\r\n      reg: /^group:(\\w*) (.*)/,\r\n      names: ['type', 'mids'],\r\n      format: 'group:%s %s'\r\n    }, {\r\n      // a=rtcp-mux\r\n      name: 'rtcpMux',\r\n      reg: /^(rtcp-mux)/\r\n    }, {\r\n      // a=rtcp-rsize\r\n      name: 'rtcpRsize',\r\n      reg: /^(rtcp-rsize)/\r\n    }, {\r\n      // a=sctpmap:5000 webrtc-datachannel 1024\r\n      name: 'sctpmap',\r\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\r\n      format: function (o) {\r\n        return o.maxMessageSize != null ? 'sctpmap:%s %s %s' : 'sctpmap:%s %s';\r\n      }\r\n    }, {\r\n      // a=x-google-flag:conference\r\n      name: 'xGoogleFlag',\r\n      reg: /^x-google-flag:([^\\s]*)/,\r\n      format: 'x-google-flag:%s'\r\n    }, {\r\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\r\n      push: 'rids',\r\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\r\n      names: ['id', 'direction', 'params'],\r\n      format: function (o) {\r\n        return o.params ? 'rid:%s %s %s' : 'rid:%s %s';\r\n      }\r\n    }, {\r\n      // a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\r\n      // a=imageattr:* send [x=800,y=640] recv *\r\n      // a=imageattr:100 recv [x=320,y=240]\r\n      push: 'imageattrs',\r\n      reg: new RegExp(\r\n      // a=imageattr:97\r\n      '^imageattr:(\\\\d+|\\\\*)' +\r\n      // send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\r\n      '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\r\n      // recv [x=330,y=250]\r\n      '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'),\r\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\r\n      format: function (o) {\r\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    }, {\r\n      // a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\r\n      // a=simulcast:recv 1;4,5 send 6;7\r\n      name: 'simulcast',\r\n      reg: new RegExp(\r\n      // a=simulcast:\r\n      '^simulcast:' +\r\n      // send 1,2,3;~4,~5\r\n      '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\r\n      // space + recv 6;~7,~8\r\n      '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\r\n      // end\r\n      '$'),\r\n      names: ['dir1', 'list1', 'dir2', 'list2'],\r\n      format: function (o) {\r\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    }, {\r\n      // old simulcast draft 03 (implemented by Firefox)\r\n      //   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\r\n      // a=simulcast: recv pt=97;98 send pt=97\r\n      // a=simulcast: send rid=5;6;7 paused=6,7\r\n      name: 'simulcast_03',\r\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\r\n      names: ['value'],\r\n      format: 'simulcast: %s'\r\n    }, {\r\n      // a=framerate:25\r\n      // a=framerate:29.97\r\n      name: 'framerate',\r\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\r\n      format: 'framerate:%s'\r\n    }, {\r\n      // RFC4570\r\n      // a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\r\n      name: 'sourceFilter',\r\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\r\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\r\n      format: 'source-filter: %s %s %s %s %s'\r\n    }, {\r\n      // a=bundle-only\r\n      name: 'bundleOnly',\r\n      reg: /^(bundle-only)/\r\n    }, {\r\n      // a=label:1\r\n      name: 'label',\r\n      reg: /^label:(.+)/,\r\n      format: 'label:%s'\r\n    }, {\r\n      // RFC version 26 for SCTP over DTLS\r\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\r\n      name: 'sctpPort',\r\n      reg: /^sctp-port:(\\d+)$/,\r\n      format: 'sctp-port:%s'\r\n    }, {\r\n      // RFC version 26 for SCTP over DTLS\r\n      // https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\r\n      name: 'maxMessageSize',\r\n      reg: /^max-message-size:(\\d+)$/,\r\n      format: 'max-message-size:%s'\r\n    }, {\r\n      // RFC7273\r\n      // a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\r\n      push: 'tsRefClocks',\r\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\r\n      names: ['clksrc', 'clksrcExt'],\r\n      format: function (o) {\r\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '');\r\n      }\r\n    }, {\r\n      // RFC7273\r\n      // a=mediaclk:direct=963214424\r\n      name: 'mediaClk',\r\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\r\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\r\n      format: function (o) {\r\n        var str = 'mediaclk:';\r\n        str += o.id != null ? 'id=%s %s' : '%v%s';\r\n        str += o.mediaClockValue != null ? '=%s' : '';\r\n        str += o.rateNumerator != null ? ' rate=%s' : '';\r\n        str += o.rateDenominator != null ? '/%s' : '';\r\n        return str;\r\n      }\r\n    }, {\r\n      // a=keywds:keywords\r\n      name: 'keywords',\r\n      reg: /^keywds:(.+)$/,\r\n      format: 'keywds:%s'\r\n    }, {\r\n      // a=content:main\r\n      name: 'content',\r\n      reg: /^content:(.+)/,\r\n      format: 'content:%s'\r\n    },\r\n    // BFCP https://tools.ietf.org/html/rfc4583\r\n    {\r\n      // a=floorctrl:c-s\r\n      name: 'bfcpFloorCtrl',\r\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\r\n      format: 'floorctrl:%s'\r\n    }, {\r\n      // a=confid:1\r\n      name: 'bfcpConfId',\r\n      reg: /^confid:(\\d+)/,\r\n      format: 'confid:%s'\r\n    }, {\r\n      // a=userid:1\r\n      name: 'bfcpUserId',\r\n      reg: /^userid:(\\d+)/,\r\n      format: 'userid:%s'\r\n    }, {\r\n      // a=floorid:1\r\n      name: 'bfcpFloorId',\r\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\r\n      names: ['id', 'mStream'],\r\n      format: 'floorid:%s mstrm:%s'\r\n    }, {\r\n      // any a= that we don't understand is kept verbatim on media.invalid\r\n      push: 'invalid',\r\n      names: ['value']\r\n    }]\r\n  };\r\n\r\n  // set sensible defaults to avoid polluting the grammar with boring details\r\n  Object.keys(grammar$1).forEach(function (key) {\r\n    var objs = grammar$1[key];\r\n    objs.forEach(function (obj) {\r\n      if (!obj.reg) {\r\n        obj.reg = /(.*)/;\r\n      }\r\n      if (!obj.format) {\r\n        obj.format = '%s';\r\n      }\r\n    });\r\n  });\r\n  return grammar.exports;\r\n}\r\n\r\nvar hasRequiredParser;\r\nfunction requireParser() {\r\n  if (hasRequiredParser) return parser;\r\n  hasRequiredParser = 1;\r\n  (function (exports) {\r\n    var toIntIfInt = function (v) {\r\n      return String(Number(v)) === v ? Number(v) : v;\r\n    };\r\n    var attachProperties = function (match, location, names, rawName) {\r\n      if (rawName && !names) {\r\n        location[rawName] = toIntIfInt(match[1]);\r\n      } else {\r\n        for (var i = 0; i < names.length; i += 1) {\r\n          if (match[i + 1] != null) {\r\n            location[names[i]] = toIntIfInt(match[i + 1]);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    var parseReg = function (obj, location, content) {\r\n      var needsBlank = obj.name && obj.names;\r\n      if (obj.push && !location[obj.push]) {\r\n        location[obj.push] = [];\r\n      } else if (needsBlank && !location[obj.name]) {\r\n        location[obj.name] = {};\r\n      }\r\n      var keyLocation = obj.push ? {} :\r\n      // blank object that will be pushed\r\n      needsBlank ? location[obj.name] : location; // otherwise, named location or root\r\n\r\n      attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\r\n      if (obj.push) {\r\n        location[obj.push].push(keyLocation);\r\n      }\r\n    };\r\n    var grammar = requireGrammar();\r\n    var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\r\n    exports.parse = function (sdp) {\r\n      var session = {},\r\n        media = [],\r\n        location = session; // points at where properties go under (one of the above)\r\n\r\n      // parse lines we understand\r\n      sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\r\n        var type = l[0];\r\n        var content = l.slice(2);\r\n        if (type === 'm') {\r\n          media.push({\r\n            rtp: [],\r\n            fmtp: []\r\n          });\r\n          location = media[media.length - 1]; // point at latest media line\r\n        }\r\n        for (var j = 0; j < (grammar[type] || []).length; j += 1) {\r\n          var obj = grammar[type][j];\r\n          if (obj.reg.test(content)) {\r\n            return parseReg(obj, location, content);\r\n          }\r\n        }\r\n      });\r\n      session.media = media; // link it up\r\n      return session;\r\n    };\r\n    var paramReducer = function (acc, expr) {\r\n      var s = expr.split(/=(.+)/, 2);\r\n      if (s.length === 2) {\r\n        acc[s[0]] = toIntIfInt(s[1]);\r\n      } else if (s.length === 1 && expr.length > 1) {\r\n        acc[s[0]] = undefined;\r\n      }\r\n      return acc;\r\n    };\r\n    exports.parseParams = function (str) {\r\n      return str.split(/;\\s?/).reduce(paramReducer, {});\r\n    };\r\n\r\n    // For backward compatibility - alias will be removed in 3.0.0\r\n    exports.parseFmtpConfig = exports.parseParams;\r\n    exports.parsePayloads = function (str) {\r\n      return str.toString().split(' ').map(Number);\r\n    };\r\n    exports.parseRemoteCandidates = function (str) {\r\n      var candidates = [];\r\n      var parts = str.split(' ').map(toIntIfInt);\r\n      for (var i = 0; i < parts.length; i += 3) {\r\n        candidates.push({\r\n          component: parts[i],\r\n          ip: parts[i + 1],\r\n          port: parts[i + 2]\r\n        });\r\n      }\r\n      return candidates;\r\n    };\r\n    exports.parseImageAttributes = function (str) {\r\n      return str.split(' ').map(function (item) {\r\n        return item.substring(1, item.length - 1).split(',').reduce(paramReducer, {});\r\n      });\r\n    };\r\n    exports.parseSimulcastStreamList = function (str) {\r\n      return str.split(';').map(function (stream) {\r\n        return stream.split(',').map(function (format) {\r\n          var scid,\r\n            paused = false;\r\n          if (format[0] !== '~') {\r\n            scid = toIntIfInt(format);\r\n          } else {\r\n            scid = toIntIfInt(format.substring(1, format.length));\r\n            paused = true;\r\n          }\r\n          return {\r\n            scid: scid,\r\n            paused: paused\r\n          };\r\n        });\r\n      });\r\n    };\r\n  })(parser);\r\n  return parser;\r\n}\r\n\r\nvar writer;\r\nvar hasRequiredWriter;\r\nfunction requireWriter() {\r\n  if (hasRequiredWriter) return writer;\r\n  hasRequiredWriter = 1;\r\n  var grammar = requireGrammar();\r\n\r\n  // customized util.format - discards excess arguments and can void middle ones\r\n  var formatRegExp = /%[sdv%]/g;\r\n  var format = function (formatStr) {\r\n    var i = 1;\r\n    var args = arguments;\r\n    var len = args.length;\r\n    return formatStr.replace(formatRegExp, function (x) {\r\n      if (i >= len) {\r\n        return x; // missing argument\r\n      }\r\n      var arg = args[i];\r\n      i += 1;\r\n      switch (x) {\r\n        case '%%':\r\n          return '%';\r\n        case '%s':\r\n          return String(arg);\r\n        case '%d':\r\n          return Number(arg);\r\n        case '%v':\r\n          return '';\r\n      }\r\n    });\r\n    // NB: we discard excess arguments - they are typically undefined from makeLine\r\n  };\r\n  var makeLine = function (type, obj, location) {\r\n    var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;\r\n    var args = [type + '=' + str];\r\n    if (obj.names) {\r\n      for (var i = 0; i < obj.names.length; i += 1) {\r\n        var n = obj.names[i];\r\n        if (obj.name) {\r\n          args.push(location[obj.name][n]);\r\n        } else {\r\n          // for mLine and push attributes\r\n          args.push(location[obj.names[i]]);\r\n        }\r\n      }\r\n    } else {\r\n      args.push(location[obj.name]);\r\n    }\r\n    return format.apply(null, args);\r\n  };\r\n\r\n  // RFC specified order\r\n  // TODO: extend this with all the rest\r\n  var defaultOuterOrder = ['v', 'o', 's', 'i', 'u', 'e', 'p', 'c', 'b', 't', 'r', 'z', 'a'];\r\n  var defaultInnerOrder = ['i', 'c', 'b', 'a'];\r\n  writer = function (session, opts) {\r\n    opts = opts || {};\r\n    // ensure certain properties exist\r\n    if (session.version == null) {\r\n      session.version = 0; // 'v=0' must be there (only defined version atm)\r\n    }\r\n    if (session.name == null) {\r\n      session.name = ' '; // 's= ' must be there if no meaningful name set\r\n    }\r\n    session.media.forEach(function (mLine) {\r\n      if (mLine.payloads == null) {\r\n        mLine.payloads = '';\r\n      }\r\n    });\r\n    var outerOrder = opts.outerOrder || defaultOuterOrder;\r\n    var innerOrder = opts.innerOrder || defaultInnerOrder;\r\n    var sdp = [];\r\n\r\n    // loop through outerOrder for matching properties on session\r\n    outerOrder.forEach(function (type) {\r\n      grammar[type].forEach(function (obj) {\r\n        if (obj.name in session && session[obj.name] != null) {\r\n          sdp.push(makeLine(type, obj, session));\r\n        } else if (obj.push in session && session[obj.push] != null) {\r\n          session[obj.push].forEach(function (el) {\r\n            sdp.push(makeLine(type, obj, el));\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    // then for each media line, follow the innerOrder\r\n    session.media.forEach(function (mLine) {\r\n      sdp.push(makeLine('m', grammar.m[0], mLine));\r\n      innerOrder.forEach(function (type) {\r\n        grammar[type].forEach(function (obj) {\r\n          if (obj.name in mLine && mLine[obj.name] != null) {\r\n            sdp.push(makeLine(type, obj, mLine));\r\n          } else if (obj.push in mLine && mLine[obj.push] != null) {\r\n            mLine[obj.push].forEach(function (el) {\r\n              sdp.push(makeLine(type, obj, el));\r\n            });\r\n          }\r\n        });\r\n      });\r\n    });\r\n    return sdp.join('\\r\\n') + '\\r\\n';\r\n  };\r\n  return writer;\r\n}\r\n\r\nvar hasRequiredLib;\r\nfunction requireLib() {\r\n  if (hasRequiredLib) return lib;\r\n  hasRequiredLib = 1;\r\n  var parser = requireParser();\r\n  var writer = requireWriter();\r\n  var grammar = requireGrammar();\r\n  lib.grammar = grammar;\r\n  lib.write = writer;\r\n  lib.parse = parser.parse;\r\n  lib.parseParams = parser.parseParams;\r\n  lib.parseFmtpConfig = parser.parseFmtpConfig; // Alias of parseParams().\r\n  lib.parsePayloads = parser.parsePayloads;\r\n  lib.parseRemoteCandidates = parser.parseRemoteCandidates;\r\n  lib.parseImageAttributes = parser.parseImageAttributes;\r\n  lib.parseSimulcastStreamList = parser.parseSimulcastStreamList;\r\n  return lib;\r\n}\r\n\r\nvar libExports = requireLib();\r\n\r\nfunction r(r, e, n) {\r\n  var i, t, o;\r\n  void 0 === e && (e = 50), void 0 === n && (n = {});\r\n  var a = null != (i = n.isImmediate) && i,\r\n    u = null != (t = n.callback) && t,\r\n    c = n.maxWait,\r\n    v = Date.now(),\r\n    l = [];\r\n  function f() {\r\n    if (void 0 !== c) {\r\n      var r = Date.now() - v;\r\n      if (r + e >= c) return c - r;\r\n    }\r\n    return e;\r\n  }\r\n  var d = function () {\r\n    var e = [].slice.call(arguments),\r\n      n = this;\r\n    return new Promise(function (i, t) {\r\n      var c = a && void 0 === o;\r\n      if (void 0 !== o && clearTimeout(o), o = setTimeout(function () {\r\n        if (o = void 0, v = Date.now(), !a) {\r\n          var i = r.apply(n, e);\r\n          u && u(i), l.forEach(function (r) {\r\n            return (0, r.resolve)(i);\r\n          }), l = [];\r\n        }\r\n      }, f()), c) {\r\n        var d = r.apply(n, e);\r\n        return u && u(d), i(d);\r\n      }\r\n      l.push({\r\n        resolve: i,\r\n        reject: t\r\n      });\r\n    });\r\n  };\r\n  return d.cancel = function (r) {\r\n    void 0 !== o && clearTimeout(o), l.forEach(function (e) {\r\n      return (0, e.reject)(r);\r\n    }), l = [];\r\n  }, d;\r\n}\r\n\r\n/* The svc codec (av1/vp9) would use a very low bitrate at the begining and\r\nincrease slowly by the bandwidth estimator until it reach the target bitrate. The\r\nprocess commonly cost more than 10 seconds cause subscriber will get blur video at\r\nthe first few seconds. So we use a 70% of target bitrate here as the start bitrate to\r\neliminate this issue.\r\n*/\r\nconst startBitrateForSVC = 0.7;\r\nconst debounceInterval = 20;\r\nconst PCEvents = {\r\n  NegotiationStarted: 'negotiationStarted',\r\n  NegotiationComplete: 'negotiationComplete',\r\n  RTPVideoPayloadTypes: 'rtpVideoPayloadTypes'\r\n};\r\n/** @internal */\r\nclass PCTransport extends eventsExports.EventEmitter {\r\n  get pc() {\r\n    if (!this._pc) {\r\n      this._pc = this.createPC();\r\n    }\r\n    return this._pc;\r\n  }\r\n  constructor(config) {\r\n    let loggerOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n    var _a;\r\n    super();\r\n    this.log = livekitLogger;\r\n    this.ddExtID = 0;\r\n    this.pendingCandidates = [];\r\n    this.restartingIce = false;\r\n    this.renegotiate = false;\r\n    this.trackBitrates = [];\r\n    this.remoteStereoMids = [];\r\n    this.remoteNackMids = [];\r\n    // debounced negotiate interface\r\n    this.negotiate = r(onError => __awaiter(this, void 0, void 0, function* () {\r\n      this.emit(PCEvents.NegotiationStarted);\r\n      try {\r\n        yield this.createAndSendOffer();\r\n      } catch (e) {\r\n        if (onError) {\r\n          onError(e);\r\n        } else {\r\n          throw e;\r\n        }\r\n      }\r\n    }), debounceInterval);\r\n    this.close = () => {\r\n      if (!this._pc) {\r\n        return;\r\n      }\r\n      this._pc.close();\r\n      this._pc.onconnectionstatechange = null;\r\n      this._pc.oniceconnectionstatechange = null;\r\n      this._pc.onicegatheringstatechange = null;\r\n      this._pc.ondatachannel = null;\r\n      this._pc.onnegotiationneeded = null;\r\n      this._pc.onsignalingstatechange = null;\r\n      this._pc.onicecandidate = null;\r\n      this._pc.ondatachannel = null;\r\n      this._pc.ontrack = null;\r\n      this._pc.onconnectionstatechange = null;\r\n      this._pc.oniceconnectionstatechange = null;\r\n      this._pc = null;\r\n    };\r\n    this.log = getLogger((_a = loggerOptions.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.PCTransport);\r\n    this.loggerOptions = loggerOptions;\r\n    this.config = config;\r\n    this._pc = this.createPC();\r\n  }\r\n  createPC() {\r\n    const pc = new RTCPeerConnection(this.config);\r\n    pc.onicecandidate = ev => {\r\n      var _a;\r\n      if (!ev.candidate) return;\r\n      (_a = this.onIceCandidate) === null || _a === void 0 ? void 0 : _a.call(this, ev.candidate);\r\n    };\r\n    pc.onicecandidateerror = ev => {\r\n      var _a;\r\n      (_a = this.onIceCandidateError) === null || _a === void 0 ? void 0 : _a.call(this, ev);\r\n    };\r\n    pc.oniceconnectionstatechange = () => {\r\n      var _a;\r\n      (_a = this.onIceConnectionStateChange) === null || _a === void 0 ? void 0 : _a.call(this, pc.iceConnectionState);\r\n    };\r\n    pc.onsignalingstatechange = () => {\r\n      var _a;\r\n      (_a = this.onSignalingStatechange) === null || _a === void 0 ? void 0 : _a.call(this, pc.signalingState);\r\n    };\r\n    pc.onconnectionstatechange = () => {\r\n      var _a;\r\n      (_a = this.onConnectionStateChange) === null || _a === void 0 ? void 0 : _a.call(this, pc.connectionState);\r\n    };\r\n    pc.ondatachannel = ev => {\r\n      var _a;\r\n      (_a = this.onDataChannel) === null || _a === void 0 ? void 0 : _a.call(this, ev);\r\n    };\r\n    pc.ontrack = ev => {\r\n      var _a;\r\n      (_a = this.onTrack) === null || _a === void 0 ? void 0 : _a.call(this, ev);\r\n    };\r\n    return pc;\r\n  }\r\n  get logContext() {\r\n    var _a, _b;\r\n    return Object.assign({}, (_b = (_a = this.loggerOptions).loggerContextCb) === null || _b === void 0 ? void 0 : _b.call(_a));\r\n  }\r\n  get isICEConnected() {\r\n    return this._pc !== null && (this.pc.iceConnectionState === 'connected' || this.pc.iceConnectionState === 'completed');\r\n  }\r\n  addIceCandidate(candidate) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.pc.remoteDescription && !this.restartingIce) {\r\n        return this.pc.addIceCandidate(candidate);\r\n      }\r\n      this.pendingCandidates.push(candidate);\r\n    });\r\n  }\r\n  setRemoteDescription(sd) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      let mungedSDP = undefined;\r\n      if (sd.type === 'offer') {\r\n        let {\r\n          stereoMids,\r\n          nackMids\r\n        } = extractStereoAndNackAudioFromOffer(sd);\r\n        this.remoteStereoMids = stereoMids;\r\n        this.remoteNackMids = nackMids;\r\n      } else if (sd.type === 'answer') {\r\n        const sdpParsed = libExports.parse((_a = sd.sdp) !== null && _a !== void 0 ? _a : '');\r\n        sdpParsed.media.forEach(media => {\r\n          if (media.type === 'audio') {\r\n            // mung sdp for opus bitrate settings\r\n            this.trackBitrates.some(trackbr => {\r\n              if (!trackbr.transceiver || media.mid != trackbr.transceiver.mid) {\r\n                return false;\r\n              }\r\n              let codecPayload = 0;\r\n              media.rtp.some(rtp => {\r\n                if (rtp.codec.toUpperCase() === trackbr.codec.toUpperCase()) {\r\n                  codecPayload = rtp.payload;\r\n                  return true;\r\n                }\r\n                return false;\r\n              });\r\n              if (codecPayload === 0) {\r\n                return true;\r\n              }\r\n              let fmtpFound = false;\r\n              for (const fmtp of media.fmtp) {\r\n                if (fmtp.payload === codecPayload) {\r\n                  fmtp.config = fmtp.config.split(';').filter(attr => !attr.includes('maxaveragebitrate')).join(';');\r\n                  if (trackbr.maxbr > 0) {\r\n                    fmtp.config += \";maxaveragebitrate=\".concat(trackbr.maxbr * 1000);\r\n                  }\r\n                  fmtpFound = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!fmtpFound) {\r\n                if (trackbr.maxbr > 0) {\r\n                  media.fmtp.push({\r\n                    payload: codecPayload,\r\n                    config: \"maxaveragebitrate=\".concat(trackbr.maxbr * 1000)\r\n                  });\r\n                }\r\n              }\r\n              return true;\r\n            });\r\n          }\r\n        });\r\n        mungedSDP = libExports.write(sdpParsed);\r\n      }\r\n      yield this.setMungedSDP(sd, mungedSDP, true);\r\n      this.pendingCandidates.forEach(candidate => {\r\n        this.pc.addIceCandidate(candidate);\r\n      });\r\n      this.pendingCandidates = [];\r\n      this.restartingIce = false;\r\n      if (this.renegotiate) {\r\n        this.renegotiate = false;\r\n        yield this.createAndSendOffer();\r\n      } else if (sd.type === 'answer') {\r\n        this.emit(PCEvents.NegotiationComplete);\r\n        if (sd.sdp) {\r\n          const sdpParsed = libExports.parse(sd.sdp);\r\n          sdpParsed.media.forEach(media => {\r\n            if (media.type === 'video') {\r\n              this.emit(PCEvents.RTPVideoPayloadTypes, media.rtp);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n  createAndSendOffer(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (this.onOffer === undefined) {\r\n        return;\r\n      }\r\n      if (options === null || options === void 0 ? void 0 : options.iceRestart) {\r\n        this.log.debug('restarting ICE', this.logContext);\r\n        this.restartingIce = true;\r\n      }\r\n      if (this._pc && this._pc.signalingState === 'have-local-offer') {\r\n        // we're waiting for the peer to accept our offer, so we'll just wait\r\n        // the only exception to this is when ICE restart is needed\r\n        const currentSD = this._pc.remoteDescription;\r\n        if ((options === null || options === void 0 ? void 0 : options.iceRestart) && currentSD) {\r\n          // TODO: handle when ICE restart is needed but we don't have a remote description\r\n          // the best thing to do is to recreate the peerconnection\r\n          yield this._pc.setRemoteDescription(currentSD);\r\n        } else {\r\n          this.renegotiate = true;\r\n          return;\r\n        }\r\n      } else if (!this._pc || this._pc.signalingState === 'closed') {\r\n        this.log.warn('could not createOffer with closed peer connection', this.logContext);\r\n        return;\r\n      }\r\n      // actually negotiate\r\n      this.log.debug('starting to negotiate', this.logContext);\r\n      const offer = yield this.pc.createOffer(options);\r\n      this.log.debug('original offer', Object.assign({\r\n        sdp: offer.sdp\r\n      }, this.logContext));\r\n      const sdpParsed = libExports.parse((_a = offer.sdp) !== null && _a !== void 0 ? _a : '');\r\n      sdpParsed.media.forEach(media => {\r\n        ensureIPAddrMatchVersion(media);\r\n        if (media.type === 'audio') {\r\n          ensureAudioNackAndStereo(media, [], []);\r\n        } else if (media.type === 'video') {\r\n          this.trackBitrates.some(trackbr => {\r\n            if (!media.msid || !trackbr.cid || !media.msid.includes(trackbr.cid)) {\r\n              return false;\r\n            }\r\n            let codecPayload = 0;\r\n            media.rtp.some(rtp => {\r\n              if (rtp.codec.toUpperCase() === trackbr.codec.toUpperCase()) {\r\n                codecPayload = rtp.payload;\r\n                return true;\r\n              }\r\n              return false;\r\n            });\r\n            if (codecPayload === 0) {\r\n              return true;\r\n            }\r\n            if (isSVCCodec(trackbr.codec)) {\r\n              this.ensureVideoDDExtensionForSVC(media, sdpParsed);\r\n            }\r\n            // TODO: av1 slow starting issue already fixed in chrome 124, clean this after some versions\r\n            // mung sdp for av1 bitrate setting that can't apply by sendEncoding\r\n            if (trackbr.codec !== 'av1') {\r\n              return true;\r\n            }\r\n            const startBitrate = Math.round(trackbr.maxbr * startBitrateForSVC);\r\n            for (const fmtp of media.fmtp) {\r\n              if (fmtp.payload === codecPayload) {\r\n                // if another track's fmtp already is set, we cannot override the bitrate\r\n                // this has the unfortunate consequence of being forced to use the\r\n                // initial track's bitrate for all tracks\r\n                if (!fmtp.config.includes('x-google-start-bitrate')) {\r\n                  fmtp.config += \";x-google-start-bitrate=\".concat(startBitrate);\r\n                }\r\n                break;\r\n              }\r\n            }\r\n            return true;\r\n          });\r\n        }\r\n      });\r\n      yield this.setMungedSDP(offer, libExports.write(sdpParsed));\r\n      this.onOffer(offer);\r\n    });\r\n  }\r\n  createAndSetAnswer() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const answer = yield this.pc.createAnswer();\r\n      const sdpParsed = libExports.parse((_a = answer.sdp) !== null && _a !== void 0 ? _a : '');\r\n      sdpParsed.media.forEach(media => {\r\n        ensureIPAddrMatchVersion(media);\r\n        if (media.type === 'audio') {\r\n          ensureAudioNackAndStereo(media, this.remoteStereoMids, this.remoteNackMids);\r\n        }\r\n      });\r\n      yield this.setMungedSDP(answer, libExports.write(sdpParsed));\r\n      return answer;\r\n    });\r\n  }\r\n  createDataChannel(label, dataChannelDict) {\r\n    return this.pc.createDataChannel(label, dataChannelDict);\r\n  }\r\n  addTransceiver(mediaStreamTrack, transceiverInit) {\r\n    return this.pc.addTransceiver(mediaStreamTrack, transceiverInit);\r\n  }\r\n  addTrack(track) {\r\n    if (!this._pc) {\r\n      throw new UnexpectedConnectionState('PC closed, cannot add track');\r\n    }\r\n    return this._pc.addTrack(track);\r\n  }\r\n  setTrackCodecBitrate(info) {\r\n    this.trackBitrates.push(info);\r\n  }\r\n  setConfiguration(rtcConfig) {\r\n    var _a;\r\n    if (!this._pc) {\r\n      throw new UnexpectedConnectionState('PC closed, cannot configure');\r\n    }\r\n    return (_a = this._pc) === null || _a === void 0 ? void 0 : _a.setConfiguration(rtcConfig);\r\n  }\r\n  canRemoveTrack() {\r\n    var _a;\r\n    return !!((_a = this._pc) === null || _a === void 0 ? void 0 : _a.removeTrack);\r\n  }\r\n  removeTrack(sender) {\r\n    var _a;\r\n    return (_a = this._pc) === null || _a === void 0 ? void 0 : _a.removeTrack(sender);\r\n  }\r\n  getConnectionState() {\r\n    var _a, _b;\r\n    return (_b = (_a = this._pc) === null || _a === void 0 ? void 0 : _a.connectionState) !== null && _b !== void 0 ? _b : 'closed';\r\n  }\r\n  getICEConnectionState() {\r\n    var _a, _b;\r\n    return (_b = (_a = this._pc) === null || _a === void 0 ? void 0 : _a.iceConnectionState) !== null && _b !== void 0 ? _b : 'closed';\r\n  }\r\n  getSignallingState() {\r\n    var _a, _b;\r\n    return (_b = (_a = this._pc) === null || _a === void 0 ? void 0 : _a.signalingState) !== null && _b !== void 0 ? _b : 'closed';\r\n  }\r\n  getTransceivers() {\r\n    var _a, _b;\r\n    return (_b = (_a = this._pc) === null || _a === void 0 ? void 0 : _a.getTransceivers()) !== null && _b !== void 0 ? _b : [];\r\n  }\r\n  getSenders() {\r\n    var _a, _b;\r\n    return (_b = (_a = this._pc) === null || _a === void 0 ? void 0 : _a.getSenders()) !== null && _b !== void 0 ? _b : [];\r\n  }\r\n  getLocalDescription() {\r\n    var _a;\r\n    return (_a = this._pc) === null || _a === void 0 ? void 0 : _a.localDescription;\r\n  }\r\n  getRemoteDescription() {\r\n    var _a;\r\n    return (_a = this.pc) === null || _a === void 0 ? void 0 : _a.remoteDescription;\r\n  }\r\n  getStats() {\r\n    return this.pc.getStats();\r\n  }\r\n  getConnectedAddress() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (!this._pc) {\r\n        return;\r\n      }\r\n      let selectedCandidatePairId = '';\r\n      const candidatePairs = new Map();\r\n      // id -> candidate ip\r\n      const candidates = new Map();\r\n      const stats = yield this._pc.getStats();\r\n      stats.forEach(v => {\r\n        switch (v.type) {\r\n          case 'transport':\r\n            selectedCandidatePairId = v.selectedCandidatePairId;\r\n            break;\r\n          case 'candidate-pair':\r\n            if (selectedCandidatePairId === '' && v.selected) {\r\n              selectedCandidatePairId = v.id;\r\n            }\r\n            candidatePairs.set(v.id, v);\r\n            break;\r\n          case 'remote-candidate':\r\n            candidates.set(v.id, \"\".concat(v.address, \":\").concat(v.port));\r\n            break;\r\n        }\r\n      });\r\n      if (selectedCandidatePairId === '') {\r\n        return undefined;\r\n      }\r\n      const selectedID = (_a = candidatePairs.get(selectedCandidatePairId)) === null || _a === void 0 ? void 0 : _a.remoteCandidateId;\r\n      if (selectedID === undefined) {\r\n        return undefined;\r\n      }\r\n      return candidates.get(selectedID);\r\n    });\r\n  }\r\n  setMungedSDP(sd, munged, remote) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (munged) {\r\n        const originalSdp = sd.sdp;\r\n        sd.sdp = munged;\r\n        try {\r\n          this.log.debug(\"setting munged \".concat(remote ? 'remote' : 'local', \" description\"), this.logContext);\r\n          if (remote) {\r\n            yield this.pc.setRemoteDescription(sd);\r\n          } else {\r\n            yield this.pc.setLocalDescription(sd);\r\n          }\r\n          return;\r\n        } catch (e) {\r\n          this.log.warn(\"not able to set \".concat(sd.type, \", falling back to unmodified sdp\"), Object.assign(Object.assign({}, this.logContext), {\r\n            error: e,\r\n            sdp: munged\r\n          }));\r\n          sd.sdp = originalSdp;\r\n        }\r\n      }\r\n      try {\r\n        if (remote) {\r\n          yield this.pc.setRemoteDescription(sd);\r\n        } else {\r\n          yield this.pc.setLocalDescription(sd);\r\n        }\r\n      } catch (e) {\r\n        let msg = 'unknown error';\r\n        if (e instanceof Error) {\r\n          msg = e.message;\r\n        } else if (typeof e === 'string') {\r\n          msg = e;\r\n        }\r\n        const fields = {\r\n          error: msg,\r\n          sdp: sd.sdp\r\n        };\r\n        if (!remote && this.pc.remoteDescription) {\r\n          fields.remoteSdp = this.pc.remoteDescription;\r\n        }\r\n        this.log.error(\"unable to set \".concat(sd.type), Object.assign(Object.assign({}, this.logContext), {\r\n          fields\r\n        }));\r\n        throw new NegotiationError(msg);\r\n      }\r\n    });\r\n  }\r\n  ensureVideoDDExtensionForSVC(media, sdp) {\r\n    var _a, _b;\r\n    const ddFound = (_a = media.ext) === null || _a === void 0 ? void 0 : _a.some(ext => {\r\n      if (ext.uri === ddExtensionURI) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    if (!ddFound) {\r\n      if (this.ddExtID === 0) {\r\n        let maxID = 0;\r\n        sdp.media.forEach(m => {\r\n          var _a;\r\n          if (m.type !== 'video') {\r\n            return;\r\n          }\r\n          (_a = m.ext) === null || _a === void 0 ? void 0 : _a.forEach(ext => {\r\n            if (ext.value > maxID) {\r\n              maxID = ext.value;\r\n            }\r\n          });\r\n        });\r\n        this.ddExtID = maxID + 1;\r\n      }\r\n      (_b = media.ext) === null || _b === void 0 ? void 0 : _b.push({\r\n        value: this.ddExtID,\r\n        uri: ddExtensionURI\r\n      });\r\n    }\r\n  }\r\n}\r\nfunction ensureAudioNackAndStereo(media, stereoMids, nackMids) {\r\n  // found opus codec to add nack fb\r\n  let opusPayload = 0;\r\n  media.rtp.some(rtp => {\r\n    if (rtp.codec === 'opus') {\r\n      opusPayload = rtp.payload;\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n  // add nack rtcpfb if not exist\r\n  if (opusPayload > 0) {\r\n    if (!media.rtcpFb) {\r\n      media.rtcpFb = [];\r\n    }\r\n    if (nackMids.includes(media.mid) && !media.rtcpFb.some(fb => fb.payload === opusPayload && fb.type === 'nack')) {\r\n      media.rtcpFb.push({\r\n        payload: opusPayload,\r\n        type: 'nack'\r\n      });\r\n    }\r\n    if (stereoMids.includes(media.mid)) {\r\n      media.fmtp.some(fmtp => {\r\n        if (fmtp.payload === opusPayload) {\r\n          if (!fmtp.config.includes('stereo=1')) {\r\n            fmtp.config += ';stereo=1';\r\n          }\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n  }\r\n}\r\nfunction extractStereoAndNackAudioFromOffer(offer) {\r\n  var _a;\r\n  const stereoMids = [];\r\n  const nackMids = [];\r\n  const sdpParsed = libExports.parse((_a = offer.sdp) !== null && _a !== void 0 ? _a : '');\r\n  let opusPayload = 0;\r\n  sdpParsed.media.forEach(media => {\r\n    var _a;\r\n    if (media.type === 'audio') {\r\n      media.rtp.some(rtp => {\r\n        if (rtp.codec === 'opus') {\r\n          opusPayload = rtp.payload;\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n      if ((_a = media.rtcpFb) === null || _a === void 0 ? void 0 : _a.some(fb => fb.payload === opusPayload && fb.type === 'nack')) {\r\n        nackMids.push(media.mid);\r\n      }\r\n      media.fmtp.some(fmtp => {\r\n        if (fmtp.payload === opusPayload) {\r\n          if (fmtp.config.includes('sprop-stereo=1')) {\r\n            stereoMids.push(media.mid);\r\n          }\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n    }\r\n  });\r\n  return {\r\n    stereoMids,\r\n    nackMids\r\n  };\r\n}\r\nfunction ensureIPAddrMatchVersion(media) {\r\n  // Chrome could generate sdp with c = IN IP4 <ipv6 addr>\r\n  // in edge case and return error when set sdp.This is not a\r\n  // sdk error but correct it if the issue detected.\r\n  if (media.connection) {\r\n    const isV6 = media.connection.ip.indexOf(':') >= 0;\r\n    if (media.connection.version === 4 && isV6 || media.connection.version === 6 && !isV6) {\r\n      // fallback to dummy address\r\n      media.connection.ip = '0.0.0.0';\r\n      media.connection.version = 4;\r\n    }\r\n  }\r\n}\r\n\r\nconst defaultVideoCodec = 'vp8';\r\nconst publishDefaults = {\r\n  audioPreset: AudioPresets.music,\r\n  dtx: true,\r\n  red: true,\r\n  forceStereo: false,\r\n  simulcast: true,\r\n  screenShareEncoding: ScreenSharePresets.h1080fps15.encoding,\r\n  stopMicTrackOnMute: false,\r\n  videoCodec: defaultVideoCodec,\r\n  backupCodec: true,\r\n  preConnectBuffer: false\r\n};\r\nconst audioDefaults = {\r\n  deviceId: {\r\n    ideal: 'default'\r\n  },\r\n  autoGainControl: true,\r\n  echoCancellation: true,\r\n  noiseSuppression: true,\r\n  voiceIsolation: true\r\n};\r\nconst videoDefaults = {\r\n  deviceId: {\r\n    ideal: 'default'\r\n  },\r\n  resolution: VideoPresets.h720.resolution\r\n};\r\nconst roomOptionDefaults = {\r\n  adaptiveStream: false,\r\n  dynacast: false,\r\n  stopLocalTrackOnUnpublish: true,\r\n  reconnectPolicy: new DefaultReconnectPolicy(),\r\n  disconnectOnPageLeave: true,\r\n  webAudioMix: false\r\n};\r\nconst roomConnectOptionDefaults = {\r\n  autoSubscribe: true,\r\n  maxRetries: 1,\r\n  peerConnectionTimeout: 15000,\r\n  websocketTimeout: 15000\r\n};\r\n\r\nvar PCTransportState;\r\n(function (PCTransportState) {\r\n  PCTransportState[PCTransportState[\"NEW\"] = 0] = \"NEW\";\r\n  PCTransportState[PCTransportState[\"CONNECTING\"] = 1] = \"CONNECTING\";\r\n  PCTransportState[PCTransportState[\"CONNECTED\"] = 2] = \"CONNECTED\";\r\n  PCTransportState[PCTransportState[\"FAILED\"] = 3] = \"FAILED\";\r\n  PCTransportState[PCTransportState[\"CLOSING\"] = 4] = \"CLOSING\";\r\n  PCTransportState[PCTransportState[\"CLOSED\"] = 5] = \"CLOSED\";\r\n})(PCTransportState || (PCTransportState = {}));\r\nclass PCTransportManager {\r\n  get needsPublisher() {\r\n    return this.isPublisherConnectionRequired;\r\n  }\r\n  get needsSubscriber() {\r\n    return this.isSubscriberConnectionRequired;\r\n  }\r\n  get currentState() {\r\n    return this.state;\r\n  }\r\n  constructor(rtcConfig, subscriberPrimary, loggerOptions) {\r\n    var _a;\r\n    this.peerConnectionTimeout = roomConnectOptionDefaults.peerConnectionTimeout;\r\n    this.log = livekitLogger;\r\n    this.updateState = () => {\r\n      var _a;\r\n      const previousState = this.state;\r\n      const connectionStates = this.requiredTransports.map(tr => tr.getConnectionState());\r\n      if (connectionStates.every(st => st === 'connected')) {\r\n        this.state = PCTransportState.CONNECTED;\r\n      } else if (connectionStates.some(st => st === 'failed')) {\r\n        this.state = PCTransportState.FAILED;\r\n      } else if (connectionStates.some(st => st === 'connecting')) {\r\n        this.state = PCTransportState.CONNECTING;\r\n      } else if (connectionStates.every(st => st === 'closed')) {\r\n        this.state = PCTransportState.CLOSED;\r\n      } else if (connectionStates.some(st => st === 'closed')) {\r\n        this.state = PCTransportState.CLOSING;\r\n      } else if (connectionStates.every(st => st === 'new')) {\r\n        this.state = PCTransportState.NEW;\r\n      }\r\n      if (previousState !== this.state) {\r\n        this.log.debug(\"pc state change: from \".concat(PCTransportState[previousState], \" to \").concat(PCTransportState[this.state]), this.logContext);\r\n        (_a = this.onStateChange) === null || _a === void 0 ? void 0 : _a.call(this, this.state, this.publisher.getConnectionState(), this.subscriber.getConnectionState());\r\n      }\r\n    };\r\n    this.log = getLogger((_a = loggerOptions.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.PCManager);\r\n    this.loggerOptions = loggerOptions;\r\n    this.isPublisherConnectionRequired = !subscriberPrimary;\r\n    this.isSubscriberConnectionRequired = subscriberPrimary;\r\n    this.publisher = new PCTransport(rtcConfig, loggerOptions);\r\n    this.subscriber = new PCTransport(rtcConfig, loggerOptions);\r\n    this.publisher.onConnectionStateChange = this.updateState;\r\n    this.subscriber.onConnectionStateChange = this.updateState;\r\n    this.publisher.onIceConnectionStateChange = this.updateState;\r\n    this.subscriber.onIceConnectionStateChange = this.updateState;\r\n    this.publisher.onSignalingStatechange = this.updateState;\r\n    this.subscriber.onSignalingStatechange = this.updateState;\r\n    this.publisher.onIceCandidate = candidate => {\r\n      var _a;\r\n      (_a = this.onIceCandidate) === null || _a === void 0 ? void 0 : _a.call(this, candidate, SignalTarget.PUBLISHER);\r\n    };\r\n    this.subscriber.onIceCandidate = candidate => {\r\n      var _a;\r\n      (_a = this.onIceCandidate) === null || _a === void 0 ? void 0 : _a.call(this, candidate, SignalTarget.SUBSCRIBER);\r\n    };\r\n    // in subscriber primary mode, server side opens sub data channels.\r\n    this.subscriber.onDataChannel = ev => {\r\n      var _a;\r\n      (_a = this.onDataChannel) === null || _a === void 0 ? void 0 : _a.call(this, ev);\r\n    };\r\n    this.subscriber.onTrack = ev => {\r\n      var _a;\r\n      (_a = this.onTrack) === null || _a === void 0 ? void 0 : _a.call(this, ev);\r\n    };\r\n    this.publisher.onOffer = offer => {\r\n      var _a;\r\n      (_a = this.onPublisherOffer) === null || _a === void 0 ? void 0 : _a.call(this, offer);\r\n    };\r\n    this.state = PCTransportState.NEW;\r\n    this.connectionLock = new _();\r\n    this.remoteOfferLock = new _();\r\n  }\r\n  get logContext() {\r\n    var _a, _b;\r\n    return Object.assign({}, (_b = (_a = this.loggerOptions).loggerContextCb) === null || _b === void 0 ? void 0 : _b.call(_a));\r\n  }\r\n  requirePublisher() {\r\n    let require = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n    this.isPublisherConnectionRequired = require;\r\n    this.updateState();\r\n  }\r\n  requireSubscriber() {\r\n    let require = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n    this.isSubscriberConnectionRequired = require;\r\n    this.updateState();\r\n  }\r\n  createAndSendPublisherOffer(options) {\r\n    return this.publisher.createAndSendOffer(options);\r\n  }\r\n  setPublisherAnswer(sd) {\r\n    return this.publisher.setRemoteDescription(sd);\r\n  }\r\n  removeTrack(sender) {\r\n    return this.publisher.removeTrack(sender);\r\n  }\r\n  close() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.publisher && this.publisher.getSignallingState() !== 'closed') {\r\n        const publisher = this.publisher;\r\n        for (const sender of publisher.getSenders()) {\r\n          try {\r\n            // TODO: react-native-webrtc doesn't have removeTrack yet.\r\n            if (publisher.canRemoveTrack()) {\r\n              publisher.removeTrack(sender);\r\n            }\r\n          } catch (e) {\r\n            this.log.warn('could not removeTrack', Object.assign(Object.assign({}, this.logContext), {\r\n              error: e\r\n            }));\r\n          }\r\n        }\r\n      }\r\n      yield Promise.all([this.publisher.close(), this.subscriber.close()]);\r\n      this.updateState();\r\n    });\r\n  }\r\n  triggerIceRestart() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.subscriber.restartingIce = true;\r\n      // only restart publisher if it's needed\r\n      if (this.needsPublisher) {\r\n        yield this.createAndSendPublisherOffer({\r\n          iceRestart: true\r\n        });\r\n      }\r\n    });\r\n  }\r\n  addIceCandidate(candidate, target) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (target === SignalTarget.PUBLISHER) {\r\n        yield this.publisher.addIceCandidate(candidate);\r\n      } else {\r\n        yield this.subscriber.addIceCandidate(candidate);\r\n      }\r\n    });\r\n  }\r\n  createSubscriberAnswerFromOffer(sd) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.log.debug('received server offer', Object.assign(Object.assign({}, this.logContext), {\r\n        RTCSdpType: sd.type,\r\n        sdp: sd.sdp,\r\n        signalingState: this.subscriber.getSignallingState().toString()\r\n      }));\r\n      const unlock = yield this.remoteOfferLock.lock();\r\n      try {\r\n        yield this.subscriber.setRemoteDescription(sd);\r\n        // answer the offer\r\n        const answer = yield this.subscriber.createAndSetAnswer();\r\n        return answer;\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  updateConfiguration(config, iceRestart) {\r\n    this.publisher.setConfiguration(config);\r\n    this.subscriber.setConfiguration(config);\r\n    if (iceRestart) {\r\n      this.triggerIceRestart();\r\n    }\r\n  }\r\n  ensurePCTransportConnection(abortController, timeout) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const unlock = yield this.connectionLock.lock();\r\n      try {\r\n        if (this.isPublisherConnectionRequired && this.publisher.getConnectionState() !== 'connected' && this.publisher.getConnectionState() !== 'connecting') {\r\n          this.log.debug('negotiation required, start negotiating', this.logContext);\r\n          this.publisher.negotiate();\r\n        }\r\n        yield Promise.all((_a = this.requiredTransports) === null || _a === void 0 ? void 0 : _a.map(transport => this.ensureTransportConnected(transport, abortController, timeout)));\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  negotiate(abortController) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n        const negotiationTimeout = setTimeout(() => {\r\n          reject('negotiation timed out');\r\n        }, this.peerConnectionTimeout);\r\n        const abortHandler = () => {\r\n          clearTimeout(negotiationTimeout);\r\n          reject('negotiation aborted');\r\n        };\r\n        abortController.signal.addEventListener('abort', abortHandler);\r\n        this.publisher.once(PCEvents.NegotiationStarted, () => {\r\n          if (abortController.signal.aborted) {\r\n            return;\r\n          }\r\n          this.publisher.once(PCEvents.NegotiationComplete, () => {\r\n            clearTimeout(negotiationTimeout);\r\n            resolve();\r\n          });\r\n        });\r\n        yield this.publisher.negotiate(e => {\r\n          clearTimeout(negotiationTimeout);\r\n          reject(e);\r\n        });\r\n      }));\r\n    });\r\n  }\r\n  addPublisherTransceiver(track, transceiverInit) {\r\n    return this.publisher.addTransceiver(track, transceiverInit);\r\n  }\r\n  addPublisherTrack(track) {\r\n    return this.publisher.addTrack(track);\r\n  }\r\n  createPublisherDataChannel(label, dataChannelDict) {\r\n    return this.publisher.createDataChannel(label, dataChannelDict);\r\n  }\r\n  /**\r\n   * Returns the first required transport's address if no explicit target is specified\r\n   */\r\n  getConnectedAddress(target) {\r\n    if (target === SignalTarget.PUBLISHER) {\r\n      return this.publisher.getConnectedAddress();\r\n    } else if (target === SignalTarget.SUBSCRIBER) {\r\n      return this.publisher.getConnectedAddress();\r\n    }\r\n    return this.requiredTransports[0].getConnectedAddress();\r\n  }\r\n  get requiredTransports() {\r\n    const transports = [];\r\n    if (this.isPublisherConnectionRequired) {\r\n      transports.push(this.publisher);\r\n    }\r\n    if (this.isSubscriberConnectionRequired) {\r\n      transports.push(this.subscriber);\r\n    }\r\n    return transports;\r\n  }\r\n  ensureTransportConnected(pcTransport_1, abortController_1) {\r\n    return __awaiter(this, arguments, void 0, function (pcTransport, abortController) {\r\n      var _this = this;\r\n      let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.peerConnectionTimeout;\r\n      return function* () {\r\n        const connectionState = pcTransport.getConnectionState();\r\n        if (connectionState === 'connected') {\r\n          return;\r\n        }\r\n        return new Promise((resolve, reject) => __awaiter(_this, void 0, void 0, function* () {\r\n          const abortHandler = () => {\r\n            this.log.warn('abort transport connection', this.logContext);\r\n            CriticalTimers.clearTimeout(connectTimeout);\r\n            reject(new ConnectionError('room connection has been cancelled', ConnectionErrorReason.Cancelled));\r\n          };\r\n          if (abortController === null || abortController === void 0 ? void 0 : abortController.signal.aborted) {\r\n            abortHandler();\r\n          }\r\n          abortController === null || abortController === void 0 ? void 0 : abortController.signal.addEventListener('abort', abortHandler);\r\n          const connectTimeout = CriticalTimers.setTimeout(() => {\r\n            abortController === null || abortController === void 0 ? void 0 : abortController.signal.removeEventListener('abort', abortHandler);\r\n            reject(new ConnectionError('could not establish pc connection', ConnectionErrorReason.InternalError));\r\n          }, timeout);\r\n          while (this.state !== PCTransportState.CONNECTED) {\r\n            yield sleep(50); // FIXME we shouldn't rely on `sleep` in the connection paths, as it invokes `setTimeout` which can be drastically throttled by browser implementations\r\n            if (abortController === null || abortController === void 0 ? void 0 : abortController.signal.aborted) {\r\n              reject(new ConnectionError('room connection has been cancelled', ConnectionErrorReason.Cancelled));\r\n              return;\r\n            }\r\n          }\r\n          CriticalTimers.clearTimeout(connectTimeout);\r\n          abortController === null || abortController === void 0 ? void 0 : abortController.signal.removeEventListener('abort', abortHandler);\r\n          resolve();\r\n        }));\r\n      }();\r\n    });\r\n  }\r\n}\r\n\r\n// SPDX-FileCopyrightText: 2024 LiveKit, Inc.\r\n//\r\n// SPDX-License-Identifier: Apache-2.0\r\n/**\r\n * Specialized error handling for RPC methods.\r\n *\r\n * Instances of this type, when thrown in a method handler, will have their `message`\r\n * serialized and sent across the wire. The sender will receive an equivalent error on the other side.\r\n *\r\n * Built-in types are included but developers may use any string, with a max length of 256 bytes.\r\n */\r\nclass RpcError extends Error {\r\n  /**\r\n   * Creates an error object with the given code and message, plus an optional data payload.\r\n   *\r\n   * If thrown in an RPC method handler, the error will be sent back to the caller.\r\n   *\r\n   * Error codes 1001-1999 are reserved for built-in errors (see RpcError.ErrorCode for their meanings).\r\n   */\r\n  constructor(code, message, data) {\r\n    super(message);\r\n    this.code = code;\r\n    this.message = truncateBytes(message, RpcError.MAX_MESSAGE_BYTES);\r\n    this.data = data ? truncateBytes(data, RpcError.MAX_DATA_BYTES) : undefined;\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  static fromProto(proto) {\r\n    return new RpcError(proto.code, proto.message, proto.data);\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  toProto() {\r\n    return new RpcError$1({\r\n      code: this.code,\r\n      message: this.message,\r\n      data: this.data\r\n    });\r\n  }\r\n  /**\r\n   * Creates an error object from the code, with an auto-populated message.\r\n   *\r\n   * @internal\r\n   */\r\n  static builtIn(key, data) {\r\n    return new RpcError(RpcError.ErrorCode[key], RpcError.ErrorMessage[key], data);\r\n  }\r\n}\r\nRpcError.MAX_MESSAGE_BYTES = 256;\r\nRpcError.MAX_DATA_BYTES = 15360; // 15 KB\r\nRpcError.ErrorCode = {\r\n  APPLICATION_ERROR: 1500,\r\n  CONNECTION_TIMEOUT: 1501,\r\n  RESPONSE_TIMEOUT: 1502,\r\n  RECIPIENT_DISCONNECTED: 1503,\r\n  RESPONSE_PAYLOAD_TOO_LARGE: 1504,\r\n  SEND_FAILED: 1505,\r\n  UNSUPPORTED_METHOD: 1400,\r\n  RECIPIENT_NOT_FOUND: 1401,\r\n  REQUEST_PAYLOAD_TOO_LARGE: 1402,\r\n  UNSUPPORTED_SERVER: 1403,\r\n  UNSUPPORTED_VERSION: 1404\r\n};\r\n/**\r\n * @internal\r\n */\r\nRpcError.ErrorMessage = {\r\n  APPLICATION_ERROR: 'Application error in method handler',\r\n  CONNECTION_TIMEOUT: 'Connection timeout',\r\n  RESPONSE_TIMEOUT: 'Response timeout',\r\n  RECIPIENT_DISCONNECTED: 'Recipient disconnected',\r\n  RESPONSE_PAYLOAD_TOO_LARGE: 'Response payload too large',\r\n  SEND_FAILED: 'Failed to send',\r\n  UNSUPPORTED_METHOD: 'Method not supported at destination',\r\n  RECIPIENT_NOT_FOUND: 'Recipient not found',\r\n  REQUEST_PAYLOAD_TOO_LARGE: 'Request payload too large',\r\n  UNSUPPORTED_SERVER: 'RPC not supported by server',\r\n  UNSUPPORTED_VERSION: 'Unsupported RPC version'\r\n};\r\n/*\r\n * Maximum payload size for RPC requests and responses. If a payload exceeds this size,\r\n * the RPC call will fail with a REQUEST_PAYLOAD_TOO_LARGE(1402) or RESPONSE_PAYLOAD_TOO_LARGE(1504) error.\r\n */\r\nconst MAX_PAYLOAD_BYTES = 15360; // 15 KB\r\n/**\r\n * @internal\r\n */\r\nfunction byteLength(str) {\r\n  const encoder = new TextEncoder();\r\n  return encoder.encode(str).length;\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction truncateBytes(str, maxBytes) {\r\n  if (byteLength(str) <= maxBytes) {\r\n    return str;\r\n  }\r\n  let low = 0;\r\n  let high = str.length;\r\n  const encoder = new TextEncoder();\r\n  while (low < high) {\r\n    const mid = Math.floor((low + high + 1) / 2);\r\n    if (encoder.encode(str.slice(0, mid)).length <= maxBytes) {\r\n      low = mid;\r\n    } else {\r\n      high = mid - 1;\r\n    }\r\n  }\r\n  return str.slice(0, low);\r\n}\r\n\r\nconst monitorFrequency = 2000;\r\nfunction computeBitrate(currentStats, prevStats) {\r\n  if (!prevStats) {\r\n    return 0;\r\n  }\r\n  let bytesNow;\r\n  let bytesPrev;\r\n  if ('bytesReceived' in currentStats) {\r\n    bytesNow = currentStats.bytesReceived;\r\n    bytesPrev = prevStats.bytesReceived;\r\n  } else if ('bytesSent' in currentStats) {\r\n    bytesNow = currentStats.bytesSent;\r\n    bytesPrev = prevStats.bytesSent;\r\n  }\r\n  if (bytesNow === undefined || bytesPrev === undefined || currentStats.timestamp === undefined || prevStats.timestamp === undefined) {\r\n    return 0;\r\n  }\r\n  return (bytesNow - bytesPrev) * 8 * 1000 / (currentStats.timestamp - prevStats.timestamp);\r\n}\r\n\r\n// Check if MediaRecorder is available\r\nconst isMediaRecorderAvailable = typeof MediaRecorder !== 'undefined';\r\n// Fallback class for environments without MediaRecorder\r\nclass FallbackRecorder {\r\n  constructor() {\r\n    throw new Error('MediaRecorder is not available in this environment');\r\n  }\r\n}\r\n// Use conditional inheritance to avoid parse-time errors\r\nconst RecorderBase = isMediaRecorderAvailable ? MediaRecorder : FallbackRecorder;\r\nclass LocalTrackRecorder extends RecorderBase {\r\n  constructor(track, options) {\r\n    if (!isMediaRecorderAvailable) {\r\n      throw new Error('MediaRecorder is not available in this environment');\r\n    }\r\n    super(new MediaStream([track.mediaStreamTrack]), options);\r\n    let dataListener;\r\n    let streamController;\r\n    const isClosed = () => streamController === undefined;\r\n    const onStop = () => {\r\n      this.removeEventListener('dataavailable', dataListener);\r\n      this.removeEventListener('stop', onStop);\r\n      this.removeEventListener('error', onError);\r\n      streamController === null || streamController === void 0 ? void 0 : streamController.close();\r\n      streamController = undefined;\r\n    };\r\n    const onError = event => {\r\n      streamController === null || streamController === void 0 ? void 0 : streamController.error(event);\r\n      this.removeEventListener('dataavailable', dataListener);\r\n      this.removeEventListener('stop', onStop);\r\n      this.removeEventListener('error', onError);\r\n      streamController = undefined;\r\n    };\r\n    this.byteStream = new ReadableStream({\r\n      start: controller => {\r\n        streamController = controller;\r\n        dataListener = event => __awaiter(this, void 0, void 0, function* () {\r\n          const arrayBuffer = yield event.data.arrayBuffer();\r\n          if (isClosed()) {\r\n            return;\r\n          }\r\n          controller.enqueue(new Uint8Array(arrayBuffer));\r\n        });\r\n        this.addEventListener('dataavailable', dataListener);\r\n      },\r\n      cancel: () => {\r\n        onStop();\r\n      }\r\n    });\r\n    this.addEventListener('stop', onStop);\r\n    this.addEventListener('error', onError);\r\n  }\r\n}\r\n// Helper function to check if recording is supported\r\nfunction isRecordingSupported() {\r\n  return isMediaRecorderAvailable;\r\n}\r\n\r\nconst DEFAULT_DIMENSIONS_TIMEOUT = 1000;\r\nconst PRE_CONNECT_BUFFER_TIMEOUT = 10000;\r\nclass LocalTrack extends Track {\r\n  /** @internal */\r\n  get sender() {\r\n    return this._sender;\r\n  }\r\n  /** @internal */\r\n  set sender(sender) {\r\n    this._sender = sender;\r\n  }\r\n  get constraints() {\r\n    return this._constraints;\r\n  }\r\n  get hasPreConnectBuffer() {\r\n    return !!this.localTrackRecorder;\r\n  }\r\n  /**\r\n   *\r\n   * @param mediaTrack\r\n   * @param kind\r\n   * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks\r\n   * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK\r\n   */\r\n  constructor(mediaTrack, kind, constraints) {\r\n    let userProvidedTrack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\r\n    let loggerOptions = arguments.length > 4 ? arguments[4] : undefined;\r\n    super(mediaTrack, kind, loggerOptions);\r\n    this.manuallyStopped = false;\r\n    this._isUpstreamPaused = false;\r\n    this.handleTrackMuteEvent = () => this.debouncedTrackMuteHandler().catch(() => this.log.debug('track mute bounce got cancelled by an unmute event', this.logContext));\r\n    this.debouncedTrackMuteHandler = r(() => __awaiter(this, void 0, void 0, function* () {\r\n      yield this.pauseUpstream();\r\n    }), 5000);\r\n    this.handleTrackUnmuteEvent = () => __awaiter(this, void 0, void 0, function* () {\r\n      this.debouncedTrackMuteHandler.cancel('unmute');\r\n      yield this.resumeUpstream();\r\n    });\r\n    this.handleEnded = () => {\r\n      if (this.isInBackground) {\r\n        this.reacquireTrack = true;\r\n      }\r\n      this._mediaStreamTrack.removeEventListener('mute', this.handleTrackMuteEvent);\r\n      this._mediaStreamTrack.removeEventListener('unmute', this.handleTrackUnmuteEvent);\r\n      this.emit(TrackEvent.Ended, this);\r\n    };\r\n    this.reacquireTrack = false;\r\n    this.providedByUser = userProvidedTrack;\r\n    this.muteLock = new _();\r\n    this.pauseUpstreamLock = new _();\r\n    this.processorLock = new _();\r\n    this.restartLock = new _();\r\n    this.setMediaStreamTrack(mediaTrack, true);\r\n    // added to satisfy TS compiler, constraints are synced with MediaStreamTrack\r\n    this._constraints = mediaTrack.getConstraints();\r\n    if (constraints) {\r\n      this._constraints = constraints;\r\n    }\r\n  }\r\n  get id() {\r\n    return this._mediaStreamTrack.id;\r\n  }\r\n  get dimensions() {\r\n    if (this.kind !== Track.Kind.Video) {\r\n      return undefined;\r\n    }\r\n    const {\r\n      width,\r\n      height\r\n    } = this._mediaStreamTrack.getSettings();\r\n    if (width && height) {\r\n      return {\r\n        width,\r\n        height\r\n      };\r\n    }\r\n    return undefined;\r\n  }\r\n  get isUpstreamPaused() {\r\n    return this._isUpstreamPaused;\r\n  }\r\n  get isUserProvided() {\r\n    return this.providedByUser;\r\n  }\r\n  get mediaStreamTrack() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.processor) === null || _a === void 0 ? void 0 : _a.processedTrack) !== null && _b !== void 0 ? _b : this._mediaStreamTrack;\r\n  }\r\n  get isLocal() {\r\n    return true;\r\n  }\r\n  /**\r\n   * @internal\r\n   * returns mediaStreamTrack settings of the capturing mediastreamtrack source - ignoring processors\r\n   */\r\n  getSourceTrackSettings() {\r\n    return this._mediaStreamTrack.getSettings();\r\n  }\r\n  setMediaStreamTrack(newTrack, force) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (newTrack === this._mediaStreamTrack && !force) {\r\n        return;\r\n      }\r\n      if (this._mediaStreamTrack) {\r\n        // detach\r\n        this.attachedElements.forEach(el => {\r\n          detachTrack(this._mediaStreamTrack, el);\r\n        });\r\n        this.debouncedTrackMuteHandler.cancel('new-track');\r\n        this._mediaStreamTrack.removeEventListener('ended', this.handleEnded);\r\n        this._mediaStreamTrack.removeEventListener('mute', this.handleTrackMuteEvent);\r\n        this._mediaStreamTrack.removeEventListener('unmute', this.handleTrackUnmuteEvent);\r\n      }\r\n      this.mediaStream = new MediaStream([newTrack]);\r\n      if (newTrack) {\r\n        newTrack.addEventListener('ended', this.handleEnded);\r\n        // when underlying track emits mute, it indicates that the device is unable\r\n        // to produce media. In this case we'll need to signal with remote that\r\n        // the track is \"muted\"\r\n        // note this is different from LocalTrack.mute because we do not want to\r\n        // touch MediaStreamTrack.enabled\r\n        newTrack.addEventListener('mute', this.handleTrackMuteEvent);\r\n        newTrack.addEventListener('unmute', this.handleTrackUnmuteEvent);\r\n        this._constraints = newTrack.getConstraints();\r\n      }\r\n      let processedTrack;\r\n      if (this.processor && newTrack) {\r\n        const unlock = yield this.processorLock.lock();\r\n        try {\r\n          this.log.debug('restarting processor', this.logContext);\r\n          if (this.kind === 'unknown') {\r\n            throw TypeError('cannot set processor on track of unknown kind');\r\n          }\r\n          if (this.processorElement) {\r\n            attachToElement(newTrack, this.processorElement);\r\n            // ensure the processorElement itself stays muted\r\n            this.processorElement.muted = true;\r\n          }\r\n          yield this.processor.restart({\r\n            track: newTrack,\r\n            kind: this.kind,\r\n            element: this.processorElement\r\n          });\r\n          processedTrack = this.processor.processedTrack;\r\n        } finally {\r\n          unlock();\r\n        }\r\n      }\r\n      if (this.sender && ((_a = this.sender.transport) === null || _a === void 0 ? void 0 : _a.state) !== 'closed') {\r\n        yield this.sender.replaceTrack(processedTrack !== null && processedTrack !== void 0 ? processedTrack : newTrack);\r\n      }\r\n      // if `newTrack` is different from the existing track, stop the\r\n      // older track just before replacing it\r\n      if (!this.providedByUser && this._mediaStreamTrack !== newTrack) {\r\n        this._mediaStreamTrack.stop();\r\n      }\r\n      this._mediaStreamTrack = newTrack;\r\n      if (newTrack) {\r\n        // sync muted state with the enabled state of the newly provided track\r\n        this._mediaStreamTrack.enabled = !this.isMuted;\r\n        // when a valid track is replace, we'd want to start producing\r\n        yield this.resumeUpstream();\r\n        this.attachedElements.forEach(el => {\r\n          attachToElement(processedTrack !== null && processedTrack !== void 0 ? processedTrack : newTrack, el);\r\n        });\r\n      }\r\n    });\r\n  }\r\n  waitForDimensions() {\r\n    return __awaiter(this, arguments, void 0, function () {\r\n      var _this = this;\r\n      let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_DIMENSIONS_TIMEOUT;\r\n      return function* () {\r\n        var _a;\r\n        if (_this.kind === Track.Kind.Audio) {\r\n          throw new Error('cannot get dimensions for audio tracks');\r\n        }\r\n        if (((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.os) === 'iOS') {\r\n          // browsers report wrong initial resolution on iOS.\r\n          // when slightly delaying the call to .getSettings(), the correct resolution is being reported\r\n          yield sleep(10);\r\n        }\r\n        const started = Date.now();\r\n        while (Date.now() - started < timeout) {\r\n          const dims = _this.dimensions;\r\n          if (dims) {\r\n            return dims;\r\n          }\r\n          yield sleep(50);\r\n        }\r\n        throw new TrackInvalidError('unable to get track dimensions after timeout');\r\n      }();\r\n    });\r\n  }\r\n  setDeviceId(deviceId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this._constraints.deviceId === deviceId && this._mediaStreamTrack.getSettings().deviceId === unwrapConstraint(deviceId)) {\r\n        return true;\r\n      }\r\n      this._constraints.deviceId = deviceId;\r\n      // when track is muted, underlying media stream track is stopped and\r\n      // will be restarted later\r\n      if (this.isMuted) {\r\n        return true;\r\n      }\r\n      yield this.restartTrack();\r\n      return unwrapConstraint(deviceId) === this._mediaStreamTrack.getSettings().deviceId;\r\n    });\r\n  }\r\n  /**\r\n   * @returns DeviceID of the device that is currently being used for this track\r\n   */\r\n  getDeviceId() {\r\n    return __awaiter(this, arguments, void 0, function () {\r\n      var _this2 = this;\r\n      let normalize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n      return function* () {\r\n        // screen share doesn't have a usable device id\r\n        if (_this2.source === Track.Source.ScreenShare) {\r\n          return;\r\n        }\r\n        const {\r\n          deviceId,\r\n          groupId\r\n        } = _this2._mediaStreamTrack.getSettings();\r\n        const kind = _this2.kind === Track.Kind.Audio ? 'audioinput' : 'videoinput';\r\n        return normalize ? DeviceManager.getInstance().normalizeDeviceId(kind, deviceId, groupId) : deviceId;\r\n      }();\r\n    });\r\n  }\r\n  mute() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.setTrackMuted(true);\r\n      return this;\r\n    });\r\n  }\r\n  unmute() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.setTrackMuted(false);\r\n      return this;\r\n    });\r\n  }\r\n  replaceTrack(track, userProvidedOrOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.sender) {\r\n        throw new TrackInvalidError('unable to replace an unpublished track');\r\n      }\r\n      let userProvidedTrack;\r\n      let stopProcessor;\r\n      if (typeof userProvidedOrOptions === 'boolean') {\r\n        userProvidedTrack = userProvidedOrOptions;\r\n      } else if (userProvidedOrOptions !== undefined) {\r\n        userProvidedTrack = userProvidedOrOptions.userProvidedTrack;\r\n        stopProcessor = userProvidedOrOptions.stopProcessor;\r\n      }\r\n      this.providedByUser = userProvidedTrack !== null && userProvidedTrack !== void 0 ? userProvidedTrack : true;\r\n      this.log.debug('replace MediaStreamTrack', this.logContext);\r\n      yield this.setMediaStreamTrack(track);\r\n      // this must be synced *after* setting mediaStreamTrack above, since it relies\r\n      // on the previous state in order to cleanup\r\n      if (stopProcessor && this.processor) {\r\n        yield this.stopProcessor();\r\n      }\r\n      return this;\r\n    });\r\n  }\r\n  restart(constraints) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.manuallyStopped = false;\r\n      const unlock = yield this.restartLock.lock();\r\n      try {\r\n        if (!constraints) {\r\n          constraints = this._constraints;\r\n        }\r\n        const {\r\n            deviceId,\r\n            facingMode\r\n          } = constraints,\r\n          otherConstraints = __rest(constraints, [\"deviceId\", \"facingMode\"]);\r\n        this.log.debug('restarting track with constraints', Object.assign(Object.assign({}, this.logContext), {\r\n          constraints\r\n        }));\r\n        const streamConstraints = {\r\n          audio: false,\r\n          video: false\r\n        };\r\n        if (this.kind === Track.Kind.Video) {\r\n          streamConstraints.video = deviceId || facingMode ? {\r\n            deviceId,\r\n            facingMode\r\n          } : true;\r\n        } else {\r\n          streamConstraints.audio = deviceId ? {\r\n            deviceId\r\n          } : true;\r\n        }\r\n        // these steps are duplicated from setMediaStreamTrack because we must stop\r\n        // the previous tracks before new tracks can be acquired\r\n        this.attachedElements.forEach(el => {\r\n          detachTrack(this.mediaStreamTrack, el);\r\n        });\r\n        this._mediaStreamTrack.removeEventListener('ended', this.handleEnded);\r\n        // on Safari, the old audio track must be stopped before attempting to acquire\r\n        // the new track, otherwise the new track will stop with\r\n        // 'A MediaStreamTrack ended due to a capture failure`\r\n        this._mediaStreamTrack.stop();\r\n        // create new track and attach\r\n        const mediaStream = yield navigator.mediaDevices.getUserMedia(streamConstraints);\r\n        const newTrack = mediaStream.getTracks()[0];\r\n        yield newTrack.applyConstraints(otherConstraints);\r\n        newTrack.addEventListener('ended', this.handleEnded);\r\n        this.log.debug('re-acquired MediaStreamTrack', this.logContext);\r\n        yield this.setMediaStreamTrack(newTrack);\r\n        this._constraints = constraints;\r\n        this.emit(TrackEvent.Restarted, this);\r\n        if (this.manuallyStopped) {\r\n          this.log.warn('track was stopped during a restart, stopping restarted track', this.logContext);\r\n          this.stop();\r\n        }\r\n        return this;\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  setTrackMuted(muted) {\r\n    this.log.debug(\"setting \".concat(this.kind, \" track \").concat(muted ? 'muted' : 'unmuted'), this.logContext);\r\n    if (this.isMuted === muted && this._mediaStreamTrack.enabled !== muted) {\r\n      return;\r\n    }\r\n    this.isMuted = muted;\r\n    this._mediaStreamTrack.enabled = !muted;\r\n    this.emit(muted ? TrackEvent.Muted : TrackEvent.Unmuted, this);\r\n  }\r\n  get needsReAcquisition() {\r\n    return this._mediaStreamTrack.readyState !== 'live' || this._mediaStreamTrack.muted || !this._mediaStreamTrack.enabled || this.reacquireTrack;\r\n  }\r\n  handleAppVisibilityChanged() {\r\n    const _super = Object.create(null, {\r\n      handleAppVisibilityChanged: {\r\n        get: () => super.handleAppVisibilityChanged\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield _super.handleAppVisibilityChanged.call(this);\r\n      if (!isMobile()) return;\r\n      this.log.debug(\"visibility changed, is in Background: \".concat(this.isInBackground), this.logContext);\r\n      if (!this.isInBackground && this.needsReAcquisition && !this.isUserProvided && !this.isMuted) {\r\n        this.log.debug(\"track needs to be reacquired, restarting \".concat(this.source), this.logContext);\r\n        yield this.restart();\r\n        this.reacquireTrack = false;\r\n      }\r\n    });\r\n  }\r\n  stop() {\r\n    var _a;\r\n    this.manuallyStopped = true;\r\n    super.stop();\r\n    this._mediaStreamTrack.removeEventListener('ended', this.handleEnded);\r\n    this._mediaStreamTrack.removeEventListener('mute', this.handleTrackMuteEvent);\r\n    this._mediaStreamTrack.removeEventListener('unmute', this.handleTrackUnmuteEvent);\r\n    (_a = this.processor) === null || _a === void 0 ? void 0 : _a.destroy();\r\n    this.processor = undefined;\r\n  }\r\n  /**\r\n   * pauses publishing to the server without disabling the local MediaStreamTrack\r\n   * this is used to display a user's own video locally while pausing publishing to\r\n   * the server.\r\n   * this API is unsupported on Safari < 12 due to a bug\r\n   **/\r\n  pauseUpstream() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const unlock = yield this.pauseUpstreamLock.lock();\r\n      try {\r\n        if (this._isUpstreamPaused === true) {\r\n          return;\r\n        }\r\n        if (!this.sender) {\r\n          this.log.warn('unable to pause upstream for an unpublished track', this.logContext);\r\n          return;\r\n        }\r\n        this._isUpstreamPaused = true;\r\n        this.emit(TrackEvent.UpstreamPaused, this);\r\n        const browser = getBrowser();\r\n        if ((browser === null || browser === void 0 ? void 0 : browser.name) === 'Safari' && compareVersions(browser.version, '12.0') < 0) {\r\n          // https://bugs.webkit.org/show_bug.cgi?id=184911\r\n          throw new DeviceUnsupportedError('pauseUpstream is not supported on Safari < 12.');\r\n        }\r\n        if (((_a = this.sender.transport) === null || _a === void 0 ? void 0 : _a.state) !== 'closed') {\r\n          yield this.sender.replaceTrack(null);\r\n        }\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  resumeUpstream() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const unlock = yield this.pauseUpstreamLock.lock();\r\n      try {\r\n        if (this._isUpstreamPaused === false) {\r\n          return;\r\n        }\r\n        if (!this.sender) {\r\n          this.log.warn('unable to resume upstream for an unpublished track', this.logContext);\r\n          return;\r\n        }\r\n        this._isUpstreamPaused = false;\r\n        this.emit(TrackEvent.UpstreamResumed, this);\r\n        if (((_a = this.sender.transport) === null || _a === void 0 ? void 0 : _a.state) !== 'closed') {\r\n          // this operation is noop if mediastreamtrack is already being sent\r\n          yield this.sender.replaceTrack(this.mediaStreamTrack);\r\n        }\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Gets the RTCStatsReport for the LocalTrack's underlying RTCRtpSender\r\n   * See https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport\r\n   *\r\n   * @returns Promise<RTCStatsReport> | undefined\r\n   */\r\n  getRTCStatsReport() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (!((_a = this.sender) === null || _a === void 0 ? void 0 : _a.getStats)) {\r\n        return;\r\n      }\r\n      const statsReport = yield this.sender.getStats();\r\n      return statsReport;\r\n    });\r\n  }\r\n  /**\r\n   * Sets a processor on this track.\r\n   * See https://github.com/livekit/track-processors-js for example usage\r\n   *\r\n   * @experimental\r\n   *\r\n   * @param processor\r\n   * @param showProcessedStreamLocally\r\n   * @returns\r\n   */\r\n  setProcessor(processor_1) {\r\n    return __awaiter(this, arguments, void 0, function (processor) {\r\n      var _this3 = this;\r\n      let showProcessedStreamLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n      return function* () {\r\n        var _a;\r\n        const unlock = yield _this3.processorLock.lock();\r\n        try {\r\n          _this3.log.debug('setting up processor', _this3.logContext);\r\n          const processorElement = document.createElement(_this3.kind);\r\n          const processorOptions = {\r\n            kind: _this3.kind,\r\n            track: _this3._mediaStreamTrack,\r\n            element: processorElement,\r\n            audioContext: _this3.audioContext\r\n          };\r\n          yield processor.init(processorOptions);\r\n          _this3.log.debug('processor initialized', _this3.logContext);\r\n          if (_this3.processor) {\r\n            yield _this3.stopProcessor();\r\n          }\r\n          if (_this3.kind === 'unknown') {\r\n            throw TypeError('cannot set processor on track of unknown kind');\r\n          }\r\n          attachToElement(_this3._mediaStreamTrack, processorElement);\r\n          processorElement.muted = true;\r\n          processorElement.play().catch(error => _this3.log.error('failed to play processor element', Object.assign(Object.assign({}, _this3.logContext), {\r\n            error\r\n          })));\r\n          _this3.processor = processor;\r\n          _this3.processorElement = processorElement;\r\n          if (_this3.processor.processedTrack) {\r\n            for (const el of _this3.attachedElements) {\r\n              if (el !== _this3.processorElement && showProcessedStreamLocally) {\r\n                detachTrack(_this3._mediaStreamTrack, el);\r\n                attachToElement(_this3.processor.processedTrack, el);\r\n              }\r\n            }\r\n            yield (_a = _this3.sender) === null || _a === void 0 ? void 0 : _a.replaceTrack(_this3.processor.processedTrack);\r\n          }\r\n          _this3.emit(TrackEvent.TrackProcessorUpdate, _this3.processor);\r\n        } finally {\r\n          unlock();\r\n        }\r\n      }();\r\n    });\r\n  }\r\n  getProcessor() {\r\n    return this.processor;\r\n  }\r\n  /**\r\n   * Stops the track processor\r\n   * See https://github.com/livekit/track-processors-js for example usage\r\n   *\r\n   * @experimental\r\n   * @returns\r\n   */\r\n  stopProcessor() {\r\n    return __awaiter(this, arguments, void 0, function () {\r\n      var _this4 = this;\r\n      let keepElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n      return function* () {\r\n        var _a, _b;\r\n        if (!_this4.processor) return;\r\n        _this4.log.debug('stopping processor', _this4.logContext);\r\n        (_a = _this4.processor.processedTrack) === null || _a === void 0 ? void 0 : _a.stop();\r\n        yield _this4.processor.destroy();\r\n        _this4.processor = undefined;\r\n        if (!keepElement) {\r\n          (_b = _this4.processorElement) === null || _b === void 0 ? void 0 : _b.remove();\r\n          _this4.processorElement = undefined;\r\n        }\r\n        // apply original track constraints in case the processor changed them\r\n        yield _this4._mediaStreamTrack.applyConstraints(_this4._constraints);\r\n        // force re-setting of the mediaStreamTrack on the sender\r\n        yield _this4.setMediaStreamTrack(_this4._mediaStreamTrack, true);\r\n        _this4.emit(TrackEvent.TrackProcessorUpdate);\r\n      }();\r\n    });\r\n  }\r\n  /** @internal */\r\n  startPreConnectBuffer() {\r\n    let timeslice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\r\n    if (!isRecordingSupported()) {\r\n      this.log.warn('MediaRecorder is not available, cannot start preconnect buffer', this.logContext);\r\n      return;\r\n    }\r\n    if (!this.localTrackRecorder) {\r\n      this.localTrackRecorder = new LocalTrackRecorder(this, {\r\n        mimeType: 'audio/webm;codecs=opus'\r\n      });\r\n    } else {\r\n      this.log.warn('preconnect buffer already started');\r\n      return;\r\n    }\r\n    this.localTrackRecorder.start(timeslice);\r\n    this.autoStopPreConnectBuffer = setTimeout(() => {\r\n      this.log.warn('preconnect buffer timed out, stopping recording automatically', this.logContext);\r\n      this.stopPreConnectBuffer();\r\n    }, PRE_CONNECT_BUFFER_TIMEOUT);\r\n  }\r\n  /** @internal */\r\n  stopPreConnectBuffer() {\r\n    clearTimeout(this.autoStopPreConnectBuffer);\r\n    if (this.localTrackRecorder) {\r\n      this.localTrackRecorder.stop();\r\n      this.localTrackRecorder = undefined;\r\n    }\r\n  }\r\n  /** @internal */\r\n  getPreConnectBuffer() {\r\n    var _a;\r\n    return (_a = this.localTrackRecorder) === null || _a === void 0 ? void 0 : _a.byteStream;\r\n  }\r\n}\r\n\r\nclass LocalAudioTrack extends LocalTrack {\r\n  /**\r\n   * boolean indicating whether enhanced noise cancellation is currently being used on this track\r\n   */\r\n  get enhancedNoiseCancellation() {\r\n    return this.isKrispNoiseFilterEnabled;\r\n  }\r\n  /**\r\n   *\r\n   * @param mediaTrack\r\n   * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks\r\n   * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK\r\n   */\r\n  constructor(mediaTrack, constraints) {\r\n    let userProvidedTrack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\r\n    let audioContext = arguments.length > 3 ? arguments[3] : undefined;\r\n    let loggerOptions = arguments.length > 4 ? arguments[4] : undefined;\r\n    super(mediaTrack, Track.Kind.Audio, constraints, userProvidedTrack, loggerOptions);\r\n    /** @internal */\r\n    this.stopOnMute = false;\r\n    this.isKrispNoiseFilterEnabled = false;\r\n    this.monitorSender = () => __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.sender) {\r\n        this._currentBitrate = 0;\r\n        return;\r\n      }\r\n      let stats;\r\n      try {\r\n        stats = yield this.getSenderStats();\r\n      } catch (e) {\r\n        this.log.error('could not get audio sender stats', Object.assign(Object.assign({}, this.logContext), {\r\n          error: e\r\n        }));\r\n        return;\r\n      }\r\n      if (stats && this.prevStats) {\r\n        this._currentBitrate = computeBitrate(stats, this.prevStats);\r\n      }\r\n      this.prevStats = stats;\r\n    });\r\n    this.handleKrispNoiseFilterEnable = () => {\r\n      this.isKrispNoiseFilterEnabled = true;\r\n      this.log.debug(\"Krisp noise filter enabled\", this.logContext);\r\n      this.emit(TrackEvent.AudioTrackFeatureUpdate, this, AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION, true);\r\n    };\r\n    this.handleKrispNoiseFilterDisable = () => {\r\n      this.isKrispNoiseFilterEnabled = false;\r\n      this.log.debug(\"Krisp noise filter disabled\", this.logContext);\r\n      this.emit(TrackEvent.AudioTrackFeatureUpdate, this, AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION, false);\r\n    };\r\n    this.audioContext = audioContext;\r\n    this.checkForSilence();\r\n  }\r\n  mute() {\r\n    const _super = Object.create(null, {\r\n      mute: {\r\n        get: () => super.mute\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const unlock = yield this.muteLock.lock();\r\n      try {\r\n        if (this.isMuted) {\r\n          this.log.debug('Track already muted', this.logContext);\r\n          return this;\r\n        }\r\n        // disabled special handling as it will cause BT headsets to switch communication modes\r\n        if (this.source === Track.Source.Microphone && this.stopOnMute && !this.isUserProvided) {\r\n          this.log.debug('stopping mic track', this.logContext);\r\n          // also stop the track, so that microphone indicator is turned off\r\n          this._mediaStreamTrack.stop();\r\n        }\r\n        yield _super.mute.call(this);\r\n        return this;\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  unmute() {\r\n    const _super = Object.create(null, {\r\n      unmute: {\r\n        get: () => super.unmute\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const unlock = yield this.muteLock.lock();\r\n      try {\r\n        if (!this.isMuted) {\r\n          this.log.debug('Track already unmuted', this.logContext);\r\n          return this;\r\n        }\r\n        const deviceHasChanged = this._constraints.deviceId && this._mediaStreamTrack.getSettings().deviceId !== unwrapConstraint(this._constraints.deviceId);\r\n        if (this.source === Track.Source.Microphone && (this.stopOnMute || this._mediaStreamTrack.readyState === 'ended' || deviceHasChanged) && !this.isUserProvided) {\r\n          this.log.debug('reacquiring mic track', this.logContext);\r\n          yield this.restartTrack();\r\n        }\r\n        yield _super.unmute.call(this);\r\n        return this;\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  restartTrack(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      let constraints;\r\n      if (options) {\r\n        const streamConstraints = constraintsForOptions({\r\n          audio: options\r\n        });\r\n        if (typeof streamConstraints.audio !== 'boolean') {\r\n          constraints = streamConstraints.audio;\r\n        }\r\n      }\r\n      yield this.restart(constraints);\r\n    });\r\n  }\r\n  restart(constraints) {\r\n    const _super = Object.create(null, {\r\n      restart: {\r\n        get: () => super.restart\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const track = yield _super.restart.call(this, constraints);\r\n      this.checkForSilence();\r\n      return track;\r\n    });\r\n  }\r\n  /* @internal */\r\n  startMonitor() {\r\n    if (!isWeb()) {\r\n      return;\r\n    }\r\n    if (this.monitorInterval) {\r\n      return;\r\n    }\r\n    this.monitorInterval = setInterval(() => {\r\n      this.monitorSender();\r\n    }, monitorFrequency);\r\n  }\r\n  setProcessor(processor) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const unlock = yield this.processorLock.lock();\r\n      try {\r\n        if (!isReactNative() && !this.audioContext) {\r\n          throw Error('Audio context needs to be set on LocalAudioTrack in order to enable processors');\r\n        }\r\n        if (this.processor) {\r\n          yield this.stopProcessor();\r\n        }\r\n        const processorOptions = {\r\n          kind: this.kind,\r\n          track: this._mediaStreamTrack,\r\n          // RN won't have or use AudioContext\r\n          audioContext: this.audioContext\r\n        };\r\n        this.log.debug(\"setting up audio processor \".concat(processor.name), this.logContext);\r\n        yield processor.init(processorOptions);\r\n        this.processor = processor;\r\n        if (this.processor.processedTrack) {\r\n          yield (_a = this.sender) === null || _a === void 0 ? void 0 : _a.replaceTrack(this.processor.processedTrack);\r\n          this.processor.processedTrack.addEventListener('enable-lk-krisp-noise-filter', this.handleKrispNoiseFilterEnable);\r\n          this.processor.processedTrack.addEventListener('disable-lk-krisp-noise-filter', this.handleKrispNoiseFilterDisable);\r\n        }\r\n        this.emit(TrackEvent.TrackProcessorUpdate, this.processor);\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * @internal\r\n   * @experimental\r\n   */\r\n  setAudioContext(audioContext) {\r\n    this.audioContext = audioContext;\r\n  }\r\n  getSenderStats() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (!((_a = this.sender) === null || _a === void 0 ? void 0 : _a.getStats)) {\r\n        return undefined;\r\n      }\r\n      const stats = yield this.sender.getStats();\r\n      let audioStats;\r\n      stats.forEach(v => {\r\n        if (v.type === 'outbound-rtp') {\r\n          audioStats = {\r\n            type: 'audio',\r\n            streamId: v.id,\r\n            packetsSent: v.packetsSent,\r\n            packetsLost: v.packetsLost,\r\n            bytesSent: v.bytesSent,\r\n            timestamp: v.timestamp,\r\n            roundTripTime: v.roundTripTime,\r\n            jitter: v.jitter\r\n          };\r\n        }\r\n      });\r\n      return audioStats;\r\n    });\r\n  }\r\n  checkForSilence() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const trackIsSilent = yield detectSilence(this);\r\n      if (trackIsSilent) {\r\n        if (!this.isMuted) {\r\n          this.log.warn('silence detected on local audio track', this.logContext);\r\n        }\r\n        this.emit(TrackEvent.AudioSilenceDetected);\r\n      }\r\n      return trackIsSilent;\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal */\r\nfunction mediaTrackToLocalTrack(mediaStreamTrack, constraints, loggerOptions) {\r\n  switch (mediaStreamTrack.kind) {\r\n    case 'audio':\r\n      return new LocalAudioTrack(mediaStreamTrack, constraints, false, undefined, loggerOptions);\r\n    case 'video':\r\n      return new LocalVideoTrack(mediaStreamTrack, constraints, false, loggerOptions);\r\n    default:\r\n      throw new TrackInvalidError(\"unsupported track type: \".concat(mediaStreamTrack.kind));\r\n  }\r\n}\r\n/* @internal */\r\nconst presets169 = Object.values(VideoPresets);\r\n/* @internal */\r\nconst presets43 = Object.values(VideoPresets43);\r\n/* @internal */\r\nconst presetsScreenShare = Object.values(ScreenSharePresets);\r\n/* @internal */\r\nconst defaultSimulcastPresets169 = [VideoPresets.h180, VideoPresets.h360];\r\n/* @internal */\r\nconst defaultSimulcastPresets43 = [VideoPresets43.h180, VideoPresets43.h360];\r\n/* @internal */\r\nconst computeDefaultScreenShareSimulcastPresets = fromPreset => {\r\n  const layers = [{\r\n    scaleResolutionDownBy: 2,\r\n    fps: fromPreset.encoding.maxFramerate\r\n  }];\r\n  return layers.map(t => {\r\n    var _a, _b;\r\n    return new VideoPreset(Math.floor(fromPreset.width / t.scaleResolutionDownBy), Math.floor(fromPreset.height / t.scaleResolutionDownBy), Math.max(150000, Math.floor(fromPreset.encoding.maxBitrate / (Math.pow(t.scaleResolutionDownBy, 2) * (((_a = fromPreset.encoding.maxFramerate) !== null && _a !== void 0 ? _a : 30) / ((_b = t.fps) !== null && _b !== void 0 ? _b : 30))))), t.fps, fromPreset.encoding.priority);\r\n  });\r\n};\r\n// /**\r\n//  *\r\n//  * @internal\r\n//  * @experimental\r\n//  */\r\n// const computeDefaultMultiCodecSimulcastEncodings = (width: number, height: number) => {\r\n//   // use vp8 as a default\r\n//   const vp8 = determineAppropriateEncoding(false, width, height);\r\n//   const vp9 = { ...vp8, maxBitrate: vp8.maxBitrate * 0.9 };\r\n//   const h264 = { ...vp8, maxBitrate: vp8.maxBitrate * 1.1 };\r\n//   const av1 = { ...vp8, maxBitrate: vp8.maxBitrate * 0.7 };\r\n//   return {\r\n//     vp8,\r\n//     vp9,\r\n//     h264,\r\n//     av1,\r\n//   };\r\n// };\r\nconst videoRids = ['q', 'h', 'f'];\r\n/* @internal */\r\nfunction computeVideoEncodings(isScreenShare, width, height, options) {\r\n  var _a, _b;\r\n  let videoEncoding = options === null || options === void 0 ? void 0 : options.videoEncoding;\r\n  if (isScreenShare) {\r\n    videoEncoding = options === null || options === void 0 ? void 0 : options.screenShareEncoding;\r\n  }\r\n  const useSimulcast = options === null || options === void 0 ? void 0 : options.simulcast;\r\n  const scalabilityMode = options === null || options === void 0 ? void 0 : options.scalabilityMode;\r\n  const videoCodec = options === null || options === void 0 ? void 0 : options.videoCodec;\r\n  if (!videoEncoding && !useSimulcast && !scalabilityMode || !width || !height) {\r\n    // when we aren't simulcasting or svc, will need to return a single encoding without\r\n    // capping bandwidth. we always require a encoding for dynacast\r\n    return [{}];\r\n  }\r\n  if (!videoEncoding) {\r\n    // find the right encoding based on width/height\r\n    videoEncoding = determineAppropriateEncoding(isScreenShare, width, height, videoCodec);\r\n    livekitLogger.debug('using video encoding', videoEncoding);\r\n  }\r\n  const sourceFramerate = videoEncoding.maxFramerate;\r\n  const original = new VideoPreset(width, height, videoEncoding.maxBitrate, videoEncoding.maxFramerate, videoEncoding.priority);\r\n  if (scalabilityMode && isSVCCodec(videoCodec)) {\r\n    const sm = new ScalabilityMode(scalabilityMode);\r\n    const encodings = [];\r\n    if (sm.spatial > 3) {\r\n      throw new Error(\"unsupported scalabilityMode: \".concat(scalabilityMode));\r\n    }\r\n    // Before M113 in Chrome, defining multiple encodings with an SVC codec indicated\r\n    // that SVC mode should be used. Safari still works this way.\r\n    // This is a bit confusing but is due to how libwebrtc interpreted the encodings field\r\n    // before M113.\r\n    // Announced here: https://groups.google.com/g/discuss-webrtc/c/-QQ3pxrl-fw?pli=1\r\n    const browser = getBrowser();\r\n    if (isSafari() ||\r\n    // Even tho RN runs M114, it does not produce SVC layers when a single encoding\r\n    // is provided. So we'll use the legacy SVC specification for now.\r\n    // TODO: when we upstream libwebrtc, this will need additional verification\r\n    isReactNative() || (browser === null || browser === void 0 ? void 0 : browser.name) === 'Chrome' && compareVersions(browser === null || browser === void 0 ? void 0 : browser.version, '113') < 0) {\r\n      const bitratesRatio = sm.suffix == 'h' ? 2 : 3;\r\n      // safari 18.4 uses a different svc API that requires scaleResolutionDownBy to be set.\r\n      const requireScale = isSafariSvcApi(browser);\r\n      for (let i = 0; i < sm.spatial; i += 1) {\r\n        // in legacy SVC, scaleResolutionDownBy cannot be set\r\n        encodings.push({\r\n          rid: videoRids[2 - i],\r\n          maxBitrate: videoEncoding.maxBitrate / Math.pow(bitratesRatio, i),\r\n          maxFramerate: original.encoding.maxFramerate,\r\n          scaleResolutionDownBy: requireScale ? Math.pow(2, i) : undefined\r\n        });\r\n      }\r\n      // legacy SVC, scalabilityMode is set only on the first encoding\r\n      /* @ts-ignore */\r\n      encodings[0].scalabilityMode = scalabilityMode;\r\n    } else {\r\n      encodings.push({\r\n        maxBitrate: videoEncoding.maxBitrate,\r\n        maxFramerate: original.encoding.maxFramerate,\r\n        /* @ts-ignore */\r\n        scalabilityMode: scalabilityMode\r\n      });\r\n    }\r\n    if (original.encoding.priority) {\r\n      encodings[0].priority = original.encoding.priority;\r\n      encodings[0].networkPriority = original.encoding.priority;\r\n    }\r\n    livekitLogger.debug(\"using svc encoding\", {\r\n      encodings\r\n    });\r\n    return encodings;\r\n  }\r\n  if (!useSimulcast) {\r\n    return [videoEncoding];\r\n  }\r\n  let presets = [];\r\n  if (isScreenShare) {\r\n    presets = (_a = sortPresets(options === null || options === void 0 ? void 0 : options.screenShareSimulcastLayers)) !== null && _a !== void 0 ? _a : defaultSimulcastLayers(isScreenShare, original);\r\n  } else {\r\n    presets = (_b = sortPresets(options === null || options === void 0 ? void 0 : options.videoSimulcastLayers)) !== null && _b !== void 0 ? _b : defaultSimulcastLayers(isScreenShare, original);\r\n  }\r\n  let midPreset;\r\n  if (presets.length > 0) {\r\n    const lowPreset = presets[0];\r\n    if (presets.length > 1) {\r\n      [, midPreset] = presets;\r\n    }\r\n    // NOTE:\r\n    //   1. Ordering of these encodings is important. Chrome seems\r\n    //      to use the index into encodings to decide which layer\r\n    //      to disable when CPU constrained.\r\n    //      So encodings should be ordered in increasing spatial\r\n    //      resolution order.\r\n    //   2. livekit-server translates rids into layers. So, all encodings\r\n    //      should have the base layer `q` and then more added\r\n    //      based on other conditions.\r\n    const size = Math.max(width, height);\r\n    if (size >= 960 && midPreset) {\r\n      return encodingsFromPresets(width, height, [lowPreset, midPreset, original], sourceFramerate);\r\n    }\r\n    if (size >= 480) {\r\n      return encodingsFromPresets(width, height, [lowPreset, original], sourceFramerate);\r\n    }\r\n  }\r\n  return encodingsFromPresets(width, height, [original]);\r\n}\r\nfunction computeTrackBackupEncodings(track, videoCodec, opts) {\r\n  var _a, _b, _c, _d;\r\n  // backupCodec should not be true anymore, default codec is set in LocalParticipant.publish\r\n  if (!opts.backupCodec || opts.backupCodec === true || opts.backupCodec.codec === opts.videoCodec) {\r\n    // backup codec publishing is disabled\r\n    return;\r\n  }\r\n  if (videoCodec !== opts.backupCodec.codec) {\r\n    livekitLogger.warn('requested a different codec than specified as backup', {\r\n      serverRequested: videoCodec,\r\n      backup: opts.backupCodec.codec\r\n    });\r\n  }\r\n  opts.videoCodec = videoCodec;\r\n  // use backup encoding setting as videoEncoding for backup codec publishing\r\n  opts.videoEncoding = opts.backupCodec.encoding;\r\n  const settings = track.mediaStreamTrack.getSettings();\r\n  const width = (_a = settings.width) !== null && _a !== void 0 ? _a : (_b = track.dimensions) === null || _b === void 0 ? void 0 : _b.width;\r\n  const height = (_c = settings.height) !== null && _c !== void 0 ? _c : (_d = track.dimensions) === null || _d === void 0 ? void 0 : _d.height;\r\n  // disable simulcast for screenshare backup codec since L1Tx is used by primary codec\r\n  if (track.source === Track.Source.ScreenShare && opts.simulcast) {\r\n    opts.simulcast = false;\r\n  }\r\n  const encodings = computeVideoEncodings(track.source === Track.Source.ScreenShare, width, height, opts);\r\n  return encodings;\r\n}\r\n/* @internal */\r\nfunction determineAppropriateEncoding(isScreenShare, width, height, codec) {\r\n  const presets = presetsForResolution(isScreenShare, width, height);\r\n  let {\r\n    encoding\r\n  } = presets[0];\r\n  // handle portrait by swapping dimensions\r\n  const size = Math.max(width, height);\r\n  for (let i = 0; i < presets.length; i += 1) {\r\n    const preset = presets[i];\r\n    encoding = preset.encoding;\r\n    if (preset.width >= size) {\r\n      break;\r\n    }\r\n  }\r\n  // presets are based on the assumption of vp8 as a codec\r\n  // for other codecs we adjust the maxBitrate if no specific videoEncoding has been provided\r\n  // users should override these with ones that are optimized for their use case\r\n  // NOTE: SVC codec bitrates are inclusive of all scalability layers. while\r\n  // bitrate for non-SVC codecs does not include other simulcast layers.\r\n  if (codec) {\r\n    switch (codec) {\r\n      case 'av1':\r\n        encoding = Object.assign({}, encoding);\r\n        encoding.maxBitrate = encoding.maxBitrate * 0.7;\r\n        break;\r\n      case 'vp9':\r\n        encoding = Object.assign({}, encoding);\r\n        encoding.maxBitrate = encoding.maxBitrate * 0.85;\r\n        break;\r\n    }\r\n  }\r\n  return encoding;\r\n}\r\n/* @internal */\r\nfunction presetsForResolution(isScreenShare, width, height) {\r\n  if (isScreenShare) {\r\n    return presetsScreenShare;\r\n  }\r\n  const aspect = width > height ? width / height : height / width;\r\n  if (Math.abs(aspect - 16.0 / 9) < Math.abs(aspect - 4.0 / 3)) {\r\n    return presets169;\r\n  }\r\n  return presets43;\r\n}\r\n/* @internal */\r\nfunction defaultSimulcastLayers(isScreenShare, original) {\r\n  if (isScreenShare) {\r\n    return computeDefaultScreenShareSimulcastPresets(original);\r\n  }\r\n  const {\r\n    width,\r\n    height\r\n  } = original;\r\n  const aspect = width > height ? width / height : height / width;\r\n  if (Math.abs(aspect - 16.0 / 9) < Math.abs(aspect - 4.0 / 3)) {\r\n    return defaultSimulcastPresets169;\r\n  }\r\n  return defaultSimulcastPresets43;\r\n}\r\n// presets should be ordered by low, medium, high\r\nfunction encodingsFromPresets(width, height, presets, sourceFramerate) {\r\n  const encodings = [];\r\n  presets.forEach((preset, idx) => {\r\n    if (idx >= videoRids.length) {\r\n      return;\r\n    }\r\n    const size = Math.min(width, height);\r\n    const rid = videoRids[idx];\r\n    const encoding = {\r\n      rid,\r\n      scaleResolutionDownBy: Math.max(1, size / Math.min(preset.width, preset.height)),\r\n      maxBitrate: preset.encoding.maxBitrate\r\n    };\r\n    // ensure that the sourceFramerate is the highest framerate applied across all layers so that the\r\n    // original encoding doesn't get bumped unintentionally by any of the other layers\r\n    const maxFramerate = sourceFramerate && preset.encoding.maxFramerate ? Math.min(sourceFramerate, preset.encoding.maxFramerate) : preset.encoding.maxFramerate;\r\n    if (maxFramerate) {\r\n      encoding.maxFramerate = maxFramerate;\r\n    }\r\n    const canSetPriority = isFireFox() || idx === 0;\r\n    if (preset.encoding.priority && canSetPriority) {\r\n      encoding.priority = preset.encoding.priority;\r\n      encoding.networkPriority = preset.encoding.priority;\r\n    }\r\n    encodings.push(encoding);\r\n  });\r\n  // RN ios simulcast requires all same framerates.\r\n  if (isReactNative() && getReactNativeOs() === 'ios') {\r\n    let topFramerate = undefined;\r\n    encodings.forEach(encoding => {\r\n      if (!topFramerate) {\r\n        topFramerate = encoding.maxFramerate;\r\n      } else if (encoding.maxFramerate && encoding.maxFramerate > topFramerate) {\r\n        topFramerate = encoding.maxFramerate;\r\n      }\r\n    });\r\n    let notifyOnce = true;\r\n    encodings.forEach(encoding => {\r\n      var _a;\r\n      if (encoding.maxFramerate != topFramerate) {\r\n        if (notifyOnce) {\r\n          notifyOnce = false;\r\n          livekitLogger.info(\"Simulcast on iOS React-Native requires all encodings to share the same framerate.\");\r\n        }\r\n        livekitLogger.info(\"Setting framerate of encoding \\\"\".concat((_a = encoding.rid) !== null && _a !== void 0 ? _a : '', \"\\\" to \").concat(topFramerate));\r\n        encoding.maxFramerate = topFramerate;\r\n      }\r\n    });\r\n  }\r\n  return encodings;\r\n}\r\n/** @internal */\r\nfunction sortPresets(presets) {\r\n  if (!presets) return;\r\n  return presets.sort((a, b) => {\r\n    const {\r\n      encoding: aEnc\r\n    } = a;\r\n    const {\r\n      encoding: bEnc\r\n    } = b;\r\n    if (aEnc.maxBitrate > bEnc.maxBitrate) {\r\n      return 1;\r\n    }\r\n    if (aEnc.maxBitrate < bEnc.maxBitrate) return -1;\r\n    if (aEnc.maxBitrate === bEnc.maxBitrate && aEnc.maxFramerate && bEnc.maxFramerate) {\r\n      return aEnc.maxFramerate > bEnc.maxFramerate ? 1 : -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n/** @internal */\r\nclass ScalabilityMode {\r\n  constructor(scalabilityMode) {\r\n    const results = scalabilityMode.match(/^L(\\d)T(\\d)(h|_KEY|_KEY_SHIFT){0,1}$/);\r\n    if (!results) {\r\n      throw new Error('invalid scalability mode');\r\n    }\r\n    this.spatial = parseInt(results[1]);\r\n    this.temporal = parseInt(results[2]);\r\n    if (results.length > 3) {\r\n      switch (results[3]) {\r\n        case 'h':\r\n        case '_KEY':\r\n        case '_KEY_SHIFT':\r\n          this.suffix = results[3];\r\n      }\r\n    }\r\n  }\r\n  toString() {\r\n    var _a;\r\n    return \"L\".concat(this.spatial, \"T\").concat(this.temporal).concat((_a = this.suffix) !== null && _a !== void 0 ? _a : '');\r\n  }\r\n}\r\nfunction getDefaultDegradationPreference(track) {\r\n  // a few of reasons we have different default paths:\r\n  // 1. without this, Chrome seems to aggressively resize the SVC video stating `quality-limitation: bandwidth` even when BW isn't an issue\r\n  // 2. since we are overriding contentHint to motion (to workaround L1T3 publishing), it overrides the default degradationPreference to `balanced`\r\n  if (track.source === Track.Source.ScreenShare || track.constraints.height && unwrapConstraint(track.constraints.height) >= 1080) {\r\n    return 'maintain-resolution';\r\n  } else {\r\n    return 'balanced';\r\n  }\r\n}\r\n\r\nconst refreshSubscribedCodecAfterNewCodec = 5000;\r\nclass LocalVideoTrack extends LocalTrack {\r\n  get sender() {\r\n    return this._sender;\r\n  }\r\n  set sender(sender) {\r\n    this._sender = sender;\r\n    if (this.degradationPreference) {\r\n      this.setDegradationPreference(this.degradationPreference);\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   * @param mediaTrack\r\n   * @param constraints MediaTrackConstraints that are being used when restarting or reacquiring tracks\r\n   * @param userProvidedTrack Signals to the SDK whether or not the mediaTrack should be managed (i.e. released and reacquired) internally by the SDK\r\n   */\r\n  constructor(mediaTrack, constraints) {\r\n    let userProvidedTrack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\r\n    let loggerOptions = arguments.length > 3 ? arguments[3] : undefined;\r\n    super(mediaTrack, Track.Kind.Video, constraints, userProvidedTrack, loggerOptions);\r\n    /* @internal */\r\n    this.simulcastCodecs = new Map();\r\n    this.degradationPreference = 'balanced';\r\n    this.monitorSender = () => __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.sender) {\r\n        this._currentBitrate = 0;\r\n        return;\r\n      }\r\n      let stats;\r\n      try {\r\n        stats = yield this.getSenderStats();\r\n      } catch (e) {\r\n        this.log.error('could not get audio sender stats', Object.assign(Object.assign({}, this.logContext), {\r\n          error: e\r\n        }));\r\n        return;\r\n      }\r\n      const statsMap = new Map(stats.map(s => [s.rid, s]));\r\n      if (this.prevStats) {\r\n        let totalBitrate = 0;\r\n        statsMap.forEach((s, key) => {\r\n          var _a;\r\n          const prev = (_a = this.prevStats) === null || _a === void 0 ? void 0 : _a.get(key);\r\n          totalBitrate += computeBitrate(s, prev);\r\n        });\r\n        this._currentBitrate = totalBitrate;\r\n      }\r\n      this.prevStats = statsMap;\r\n    });\r\n    this.senderLock = new _();\r\n  }\r\n  get isSimulcast() {\r\n    if (this.sender && this.sender.getParameters().encodings.length > 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  /* @internal */\r\n  startMonitor(signalClient) {\r\n    var _a;\r\n    this.signalClient = signalClient;\r\n    if (!isWeb()) {\r\n      return;\r\n    }\r\n    // save original encodings\r\n    // TODO : merge simulcast tracks stats\r\n    const params = (_a = this.sender) === null || _a === void 0 ? void 0 : _a.getParameters();\r\n    if (params) {\r\n      this.encodings = params.encodings;\r\n    }\r\n    if (this.monitorInterval) {\r\n      return;\r\n    }\r\n    this.monitorInterval = setInterval(() => {\r\n      this.monitorSender();\r\n    }, monitorFrequency);\r\n  }\r\n  stop() {\r\n    this._mediaStreamTrack.getConstraints();\r\n    this.simulcastCodecs.forEach(trackInfo => {\r\n      trackInfo.mediaStreamTrack.stop();\r\n    });\r\n    super.stop();\r\n  }\r\n  pauseUpstream() {\r\n    const _super = Object.create(null, {\r\n      pauseUpstream: {\r\n        get: () => super.pauseUpstream\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, e_1, _b, _c;\r\n      var _d;\r\n      yield _super.pauseUpstream.call(this);\r\n      try {\r\n        for (var _e = true, _f = __asyncValues(this.simulcastCodecs.values()), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {\r\n          _c = _g.value;\r\n          _e = false;\r\n          const sc = _c;\r\n          yield (_d = sc.sender) === null || _d === void 0 ? void 0 : _d.replaceTrack(null);\r\n        }\r\n      } catch (e_1_1) {\r\n        e_1 = {\r\n          error: e_1_1\r\n        };\r\n      } finally {\r\n        try {\r\n          if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);\r\n        } finally {\r\n          if (e_1) throw e_1.error;\r\n        }\r\n      }\r\n    });\r\n  }\r\n  resumeUpstream() {\r\n    const _super = Object.create(null, {\r\n      resumeUpstream: {\r\n        get: () => super.resumeUpstream\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, e_2, _b, _c;\r\n      var _d;\r\n      yield _super.resumeUpstream.call(this);\r\n      try {\r\n        for (var _e = true, _f = __asyncValues(this.simulcastCodecs.values()), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {\r\n          _c = _g.value;\r\n          _e = false;\r\n          const sc = _c;\r\n          yield (_d = sc.sender) === null || _d === void 0 ? void 0 : _d.replaceTrack(sc.mediaStreamTrack);\r\n        }\r\n      } catch (e_2_1) {\r\n        e_2 = {\r\n          error: e_2_1\r\n        };\r\n      } finally {\r\n        try {\r\n          if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);\r\n        } finally {\r\n          if (e_2) throw e_2.error;\r\n        }\r\n      }\r\n    });\r\n  }\r\n  mute() {\r\n    const _super = Object.create(null, {\r\n      mute: {\r\n        get: () => super.mute\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const unlock = yield this.muteLock.lock();\r\n      try {\r\n        if (this.isMuted) {\r\n          this.log.debug('Track already muted', this.logContext);\r\n          return this;\r\n        }\r\n        if (this.source === Track.Source.Camera && !this.isUserProvided) {\r\n          this.log.debug('stopping camera track', this.logContext);\r\n          // also stop the track, so that camera indicator is turned off\r\n          this._mediaStreamTrack.stop();\r\n        }\r\n        yield _super.mute.call(this);\r\n        return this;\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  unmute() {\r\n    const _super = Object.create(null, {\r\n      unmute: {\r\n        get: () => super.unmute\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const unlock = yield this.muteLock.lock();\r\n      try {\r\n        if (!this.isMuted) {\r\n          this.log.debug('Track already unmuted', this.logContext);\r\n          return this;\r\n        }\r\n        if (this.source === Track.Source.Camera && !this.isUserProvided) {\r\n          this.log.debug('reacquiring camera track', this.logContext);\r\n          yield this.restartTrack();\r\n        }\r\n        yield _super.unmute.call(this);\r\n        return this;\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  setTrackMuted(muted) {\r\n    super.setTrackMuted(muted);\r\n    for (const sc of this.simulcastCodecs.values()) {\r\n      sc.mediaStreamTrack.enabled = !muted;\r\n    }\r\n  }\r\n  getSenderStats() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (!((_a = this.sender) === null || _a === void 0 ? void 0 : _a.getStats)) {\r\n        return [];\r\n      }\r\n      const items = [];\r\n      const stats = yield this.sender.getStats();\r\n      stats.forEach(v => {\r\n        var _a;\r\n        if (v.type === 'outbound-rtp') {\r\n          const vs = {\r\n            type: 'video',\r\n            streamId: v.id,\r\n            frameHeight: v.frameHeight,\r\n            frameWidth: v.frameWidth,\r\n            framesPerSecond: v.framesPerSecond,\r\n            framesSent: v.framesSent,\r\n            firCount: v.firCount,\r\n            pliCount: v.pliCount,\r\n            nackCount: v.nackCount,\r\n            packetsSent: v.packetsSent,\r\n            bytesSent: v.bytesSent,\r\n            qualityLimitationReason: v.qualityLimitationReason,\r\n            qualityLimitationDurations: v.qualityLimitationDurations,\r\n            qualityLimitationResolutionChanges: v.qualityLimitationResolutionChanges,\r\n            rid: (_a = v.rid) !== null && _a !== void 0 ? _a : v.id,\r\n            retransmittedPacketsSent: v.retransmittedPacketsSent,\r\n            targetBitrate: v.targetBitrate,\r\n            timestamp: v.timestamp\r\n          };\r\n          // locate the appropriate remote-inbound-rtp item\r\n          const r = stats.get(v.remoteId);\r\n          if (r) {\r\n            vs.jitter = r.jitter;\r\n            vs.packetsLost = r.packetsLost;\r\n            vs.roundTripTime = r.roundTripTime;\r\n          }\r\n          items.push(vs);\r\n        }\r\n      });\r\n      // make sure highest res layer is always first\r\n      items.sort((a, b) => {\r\n        var _a, _b;\r\n        return ((_a = b.frameWidth) !== null && _a !== void 0 ? _a : 0) - ((_b = a.frameWidth) !== null && _b !== void 0 ? _b : 0);\r\n      });\r\n      return items;\r\n    });\r\n  }\r\n  setPublishingQuality(maxQuality) {\r\n    const qualities = [];\r\n    for (let q = VideoQuality.LOW; q <= VideoQuality.HIGH; q += 1) {\r\n      qualities.push(new SubscribedQuality({\r\n        quality: q,\r\n        enabled: q <= maxQuality\r\n      }));\r\n    }\r\n    this.log.debug(\"setting publishing quality. max quality \".concat(maxQuality), this.logContext);\r\n    this.setPublishingLayers(isSVCCodec(this.codec), qualities);\r\n  }\r\n  restartTrack(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, e_3, _b, _c;\r\n      var _d;\r\n      let constraints;\r\n      if (options) {\r\n        const streamConstraints = constraintsForOptions({\r\n          video: options\r\n        });\r\n        if (typeof streamConstraints.video !== 'boolean') {\r\n          constraints = streamConstraints.video;\r\n        }\r\n      }\r\n      yield this.restart(constraints);\r\n      try {\r\n        for (var _e = true, _f = __asyncValues(this.simulcastCodecs.values()), _g; _g = yield _f.next(), _a = _g.done, !_a; _e = true) {\r\n          _c = _g.value;\r\n          _e = false;\r\n          const sc = _c;\r\n          if (sc.sender && ((_d = sc.sender.transport) === null || _d === void 0 ? void 0 : _d.state) !== 'closed') {\r\n            sc.mediaStreamTrack = this.mediaStreamTrack.clone();\r\n            yield sc.sender.replaceTrack(sc.mediaStreamTrack);\r\n          }\r\n        }\r\n      } catch (e_3_1) {\r\n        e_3 = {\r\n          error: e_3_1\r\n        };\r\n      } finally {\r\n        try {\r\n          if (!_e && !_a && (_b = _f.return)) yield _b.call(_f);\r\n        } finally {\r\n          if (e_3) throw e_3.error;\r\n        }\r\n      }\r\n    });\r\n  }\r\n  setProcessor(processor_1) {\r\n    const _super = Object.create(null, {\r\n      setProcessor: {\r\n        get: () => super.setProcessor\r\n      }\r\n    });\r\n    return __awaiter(this, arguments, void 0, function (processor) {\r\n      var _this = this;\r\n      let showProcessedStreamLocally = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n      return function* () {\r\n        var _a, e_4, _b, _c;\r\n        var _d, _e;\r\n        yield _super.setProcessor.call(_this, processor, showProcessedStreamLocally);\r\n        if ((_d = _this.processor) === null || _d === void 0 ? void 0 : _d.processedTrack) {\r\n          try {\r\n            for (var _f = true, _g = __asyncValues(_this.simulcastCodecs.values()), _h; _h = yield _g.next(), _a = _h.done, !_a; _f = true) {\r\n              _c = _h.value;\r\n              _f = false;\r\n              const sc = _c;\r\n              yield (_e = sc.sender) === null || _e === void 0 ? void 0 : _e.replaceTrack(_this.processor.processedTrack);\r\n            }\r\n          } catch (e_4_1) {\r\n            e_4 = {\r\n              error: e_4_1\r\n            };\r\n          } finally {\r\n            try {\r\n              if (!_f && !_a && (_b = _g.return)) yield _b.call(_g);\r\n            } finally {\r\n              if (e_4) throw e_4.error;\r\n            }\r\n          }\r\n        }\r\n      }();\r\n    });\r\n  }\r\n  setDegradationPreference(preference) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.degradationPreference = preference;\r\n      if (this.sender) {\r\n        try {\r\n          this.log.debug(\"setting degradationPreference to \".concat(preference), this.logContext);\r\n          const params = this.sender.getParameters();\r\n          params.degradationPreference = preference;\r\n          this.sender.setParameters(params);\r\n        } catch (e) {\r\n          this.log.warn(\"failed to set degradationPreference\", Object.assign({\r\n            error: e\r\n          }, this.logContext));\r\n        }\r\n      }\r\n    });\r\n  }\r\n  addSimulcastTrack(codec, encodings) {\r\n    if (this.simulcastCodecs.has(codec)) {\r\n      this.log.error(\"\".concat(codec, \" already added, skipping adding simulcast codec\"), this.logContext);\r\n      return;\r\n    }\r\n    const simulcastCodecInfo = {\r\n      codec,\r\n      mediaStreamTrack: this.mediaStreamTrack.clone(),\r\n      sender: undefined,\r\n      encodings\r\n    };\r\n    this.simulcastCodecs.set(codec, simulcastCodecInfo);\r\n    return simulcastCodecInfo;\r\n  }\r\n  setSimulcastTrackSender(codec, sender) {\r\n    const simulcastCodecInfo = this.simulcastCodecs.get(codec);\r\n    if (!simulcastCodecInfo) {\r\n      return;\r\n    }\r\n    simulcastCodecInfo.sender = sender;\r\n    // browser will reenable disabled codec/layers after new codec has been published,\r\n    // so refresh subscribedCodecs after publish a new codec\r\n    setTimeout(() => {\r\n      if (this.subscribedCodecs) {\r\n        this.setPublishingCodecs(this.subscribedCodecs);\r\n      }\r\n    }, refreshSubscribedCodecAfterNewCodec);\r\n  }\r\n  /**\r\n   * @internal\r\n   * Sets codecs that should be publishing, returns new codecs that have not yet\r\n   * been published\r\n   */\r\n  setPublishingCodecs(codecs) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, codecs_1, codecs_1_1;\r\n      var _b, e_5, _c, _d;\r\n      this.log.debug('setting publishing codecs', Object.assign(Object.assign({}, this.logContext), {\r\n        codecs,\r\n        currentCodec: this.codec\r\n      }));\r\n      // only enable simulcast codec for preference codec setted\r\n      if (!this.codec && codecs.length > 0) {\r\n        yield this.setPublishingLayers(isSVCCodec(codecs[0].codec), codecs[0].qualities);\r\n        return [];\r\n      }\r\n      this.subscribedCodecs = codecs;\r\n      const newCodecs = [];\r\n      try {\r\n        for (_a = true, codecs_1 = __asyncValues(codecs); codecs_1_1 = yield codecs_1.next(), _b = codecs_1_1.done, !_b; _a = true) {\r\n          _d = codecs_1_1.value;\r\n          _a = false;\r\n          const codec = _d;\r\n          if (!this.codec || this.codec === codec.codec) {\r\n            yield this.setPublishingLayers(isSVCCodec(codec.codec), codec.qualities);\r\n          } else {\r\n            const simulcastCodecInfo = this.simulcastCodecs.get(codec.codec);\r\n            this.log.debug(\"try setPublishingCodec for \".concat(codec.codec), Object.assign(Object.assign({}, this.logContext), {\r\n              simulcastCodecInfo\r\n            }));\r\n            if (!simulcastCodecInfo || !simulcastCodecInfo.sender) {\r\n              for (const q of codec.qualities) {\r\n                if (q.enabled) {\r\n                  newCodecs.push(codec.codec);\r\n                  break;\r\n                }\r\n              }\r\n            } else if (simulcastCodecInfo.encodings) {\r\n              this.log.debug(\"try setPublishingLayersForSender \".concat(codec.codec), this.logContext);\r\n              yield setPublishingLayersForSender(simulcastCodecInfo.sender, simulcastCodecInfo.encodings, codec.qualities, this.senderLock, isSVCCodec(codec.codec), this.log, this.logContext);\r\n            }\r\n          }\r\n        }\r\n      } catch (e_5_1) {\r\n        e_5 = {\r\n          error: e_5_1\r\n        };\r\n      } finally {\r\n        try {\r\n          if (!_a && !_b && (_c = codecs_1.return)) yield _c.call(codecs_1);\r\n        } finally {\r\n          if (e_5) throw e_5.error;\r\n        }\r\n      }\r\n      return newCodecs;\r\n    });\r\n  }\r\n  /**\r\n   * @internal\r\n   * Sets layers that should be publishing\r\n   */\r\n  setPublishingLayers(isSvc, qualities) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.log.debug('setting publishing layers', Object.assign(Object.assign({}, this.logContext), {\r\n        qualities\r\n      }));\r\n      if (!this.sender || !this.encodings) {\r\n        return;\r\n      }\r\n      yield setPublishingLayersForSender(this.sender, this.encodings, qualities, this.senderLock, isSvc, this.log, this.logContext);\r\n    });\r\n  }\r\n  handleAppVisibilityChanged() {\r\n    const _super = Object.create(null, {\r\n      handleAppVisibilityChanged: {\r\n        get: () => super.handleAppVisibilityChanged\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield _super.handleAppVisibilityChanged.call(this);\r\n      if (!isMobile()) return;\r\n      if (this.isInBackground && this.source === Track.Source.Camera) {\r\n        this._mediaStreamTrack.enabled = false;\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction setPublishingLayersForSender(sender, senderEncodings, qualities, senderLock, isSVC, log, logContext) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    const unlock = yield senderLock.lock();\r\n    log.debug('setPublishingLayersForSender', Object.assign(Object.assign({}, logContext), {\r\n      sender,\r\n      qualities,\r\n      senderEncodings\r\n    }));\r\n    try {\r\n      const params = sender.getParameters();\r\n      const {\r\n        encodings\r\n      } = params;\r\n      if (!encodings) {\r\n        return;\r\n      }\r\n      if (encodings.length !== senderEncodings.length) {\r\n        log.warn('cannot set publishing layers, encodings mismatch', Object.assign(Object.assign({}, logContext), {\r\n          encodings,\r\n          senderEncodings\r\n        }));\r\n        return;\r\n      }\r\n      let hasChanged = false;\r\n      const browser = getBrowser();\r\n      const closableSpatial = (browser === null || browser === void 0 ? void 0 : browser.name) === 'Chrome' && compareVersions(browser === null || browser === void 0 ? void 0 : browser.version, '133') > 0;\r\n      /* @ts-ignore */\r\n      if (closableSpatial && encodings[0].scalabilityMode) {\r\n        // svc dynacast encodings\r\n        const encoding = encodings[0];\r\n        /* @ts-ignore */\r\n        const mode = new ScalabilityMode(encoding.scalabilityMode);\r\n        let maxQuality = VideoQuality$1.OFF;\r\n        qualities.forEach(q => {\r\n          if (q.enabled && (maxQuality === VideoQuality$1.OFF || q.quality > maxQuality)) {\r\n            maxQuality = q.quality;\r\n          }\r\n        });\r\n        if (maxQuality === VideoQuality$1.OFF) {\r\n          if (encoding.active) {\r\n            encoding.active = false;\r\n            hasChanged = true;\r\n          }\r\n        } else if (!encoding.active || mode.spatial !== maxQuality + 1) {\r\n          hasChanged = true;\r\n          encoding.active = true;\r\n          /* @ts-ignore */\r\n          const originalMode = new ScalabilityMode(senderEncodings[0].scalabilityMode);\r\n          mode.spatial = maxQuality + 1;\r\n          mode.suffix = originalMode.suffix;\r\n          if (mode.spatial === 1) {\r\n            // no suffix for L1Tx\r\n            mode.suffix = undefined;\r\n          }\r\n          /* @ts-ignore */\r\n          encoding.scalabilityMode = mode.toString();\r\n          encoding.scaleResolutionDownBy = Math.pow(2, 2 - maxQuality);\r\n          if (senderEncodings[0].maxBitrate) {\r\n            encoding.maxBitrate = senderEncodings[0].maxBitrate / (encoding.scaleResolutionDownBy * encoding.scaleResolutionDownBy);\r\n          }\r\n        }\r\n      } else {\r\n        if (isSVC) {\r\n          const hasEnabledEncoding = qualities.some(q => q.enabled);\r\n          if (hasEnabledEncoding) {\r\n            qualities.forEach(q => q.enabled = true);\r\n          }\r\n        }\r\n        // simulcast dynacast encodings\r\n        encodings.forEach((encoding, idx) => {\r\n          var _a;\r\n          let rid = (_a = encoding.rid) !== null && _a !== void 0 ? _a : '';\r\n          if (rid === '') {\r\n            rid = 'q';\r\n          }\r\n          const quality = videoQualityForRid(rid);\r\n          const subscribedQuality = qualities.find(q => q.quality === quality);\r\n          if (!subscribedQuality) {\r\n            return;\r\n          }\r\n          if (encoding.active !== subscribedQuality.enabled) {\r\n            hasChanged = true;\r\n            encoding.active = subscribedQuality.enabled;\r\n            log.debug(\"setting layer \".concat(subscribedQuality.quality, \" to \").concat(encoding.active ? 'enabled' : 'disabled'), logContext);\r\n            // FireFox does not support setting encoding.active to false, so we\r\n            // have a workaround of lowering its bitrate and resolution to the min.\r\n            if (isFireFox()) {\r\n              if (subscribedQuality.enabled) {\r\n                encoding.scaleResolutionDownBy = senderEncodings[idx].scaleResolutionDownBy;\r\n                encoding.maxBitrate = senderEncodings[idx].maxBitrate;\r\n                /* @ts-ignore */\r\n                encoding.maxFrameRate = senderEncodings[idx].maxFrameRate;\r\n              } else {\r\n                encoding.scaleResolutionDownBy = 4;\r\n                encoding.maxBitrate = 10;\r\n                /* @ts-ignore */\r\n                encoding.maxFrameRate = 2;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n      if (hasChanged) {\r\n        params.encodings = encodings;\r\n        log.debug(\"setting encodings\", Object.assign(Object.assign({}, logContext), {\r\n          encodings: params.encodings\r\n        }));\r\n        yield sender.setParameters(params);\r\n      }\r\n    } finally {\r\n      unlock();\r\n    }\r\n  });\r\n}\r\nfunction videoQualityForRid(rid) {\r\n  switch (rid) {\r\n    case 'f':\r\n      return VideoQuality.HIGH;\r\n    case 'h':\r\n      return VideoQuality.MEDIUM;\r\n    case 'q':\r\n      return VideoQuality.LOW;\r\n    default:\r\n      return VideoQuality.HIGH;\r\n  }\r\n}\r\nfunction videoLayersFromEncodings(width, height, encodings, svc) {\r\n  // default to a single layer, HQ\r\n  if (!encodings) {\r\n    return [new VideoLayer({\r\n      quality: VideoQuality.HIGH,\r\n      width,\r\n      height,\r\n      bitrate: 0,\r\n      ssrc: 0\r\n    })];\r\n  }\r\n  if (svc) {\r\n    // svc layers\r\n    /* @ts-ignore */\r\n    const encodingSM = encodings[0].scalabilityMode;\r\n    const sm = new ScalabilityMode(encodingSM);\r\n    const layers = [];\r\n    const resRatio = sm.suffix == 'h' ? 1.5 : 2;\r\n    const bitratesRatio = sm.suffix == 'h' ? 2 : 3;\r\n    for (let i = 0; i < sm.spatial; i += 1) {\r\n      layers.push(new VideoLayer({\r\n        quality: Math.min(VideoQuality.HIGH, sm.spatial - 1) - i,\r\n        width: Math.ceil(width / Math.pow(resRatio, i)),\r\n        height: Math.ceil(height / Math.pow(resRatio, i)),\r\n        bitrate: encodings[0].maxBitrate ? Math.ceil(encodings[0].maxBitrate / Math.pow(bitratesRatio, i)) : 0,\r\n        ssrc: 0\r\n      }));\r\n    }\r\n    return layers;\r\n  }\r\n  return encodings.map(encoding => {\r\n    var _a, _b, _c;\r\n    const scale = (_a = encoding.scaleResolutionDownBy) !== null && _a !== void 0 ? _a : 1;\r\n    let quality = videoQualityForRid((_b = encoding.rid) !== null && _b !== void 0 ? _b : '');\r\n    return new VideoLayer({\r\n      quality,\r\n      width: Math.ceil(width / scale),\r\n      height: Math.ceil(height / scale),\r\n      bitrate: (_c = encoding.maxBitrate) !== null && _c !== void 0 ? _c : 0,\r\n      ssrc: 0\r\n    });\r\n  });\r\n}\r\n\r\nconst lossyDataChannel = '_lossy';\r\nconst reliableDataChannel = '_reliable';\r\nconst minReconnectWait = 2 * 1000;\r\nconst leaveReconnect = 'leave-reconnect';\r\nconst reliabeReceiveStateTTL = 30000;\r\nvar PCState;\r\n(function (PCState) {\r\n  PCState[PCState[\"New\"] = 0] = \"New\";\r\n  PCState[PCState[\"Connected\"] = 1] = \"Connected\";\r\n  PCState[PCState[\"Disconnected\"] = 2] = \"Disconnected\";\r\n  PCState[PCState[\"Reconnecting\"] = 3] = \"Reconnecting\";\r\n  PCState[PCState[\"Closed\"] = 4] = \"Closed\";\r\n})(PCState || (PCState = {}));\r\n/** @internal */\r\nclass RTCEngine extends eventsExports.EventEmitter {\r\n  get isClosed() {\r\n    return this._isClosed;\r\n  }\r\n  get pendingReconnect() {\r\n    return !!this.reconnectTimeout;\r\n  }\r\n  constructor(options) {\r\n    var _a;\r\n    super();\r\n    this.options = options;\r\n    this.rtcConfig = {};\r\n    this.peerConnectionTimeout = roomConnectOptionDefaults.peerConnectionTimeout;\r\n    this.fullReconnectOnNext = false;\r\n    this.subscriberPrimary = false;\r\n    this.pcState = PCState.New;\r\n    this._isClosed = true;\r\n    this.pendingTrackResolvers = {};\r\n    this.reconnectAttempts = 0;\r\n    this.reconnectStart = 0;\r\n    this.attemptingReconnect = false;\r\n    /** keeps track of how often an initial join connection has been tried */\r\n    this.joinAttempts = 0;\r\n    /** specifies how often an initial join connection is allowed to retry */\r\n    this.maxJoinAttempts = 1;\r\n    this.shouldFailNext = false;\r\n    this.log = livekitLogger;\r\n    this.reliableDataSequence = 1;\r\n    this.reliableMessageBuffer = new DataPacketBuffer();\r\n    this.reliableReceivedState = new TTLMap(reliabeReceiveStateTTL);\r\n    this.handleDataChannel = _a => __awaiter(this, [_a], void 0, function (_ref) {\r\n      var _this = this;\r\n      let {\r\n        channel\r\n      } = _ref;\r\n      return function* () {\r\n        if (!channel) {\r\n          return;\r\n        }\r\n        if (channel.label === reliableDataChannel) {\r\n          _this.reliableDCSub = channel;\r\n        } else if (channel.label === lossyDataChannel) {\r\n          _this.lossyDCSub = channel;\r\n        } else {\r\n          return;\r\n        }\r\n        _this.log.debug(\"on data channel \".concat(channel.id, \", \").concat(channel.label), _this.logContext);\r\n        channel.onmessage = _this.handleDataMessage;\r\n      }();\r\n    });\r\n    this.handleDataMessage = message => __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      // make sure to respect incoming data message order by processing message events one after the other\r\n      const unlock = yield this.dataProcessLock.lock();\r\n      try {\r\n        // decode\r\n        let buffer;\r\n        if (message.data instanceof ArrayBuffer) {\r\n          buffer = message.data;\r\n        } else if (message.data instanceof Blob) {\r\n          buffer = yield message.data.arrayBuffer();\r\n        } else {\r\n          this.log.error('unsupported data type', Object.assign(Object.assign({}, this.logContext), {\r\n            data: message.data\r\n          }));\r\n          return;\r\n        }\r\n        const dp = DataPacket.fromBinary(new Uint8Array(buffer));\r\n        if (dp.sequence > 0 && dp.participantSid !== '') {\r\n          const lastSeq = this.reliableReceivedState.get(dp.participantSid);\r\n          if (lastSeq && dp.sequence <= lastSeq) {\r\n            // ignore duplicate or out-of-order packets in reliable channel\r\n            return;\r\n          }\r\n          this.reliableReceivedState.set(dp.participantSid, dp.sequence);\r\n        }\r\n        if (((_a = dp.value) === null || _a === void 0 ? void 0 : _a.case) === 'speaker') {\r\n          // dispatch speaker updates\r\n          this.emit(EngineEvent.ActiveSpeakersUpdate, dp.value.value.speakers);\r\n        } else {\r\n          if (((_b = dp.value) === null || _b === void 0 ? void 0 : _b.case) === 'user') {\r\n            // compatibility\r\n            applyUserDataCompat(dp, dp.value.value);\r\n          }\r\n          this.emit(EngineEvent.DataPacketReceived, dp);\r\n        }\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n    this.handleDataError = event => {\r\n      const channel = event.currentTarget;\r\n      const channelKind = channel.maxRetransmits === 0 ? 'lossy' : 'reliable';\r\n      if (event instanceof ErrorEvent && event.error) {\r\n        const {\r\n          error\r\n        } = event.error;\r\n        this.log.error(\"DataChannel error on \".concat(channelKind, \": \").concat(event.message), Object.assign(Object.assign({}, this.logContext), {\r\n          error\r\n        }));\r\n      } else {\r\n        this.log.error(\"Unknown DataChannel error on \".concat(channelKind), Object.assign(Object.assign({}, this.logContext), {\r\n          event\r\n        }));\r\n      }\r\n    };\r\n    this.handleBufferedAmountLow = event => {\r\n      const channel = event.currentTarget;\r\n      const channelKind = channel.maxRetransmits === 0 ? DataPacket_Kind.LOSSY : DataPacket_Kind.RELIABLE;\r\n      this.updateAndEmitDCBufferStatus(channelKind);\r\n    };\r\n    // websocket reconnect behavior. if websocket is interrupted, and the PeerConnection\r\n    // continues to work, we can reconnect to websocket to continue the session\r\n    // after a number of retries, we'll close and give up permanently\r\n    this.handleDisconnect = (connection, disconnectReason) => {\r\n      if (this._isClosed) {\r\n        return;\r\n      }\r\n      this.log.warn(\"\".concat(connection, \" disconnected\"), this.logContext);\r\n      if (this.reconnectAttempts === 0) {\r\n        // only reset start time on the first try\r\n        this.reconnectStart = Date.now();\r\n      }\r\n      const disconnect = duration => {\r\n        this.log.warn(\"could not recover connection after \".concat(this.reconnectAttempts, \" attempts, \").concat(duration, \"ms. giving up\"), this.logContext);\r\n        this.emit(EngineEvent.Disconnected);\r\n        this.close();\r\n      };\r\n      const duration = Date.now() - this.reconnectStart;\r\n      let delay = this.getNextRetryDelay({\r\n        elapsedMs: duration,\r\n        retryCount: this.reconnectAttempts\r\n      });\r\n      if (delay === null) {\r\n        disconnect(duration);\r\n        return;\r\n      }\r\n      if (connection === leaveReconnect) {\r\n        delay = 0;\r\n      }\r\n      this.log.debug(\"reconnecting in \".concat(delay, \"ms\"), this.logContext);\r\n      this.clearReconnectTimeout();\r\n      if (this.token && this.regionUrlProvider) {\r\n        // token may have been refreshed, we do not want to recreate the regionUrlProvider\r\n        // since the current engine may have inherited a regional url\r\n        this.regionUrlProvider.updateToken(this.token);\r\n      }\r\n      this.reconnectTimeout = CriticalTimers.setTimeout(() => this.attemptReconnect(disconnectReason).finally(() => this.reconnectTimeout = undefined), delay);\r\n    };\r\n    this.waitForRestarted = () => {\r\n      return new Promise((resolve, reject) => {\r\n        if (this.pcState === PCState.Connected) {\r\n          resolve();\r\n        }\r\n        const onRestarted = () => {\r\n          this.off(EngineEvent.Disconnected, onDisconnected);\r\n          resolve();\r\n        };\r\n        const onDisconnected = () => {\r\n          this.off(EngineEvent.Restarted, onRestarted);\r\n          reject();\r\n        };\r\n        this.once(EngineEvent.Restarted, onRestarted);\r\n        this.once(EngineEvent.Disconnected, onDisconnected);\r\n      });\r\n    };\r\n    this.updateAndEmitDCBufferStatus = kind => {\r\n      const status = this.isBufferStatusLow(kind);\r\n      if (typeof status !== 'undefined' && status !== this.dcBufferStatus.get(kind)) {\r\n        this.dcBufferStatus.set(kind, status);\r\n        this.emit(EngineEvent.DCBufferStatusChanged, status, kind);\r\n      }\r\n    };\r\n    this.isBufferStatusLow = kind => {\r\n      const dc = this.dataChannelForKind(kind);\r\n      if (dc) {\r\n        if (kind === DataPacket_Kind.RELIABLE) {\r\n          this.reliableMessageBuffer.alignBufferedAmount(dc.bufferedAmount);\r\n        }\r\n        return dc.bufferedAmount <= dc.bufferedAmountLowThreshold;\r\n      }\r\n    };\r\n    this.handleBrowserOnLine = () => {\r\n      // in case the engine is currently reconnecting, attempt a reconnect immediately after the browser state has changed to 'onLine'\r\n      if (this.client.currentState === SignalConnectionState.RECONNECTING) {\r\n        this.clearReconnectTimeout();\r\n        this.attemptReconnect(ReconnectReason.RR_SIGNAL_DISCONNECTED);\r\n      }\r\n    };\r\n    this.log = getLogger((_a = options.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.Engine);\r\n    this.loggerOptions = {\r\n      loggerName: options.loggerName,\r\n      loggerContextCb: () => this.logContext\r\n    };\r\n    this.client = new SignalClient(undefined, this.loggerOptions);\r\n    this.client.signalLatency = this.options.expSignalLatency;\r\n    this.reconnectPolicy = this.options.reconnectPolicy;\r\n    this.registerOnLineListener();\r\n    this.closingLock = new _();\r\n    this.dataProcessLock = new _();\r\n    this.dcBufferStatus = new Map([[DataPacket_Kind.LOSSY, true], [DataPacket_Kind.RELIABLE, true]]);\r\n    this.client.onParticipantUpdate = updates => this.emit(EngineEvent.ParticipantUpdate, updates);\r\n    this.client.onConnectionQuality = update => this.emit(EngineEvent.ConnectionQualityUpdate, update);\r\n    this.client.onRoomUpdate = update => this.emit(EngineEvent.RoomUpdate, update);\r\n    this.client.onSubscriptionError = resp => this.emit(EngineEvent.SubscriptionError, resp);\r\n    this.client.onSubscriptionPermissionUpdate = update => this.emit(EngineEvent.SubscriptionPermissionUpdate, update);\r\n    this.client.onSpeakersChanged = update => this.emit(EngineEvent.SpeakersChanged, update);\r\n    this.client.onStreamStateUpdate = update => this.emit(EngineEvent.StreamStateChanged, update);\r\n    this.client.onRequestResponse = response => this.emit(EngineEvent.SignalRequestResponse, response);\r\n  }\r\n  /** @internal */\r\n  get logContext() {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    return {\r\n      room: (_b = (_a = this.latestJoinResponse) === null || _a === void 0 ? void 0 : _a.room) === null || _b === void 0 ? void 0 : _b.name,\r\n      roomID: (_d = (_c = this.latestJoinResponse) === null || _c === void 0 ? void 0 : _c.room) === null || _d === void 0 ? void 0 : _d.sid,\r\n      participant: (_f = (_e = this.latestJoinResponse) === null || _e === void 0 ? void 0 : _e.participant) === null || _f === void 0 ? void 0 : _f.identity,\r\n      pID: this.participantSid\r\n    };\r\n  }\r\n  join(url, token, opts, abortSignal) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.url = url;\r\n      this.token = token;\r\n      this.signalOpts = opts;\r\n      this.maxJoinAttempts = opts.maxRetries;\r\n      try {\r\n        this.joinAttempts += 1;\r\n        this.setupSignalClientCallbacks();\r\n        const joinResponse = yield this.client.join(url, token, opts, abortSignal);\r\n        this._isClosed = false;\r\n        this.latestJoinResponse = joinResponse;\r\n        this.subscriberPrimary = joinResponse.subscriberPrimary;\r\n        if (!this.pcManager) {\r\n          yield this.configure(joinResponse);\r\n        }\r\n        // create offer\r\n        if (!this.subscriberPrimary || joinResponse.fastPublish) {\r\n          this.negotiate();\r\n        }\r\n        this.clientConfiguration = joinResponse.clientConfiguration;\r\n        this.emit(EngineEvent.SignalConnected, joinResponse);\r\n        return joinResponse;\r\n      } catch (e) {\r\n        if (e instanceof ConnectionError) {\r\n          if (e.reason === ConnectionErrorReason.ServerUnreachable) {\r\n            this.log.warn(\"Couldn't connect to server, attempt \".concat(this.joinAttempts, \" of \").concat(this.maxJoinAttempts), this.logContext);\r\n            if (this.joinAttempts < this.maxJoinAttempts) {\r\n              return this.join(url, token, opts, abortSignal);\r\n            }\r\n          }\r\n        }\r\n        throw e;\r\n      }\r\n    });\r\n  }\r\n  close() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const unlock = yield this.closingLock.lock();\r\n      if (this.isClosed) {\r\n        unlock();\r\n        return;\r\n      }\r\n      try {\r\n        this._isClosed = true;\r\n        this.joinAttempts = 0;\r\n        this.emit(EngineEvent.Closing);\r\n        this.removeAllListeners();\r\n        this.deregisterOnLineListener();\r\n        this.clearPendingReconnect();\r\n        yield this.cleanupPeerConnections();\r\n        yield this.cleanupClient();\r\n      } finally {\r\n        unlock();\r\n      }\r\n    });\r\n  }\r\n  cleanupPeerConnections() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      yield (_a = this.pcManager) === null || _a === void 0 ? void 0 : _a.close();\r\n      this.pcManager = undefined;\r\n      const dcCleanup = dc => {\r\n        if (!dc) return;\r\n        dc.close();\r\n        dc.onbufferedamountlow = null;\r\n        dc.onclose = null;\r\n        dc.onclosing = null;\r\n        dc.onerror = null;\r\n        dc.onmessage = null;\r\n        dc.onopen = null;\r\n      };\r\n      dcCleanup(this.lossyDC);\r\n      dcCleanup(this.lossyDCSub);\r\n      dcCleanup(this.reliableDC);\r\n      dcCleanup(this.reliableDCSub);\r\n      this.lossyDC = undefined;\r\n      this.lossyDCSub = undefined;\r\n      this.reliableDC = undefined;\r\n      this.reliableDCSub = undefined;\r\n      this.reliableMessageBuffer = new DataPacketBuffer();\r\n      this.reliableDataSequence = 1;\r\n      this.reliableReceivedState.clear();\r\n    });\r\n  }\r\n  cleanupClient() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield this.client.close();\r\n      this.client.resetCallbacks();\r\n    });\r\n  }\r\n  addTrack(req) {\r\n    if (this.pendingTrackResolvers[req.cid]) {\r\n      throw new TrackInvalidError('a track with the same ID has already been published');\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      const publicationTimeout = setTimeout(() => {\r\n        delete this.pendingTrackResolvers[req.cid];\r\n        reject(new ConnectionError('publication of local track timed out, no response from server', ConnectionErrorReason.Timeout));\r\n      }, 10000);\r\n      this.pendingTrackResolvers[req.cid] = {\r\n        resolve: info => {\r\n          clearTimeout(publicationTimeout);\r\n          resolve(info);\r\n        },\r\n        reject: () => {\r\n          clearTimeout(publicationTimeout);\r\n          reject(new Error('Cancelled publication by calling unpublish'));\r\n        }\r\n      };\r\n      this.client.sendAddTrack(req);\r\n    });\r\n  }\r\n  /**\r\n   * Removes sender from PeerConnection, returning true if it was removed successfully\r\n   * and a negotiation is necessary\r\n   * @param sender\r\n   * @returns\r\n   */\r\n  removeTrack(sender) {\r\n    if (sender.track && this.pendingTrackResolvers[sender.track.id]) {\r\n      const {\r\n        reject\r\n      } = this.pendingTrackResolvers[sender.track.id];\r\n      if (reject) {\r\n        reject();\r\n      }\r\n      delete this.pendingTrackResolvers[sender.track.id];\r\n    }\r\n    try {\r\n      this.pcManager.removeTrack(sender);\r\n      return true;\r\n    } catch (e) {\r\n      this.log.warn('failed to remove track', Object.assign(Object.assign({}, this.logContext), {\r\n        error: e\r\n      }));\r\n    }\r\n    return false;\r\n  }\r\n  updateMuteStatus(trackSid, muted) {\r\n    this.client.sendMuteTrack(trackSid, muted);\r\n  }\r\n  get dataSubscriberReadyState() {\r\n    var _a;\r\n    return (_a = this.reliableDCSub) === null || _a === void 0 ? void 0 : _a.readyState;\r\n  }\r\n  getConnectedServerAddress() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      return (_a = this.pcManager) === null || _a === void 0 ? void 0 : _a.getConnectedAddress();\r\n    });\r\n  }\r\n  /* @internal */\r\n  setRegionUrlProvider(provider) {\r\n    this.regionUrlProvider = provider;\r\n  }\r\n  configure(joinResponse) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      // already configured\r\n      if (this.pcManager && this.pcManager.currentState !== PCTransportState.NEW) {\r\n        return;\r\n      }\r\n      this.participantSid = (_a = joinResponse.participant) === null || _a === void 0 ? void 0 : _a.sid;\r\n      const rtcConfig = this.makeRTCConfiguration(joinResponse);\r\n      this.pcManager = new PCTransportManager(rtcConfig, joinResponse.subscriberPrimary, this.loggerOptions);\r\n      this.emit(EngineEvent.TransportsCreated, this.pcManager.publisher, this.pcManager.subscriber);\r\n      this.pcManager.onIceCandidate = (candidate, target) => {\r\n        this.client.sendIceCandidate(candidate, target);\r\n      };\r\n      this.pcManager.onPublisherOffer = offer => {\r\n        this.client.sendOffer(offer);\r\n      };\r\n      this.pcManager.onDataChannel = this.handleDataChannel;\r\n      this.pcManager.onStateChange = (connectionState, publisherState, subscriberState) => __awaiter(this, void 0, void 0, function* () {\r\n        this.log.debug(\"primary PC state changed \".concat(connectionState), this.logContext);\r\n        if (['closed', 'disconnected', 'failed'].includes(publisherState)) {\r\n          // reset publisher connection promise\r\n          this.publisherConnectionPromise = undefined;\r\n        }\r\n        if (connectionState === PCTransportState.CONNECTED) {\r\n          const shouldEmit = this.pcState === PCState.New;\r\n          this.pcState = PCState.Connected;\r\n          if (shouldEmit) {\r\n            this.emit(EngineEvent.Connected, joinResponse);\r\n          }\r\n        } else if (connectionState === PCTransportState.FAILED) {\r\n          // on Safari, PeerConnection will switch to 'disconnected' during renegotiation\r\n          if (this.pcState === PCState.Connected) {\r\n            this.pcState = PCState.Disconnected;\r\n            this.handleDisconnect('peerconnection failed', subscriberState === 'failed' ? ReconnectReason.RR_SUBSCRIBER_FAILED : ReconnectReason.RR_PUBLISHER_FAILED);\r\n          }\r\n        }\r\n        // detect cases where both signal client and peer connection are severed and assume that user has lost network connection\r\n        const isSignalSevered = this.client.isDisconnected || this.client.currentState === SignalConnectionState.RECONNECTING;\r\n        const isPCSevered = [PCTransportState.FAILED, PCTransportState.CLOSING, PCTransportState.CLOSED].includes(connectionState);\r\n        if (isSignalSevered && isPCSevered && !this._isClosed) {\r\n          this.emit(EngineEvent.Offline);\r\n        }\r\n      });\r\n      this.pcManager.onTrack = ev => {\r\n        this.emit(EngineEvent.MediaTrackAdded, ev.track, ev.streams[0], ev.receiver);\r\n      };\r\n      if (!supportOptionalDatachannel((_b = joinResponse.serverInfo) === null || _b === void 0 ? void 0 : _b.protocol)) {\r\n        this.createDataChannels();\r\n      }\r\n    });\r\n  }\r\n  setupSignalClientCallbacks() {\r\n    // configure signaling client\r\n    this.client.onAnswer = sd => __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.pcManager) {\r\n        return;\r\n      }\r\n      this.log.debug('received server answer', Object.assign(Object.assign({}, this.logContext), {\r\n        RTCSdpType: sd.type\r\n      }));\r\n      yield this.pcManager.setPublisherAnswer(sd);\r\n    });\r\n    // add candidate on trickle\r\n    this.client.onTrickle = (candidate, target) => {\r\n      if (!this.pcManager) {\r\n        return;\r\n      }\r\n      this.log.debug('got ICE candidate from peer', Object.assign(Object.assign({}, this.logContext), {\r\n        candidate,\r\n        target\r\n      }));\r\n      this.pcManager.addIceCandidate(candidate, target);\r\n    };\r\n    // when server creates an offer for the client\r\n    this.client.onOffer = sd => __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.pcManager) {\r\n        return;\r\n      }\r\n      const answer = yield this.pcManager.createSubscriberAnswerFromOffer(sd);\r\n      this.client.sendAnswer(answer);\r\n    });\r\n    this.client.onLocalTrackPublished = res => {\r\n      var _a;\r\n      this.log.debug('received trackPublishedResponse', Object.assign(Object.assign({}, this.logContext), {\r\n        cid: res.cid,\r\n        track: (_a = res.track) === null || _a === void 0 ? void 0 : _a.sid\r\n      }));\r\n      if (!this.pendingTrackResolvers[res.cid]) {\r\n        this.log.error(\"missing track resolver for \".concat(res.cid), Object.assign(Object.assign({}, this.logContext), {\r\n          cid: res.cid\r\n        }));\r\n        return;\r\n      }\r\n      const {\r\n        resolve\r\n      } = this.pendingTrackResolvers[res.cid];\r\n      delete this.pendingTrackResolvers[res.cid];\r\n      resolve(res.track);\r\n    };\r\n    this.client.onLocalTrackUnpublished = response => {\r\n      this.emit(EngineEvent.LocalTrackUnpublished, response);\r\n    };\r\n    this.client.onLocalTrackSubscribed = trackSid => {\r\n      this.emit(EngineEvent.LocalTrackSubscribed, trackSid);\r\n    };\r\n    this.client.onTokenRefresh = token => {\r\n      this.token = token;\r\n    };\r\n    this.client.onRemoteMuteChanged = (trackSid, muted) => {\r\n      this.emit(EngineEvent.RemoteMute, trackSid, muted);\r\n    };\r\n    this.client.onSubscribedQualityUpdate = update => {\r\n      this.emit(EngineEvent.SubscribedQualityUpdate, update);\r\n    };\r\n    this.client.onRoomMoved = res => {\r\n      var _a;\r\n      this.participantSid = (_a = res.participant) === null || _a === void 0 ? void 0 : _a.sid;\r\n      if (this.latestJoinResponse) {\r\n        this.latestJoinResponse.room = res.room;\r\n      }\r\n      this.emit(EngineEvent.RoomMoved, res);\r\n    };\r\n    this.client.onClose = () => {\r\n      this.handleDisconnect('signal', ReconnectReason.RR_SIGNAL_DISCONNECTED);\r\n    };\r\n    this.client.onLeave = leave => {\r\n      this.log.debug('client leave request', Object.assign(Object.assign({}, this.logContext), {\r\n        reason: leave === null || leave === void 0 ? void 0 : leave.reason\r\n      }));\r\n      if (leave.regions && this.regionUrlProvider) {\r\n        this.log.debug('updating regions', this.logContext);\r\n        this.regionUrlProvider.setServerReportedRegions(leave.regions);\r\n      }\r\n      switch (leave.action) {\r\n        case LeaveRequest_Action.DISCONNECT:\r\n          this.emit(EngineEvent.Disconnected, leave === null || leave === void 0 ? void 0 : leave.reason);\r\n          this.close();\r\n          break;\r\n        case LeaveRequest_Action.RECONNECT:\r\n          this.fullReconnectOnNext = true;\r\n          // reconnect immediately instead of waiting for next attempt\r\n          this.handleDisconnect(leaveReconnect);\r\n          break;\r\n        case LeaveRequest_Action.RESUME:\r\n          // reconnect immediately instead of waiting for next attempt\r\n          this.handleDisconnect(leaveReconnect);\r\n      }\r\n    };\r\n  }\r\n  makeRTCConfiguration(serverResponse) {\r\n    var _a;\r\n    const rtcConfig = Object.assign({}, this.rtcConfig);\r\n    if ((_a = this.signalOpts) === null || _a === void 0 ? void 0 : _a.e2eeEnabled) {\r\n      this.log.debug('E2EE - setting up transports with insertable streams', this.logContext);\r\n      //  this makes sure that no data is sent before the transforms are ready\r\n      // @ts-ignore\r\n      rtcConfig.encodedInsertableStreams = true;\r\n    }\r\n    // update ICE servers before creating PeerConnection\r\n    if (serverResponse.iceServers && !rtcConfig.iceServers) {\r\n      const rtcIceServers = [];\r\n      serverResponse.iceServers.forEach(iceServer => {\r\n        const rtcIceServer = {\r\n          urls: iceServer.urls\r\n        };\r\n        if (iceServer.username) rtcIceServer.username = iceServer.username;\r\n        if (iceServer.credential) {\r\n          rtcIceServer.credential = iceServer.credential;\r\n        }\r\n        rtcIceServers.push(rtcIceServer);\r\n      });\r\n      rtcConfig.iceServers = rtcIceServers;\r\n    }\r\n    if (serverResponse.clientConfiguration && serverResponse.clientConfiguration.forceRelay === ClientConfigSetting.ENABLED) {\r\n      rtcConfig.iceTransportPolicy = 'relay';\r\n    }\r\n    // @ts-ignore\r\n    rtcConfig.sdpSemantics = 'unified-plan';\r\n    // @ts-ignore\r\n    rtcConfig.continualGatheringPolicy = 'gather_continually';\r\n    return rtcConfig;\r\n  }\r\n  createDataChannels() {\r\n    if (!this.pcManager) {\r\n      return;\r\n    }\r\n    // clear old data channel callbacks if recreate\r\n    if (this.lossyDC) {\r\n      this.lossyDC.onmessage = null;\r\n      this.lossyDC.onerror = null;\r\n    }\r\n    if (this.reliableDC) {\r\n      this.reliableDC.onmessage = null;\r\n      this.reliableDC.onerror = null;\r\n    }\r\n    // create data channels\r\n    this.lossyDC = this.pcManager.createPublisherDataChannel(lossyDataChannel, {\r\n      ordered: false,\r\n      maxRetransmits: 0\r\n    });\r\n    this.reliableDC = this.pcManager.createPublisherDataChannel(reliableDataChannel, {\r\n      ordered: true\r\n    });\r\n    // also handle messages over the pub channel, for backwards compatibility\r\n    this.lossyDC.onmessage = this.handleDataMessage;\r\n    this.reliableDC.onmessage = this.handleDataMessage;\r\n    // handle datachannel errors\r\n    this.lossyDC.onerror = this.handleDataError;\r\n    this.reliableDC.onerror = this.handleDataError;\r\n    // set up dc buffer threshold, set to 64kB (otherwise 0 by default)\r\n    this.lossyDC.bufferedAmountLowThreshold = 65535;\r\n    this.reliableDC.bufferedAmountLowThreshold = 65535;\r\n    // handle buffer amount low events\r\n    this.lossyDC.onbufferedamountlow = this.handleBufferedAmountLow;\r\n    this.reliableDC.onbufferedamountlow = this.handleBufferedAmountLow;\r\n  }\r\n  createSender(track, opts, encodings) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (supportsTransceiver()) {\r\n        const sender = yield this.createTransceiverRTCRtpSender(track, opts, encodings);\r\n        return sender;\r\n      }\r\n      if (supportsAddTrack()) {\r\n        this.log.warn('using add-track fallback', this.logContext);\r\n        const sender = yield this.createRTCRtpSender(track.mediaStreamTrack);\r\n        return sender;\r\n      }\r\n      throw new UnexpectedConnectionState('Required webRTC APIs not supported on this device');\r\n    });\r\n  }\r\n  createSimulcastSender(track, simulcastTrack, opts, encodings) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      // store RTCRtpSender\r\n      if (supportsTransceiver()) {\r\n        return this.createSimulcastTransceiverSender(track, simulcastTrack, opts, encodings);\r\n      }\r\n      if (supportsAddTrack()) {\r\n        this.log.debug('using add-track fallback', this.logContext);\r\n        return this.createRTCRtpSender(track.mediaStreamTrack);\r\n      }\r\n      throw new UnexpectedConnectionState('Cannot stream on this device');\r\n    });\r\n  }\r\n  createTransceiverRTCRtpSender(track, opts, encodings) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.pcManager) {\r\n        throw new UnexpectedConnectionState('publisher is closed');\r\n      }\r\n      const streams = [];\r\n      if (track.mediaStream) {\r\n        streams.push(track.mediaStream);\r\n      }\r\n      if (isVideoTrack(track)) {\r\n        track.codec = opts.videoCodec;\r\n      }\r\n      const transceiverInit = {\r\n        direction: 'sendonly',\r\n        streams\r\n      };\r\n      if (encodings) {\r\n        transceiverInit.sendEncodings = encodings;\r\n      }\r\n      // addTransceiver for react-native is async. web is synchronous, but await won't effect it.\r\n      const transceiver = yield this.pcManager.addPublisherTransceiver(track.mediaStreamTrack, transceiverInit);\r\n      return transceiver.sender;\r\n    });\r\n  }\r\n  createSimulcastTransceiverSender(track, simulcastTrack, opts, encodings) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.pcManager) {\r\n        throw new UnexpectedConnectionState('publisher is closed');\r\n      }\r\n      const transceiverInit = {\r\n        direction: 'sendonly'\r\n      };\r\n      if (encodings) {\r\n        transceiverInit.sendEncodings = encodings;\r\n      }\r\n      // addTransceiver for react-native is async. web is synchronous, but await won't effect it.\r\n      const transceiver = yield this.pcManager.addPublisherTransceiver(simulcastTrack.mediaStreamTrack, transceiverInit);\r\n      if (!opts.videoCodec) {\r\n        return;\r\n      }\r\n      track.setSimulcastTrackSender(opts.videoCodec, transceiver.sender);\r\n      return transceiver.sender;\r\n    });\r\n  }\r\n  createRTCRtpSender(track) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.pcManager) {\r\n        throw new UnexpectedConnectionState('publisher is closed');\r\n      }\r\n      return this.pcManager.addPublisherTrack(track);\r\n    });\r\n  }\r\n  attemptReconnect(reason) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c;\r\n      if (this._isClosed) {\r\n        return;\r\n      }\r\n      // guard for attempting reconnection multiple times while one attempt is still not finished\r\n      if (this.attemptingReconnect) {\r\n        livekitLogger.warn('already attempting reconnect, returning early', this.logContext);\r\n        return;\r\n      }\r\n      if (((_a = this.clientConfiguration) === null || _a === void 0 ? void 0 : _a.resumeConnection) === ClientConfigSetting.DISABLED ||\r\n      // signaling state could change to closed due to hardware sleep\r\n      // those connections cannot be resumed\r\n      ((_c = (_b = this.pcManager) === null || _b === void 0 ? void 0 : _b.currentState) !== null && _c !== void 0 ? _c : PCTransportState.NEW) === PCTransportState.NEW) {\r\n        this.fullReconnectOnNext = true;\r\n      }\r\n      try {\r\n        this.attemptingReconnect = true;\r\n        if (this.fullReconnectOnNext) {\r\n          yield this.restartConnection();\r\n        } else {\r\n          yield this.resumeConnection(reason);\r\n        }\r\n        this.clearPendingReconnect();\r\n        this.fullReconnectOnNext = false;\r\n      } catch (e) {\r\n        this.reconnectAttempts += 1;\r\n        let recoverable = true;\r\n        if (e instanceof UnexpectedConnectionState) {\r\n          this.log.debug('received unrecoverable error', Object.assign(Object.assign({}, this.logContext), {\r\n            error: e\r\n          }));\r\n          // unrecoverable\r\n          recoverable = false;\r\n        } else if (!(e instanceof SignalReconnectError)) {\r\n          // cannot resume\r\n          this.fullReconnectOnNext = true;\r\n        }\r\n        if (recoverable) {\r\n          this.handleDisconnect('reconnect', ReconnectReason.RR_UNKNOWN);\r\n        } else {\r\n          this.log.info(\"could not recover connection after \".concat(this.reconnectAttempts, \" attempts, \").concat(Date.now() - this.reconnectStart, \"ms. giving up\"), this.logContext);\r\n          this.emit(EngineEvent.Disconnected);\r\n          yield this.close();\r\n        }\r\n      } finally {\r\n        this.attemptingReconnect = false;\r\n      }\r\n    });\r\n  }\r\n  getNextRetryDelay(context) {\r\n    try {\r\n      return this.reconnectPolicy.nextRetryDelayInMs(context);\r\n    } catch (e) {\r\n      this.log.warn('encountered error in reconnect policy', Object.assign(Object.assign({}, this.logContext), {\r\n        error: e\r\n      }));\r\n    }\r\n    // error in user code with provided reconnect policy, stop reconnecting\r\n    return null;\r\n  }\r\n  restartConnection(regionUrl) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c;\r\n      try {\r\n        if (!this.url || !this.token) {\r\n          // permanent failure, don't attempt reconnection\r\n          throw new UnexpectedConnectionState('could not reconnect, url or token not saved');\r\n        }\r\n        this.log.info(\"reconnecting, attempt: \".concat(this.reconnectAttempts), this.logContext);\r\n        this.emit(EngineEvent.Restarting);\r\n        if (!this.client.isDisconnected) {\r\n          yield this.client.sendLeave();\r\n        }\r\n        yield this.cleanupPeerConnections();\r\n        yield this.cleanupClient();\r\n        let joinResponse;\r\n        try {\r\n          if (!this.signalOpts) {\r\n            this.log.warn('attempted connection restart, without signal options present', this.logContext);\r\n            throw new SignalReconnectError();\r\n          }\r\n          // in case a regionUrl is passed, the region URL takes precedence\r\n          joinResponse = yield this.join(regionUrl !== null && regionUrl !== void 0 ? regionUrl : this.url, this.token, this.signalOpts);\r\n        } catch (e) {\r\n          if (e instanceof ConnectionError && e.reason === ConnectionErrorReason.NotAllowed) {\r\n            throw new UnexpectedConnectionState('could not reconnect, token might be expired');\r\n          }\r\n          throw new SignalReconnectError();\r\n        }\r\n        if (this.shouldFailNext) {\r\n          this.shouldFailNext = false;\r\n          throw new Error('simulated failure');\r\n        }\r\n        this.client.setReconnected();\r\n        this.emit(EngineEvent.SignalRestarted, joinResponse);\r\n        yield this.waitForPCReconnected();\r\n        // re-check signal connection state before setting engine as resumed\r\n        if (this.client.currentState !== SignalConnectionState.CONNECTED) {\r\n          throw new SignalReconnectError('Signal connection got severed during reconnect');\r\n        }\r\n        (_a = this.regionUrlProvider) === null || _a === void 0 ? void 0 : _a.resetAttempts();\r\n        // reconnect success\r\n        this.emit(EngineEvent.Restarted);\r\n      } catch (error) {\r\n        const nextRegionUrl = yield (_b = this.regionUrlProvider) === null || _b === void 0 ? void 0 : _b.getNextBestRegionUrl();\r\n        if (nextRegionUrl) {\r\n          yield this.restartConnection(nextRegionUrl);\r\n          return;\r\n        } else {\r\n          // no more regions to try (or we're not on cloud)\r\n          (_c = this.regionUrlProvider) === null || _c === void 0 ? void 0 : _c.resetAttempts();\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n  }\r\n  resumeConnection(reason) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (!this.url || !this.token) {\r\n        // permanent failure, don't attempt reconnection\r\n        throw new UnexpectedConnectionState('could not reconnect, url or token not saved');\r\n      }\r\n      // trigger publisher reconnect\r\n      if (!this.pcManager) {\r\n        throw new UnexpectedConnectionState('publisher and subscriber connections unset');\r\n      }\r\n      this.log.info(\"resuming signal connection, attempt \".concat(this.reconnectAttempts), this.logContext);\r\n      this.emit(EngineEvent.Resuming);\r\n      let res;\r\n      try {\r\n        this.setupSignalClientCallbacks();\r\n        res = yield this.client.reconnect(this.url, this.token, this.participantSid, reason);\r\n      } catch (error) {\r\n        let message = '';\r\n        if (error instanceof Error) {\r\n          message = error.message;\r\n          this.log.error(error.message, Object.assign(Object.assign({}, this.logContext), {\r\n            error\r\n          }));\r\n        }\r\n        if (error instanceof ConnectionError && error.reason === ConnectionErrorReason.NotAllowed) {\r\n          throw new UnexpectedConnectionState('could not reconnect, token might be expired');\r\n        }\r\n        if (error instanceof ConnectionError && error.reason === ConnectionErrorReason.LeaveRequest) {\r\n          throw error;\r\n        }\r\n        throw new SignalReconnectError(message);\r\n      }\r\n      this.emit(EngineEvent.SignalResumed);\r\n      if (res) {\r\n        const rtcConfig = this.makeRTCConfiguration(res);\r\n        this.pcManager.updateConfiguration(rtcConfig);\r\n        if (this.latestJoinResponse) {\r\n          this.latestJoinResponse.serverInfo = res.serverInfo;\r\n        }\r\n      } else {\r\n        this.log.warn('Did not receive reconnect response', this.logContext);\r\n      }\r\n      if (this.shouldFailNext) {\r\n        this.shouldFailNext = false;\r\n        throw new Error('simulated failure');\r\n      }\r\n      yield this.pcManager.triggerIceRestart();\r\n      yield this.waitForPCReconnected();\r\n      // re-check signal connection state before setting engine as resumed\r\n      if (this.client.currentState !== SignalConnectionState.CONNECTED) {\r\n        throw new SignalReconnectError('Signal connection got severed during reconnect');\r\n      }\r\n      this.client.setReconnected();\r\n      // recreate publish datachannel if it's id is null\r\n      // (for safari https://bugs.webkit.org/show_bug.cgi?id=184688)\r\n      if (((_a = this.reliableDC) === null || _a === void 0 ? void 0 : _a.readyState) === 'open' && this.reliableDC.id === null) {\r\n        this.createDataChannels();\r\n      }\r\n      if (res === null || res === void 0 ? void 0 : res.lastMessageSeq) {\r\n        this.resendReliableMessagesForResume(res.lastMessageSeq);\r\n      }\r\n      // resume success\r\n      this.emit(EngineEvent.Resumed);\r\n    });\r\n  }\r\n  waitForPCInitialConnection(timeout, abortController) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.pcManager) {\r\n        throw new UnexpectedConnectionState('PC manager is closed');\r\n      }\r\n      yield this.pcManager.ensurePCTransportConnection(abortController, timeout);\r\n    });\r\n  }\r\n  waitForPCReconnected() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.pcState = PCState.Reconnecting;\r\n      this.log.debug('waiting for peer connection to reconnect', this.logContext);\r\n      try {\r\n        yield sleep(minReconnectWait); // FIXME setTimeout again not ideal for a connection critical path\r\n        if (!this.pcManager) {\r\n          throw new UnexpectedConnectionState('PC manager is closed');\r\n        }\r\n        yield this.pcManager.ensurePCTransportConnection(undefined, this.peerConnectionTimeout);\r\n        this.pcState = PCState.Connected;\r\n      } catch (e) {\r\n        // TODO do we need a `failed` state here for the PC?\r\n        this.pcState = PCState.Disconnected;\r\n        throw new ConnectionError(\"could not establish PC connection, \".concat(e.message), ConnectionErrorReason.InternalError);\r\n      }\r\n    });\r\n  }\r\n  /** @internal */\r\n  publishRpcResponse(destinationIdentity, requestId, payload, error) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const packet = new DataPacket({\r\n        destinationIdentities: [destinationIdentity],\r\n        kind: DataPacket_Kind.RELIABLE,\r\n        value: {\r\n          case: 'rpcResponse',\r\n          value: new RpcResponse({\r\n            requestId,\r\n            value: error ? {\r\n              case: 'error',\r\n              value: error.toProto()\r\n            } : {\r\n              case: 'payload',\r\n              value: payload !== null && payload !== void 0 ? payload : ''\r\n            }\r\n          })\r\n        }\r\n      });\r\n      yield this.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n    });\r\n  }\r\n  /** @internal */\r\n  publishRpcAck(destinationIdentity, requestId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const packet = new DataPacket({\r\n        destinationIdentities: [destinationIdentity],\r\n        kind: DataPacket_Kind.RELIABLE,\r\n        value: {\r\n          case: 'rpcAck',\r\n          value: new RpcAck({\r\n            requestId\r\n          })\r\n        }\r\n      });\r\n      yield this.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n    });\r\n  }\r\n  /* @internal */\r\n  sendDataPacket(packet, kind) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      // make sure we do have a data connection\r\n      yield this.ensurePublisherConnected(kind);\r\n      if (kind === DataPacket_Kind.RELIABLE) {\r\n        packet.sequence = this.reliableDataSequence;\r\n        this.reliableDataSequence += 1;\r\n      }\r\n      const msg = packet.toBinary();\r\n      const dc = this.dataChannelForKind(kind);\r\n      if (dc) {\r\n        if (kind === DataPacket_Kind.RELIABLE) {\r\n          this.reliableMessageBuffer.push({\r\n            data: msg,\r\n            sequence: packet.sequence\r\n          });\r\n        }\r\n        if (this.attemptingReconnect) {\r\n          return;\r\n        }\r\n        dc.send(msg);\r\n      }\r\n      this.updateAndEmitDCBufferStatus(kind);\r\n    });\r\n  }\r\n  resendReliableMessagesForResume(lastMessageSeq) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield this.ensurePublisherConnected(DataPacket_Kind.RELIABLE);\r\n      const dc = this.dataChannelForKind(DataPacket_Kind.RELIABLE);\r\n      if (dc) {\r\n        this.reliableMessageBuffer.popToSequence(lastMessageSeq);\r\n        this.reliableMessageBuffer.getAll().forEach(msg => {\r\n          dc.send(msg.data);\r\n        });\r\n      }\r\n      this.updateAndEmitDCBufferStatus(DataPacket_Kind.RELIABLE);\r\n    });\r\n  }\r\n  waitForBufferStatusLow(kind) {\r\n    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n      if (this.isBufferStatusLow(kind)) {\r\n        resolve();\r\n      } else {\r\n        const onClosing = () => reject('Engine closed');\r\n        this.once(EngineEvent.Closing, onClosing);\r\n        while (!this.dcBufferStatus.get(kind)) {\r\n          yield sleep(10);\r\n        }\r\n        this.off(EngineEvent.Closing, onClosing);\r\n        resolve();\r\n      }\r\n    }));\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  ensureDataTransportConnected(kind_1) {\r\n    return __awaiter(this, arguments, void 0, function (kind) {\r\n      var _this2 = this;\r\n      let subscriber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.subscriberPrimary;\r\n      return function* () {\r\n        var _a;\r\n        if (!_this2.pcManager) {\r\n          throw new UnexpectedConnectionState('PC manager is closed');\r\n        }\r\n        const transport = subscriber ? _this2.pcManager.subscriber : _this2.pcManager.publisher;\r\n        const transportName = subscriber ? 'Subscriber' : 'Publisher';\r\n        if (!transport) {\r\n          throw new ConnectionError(\"\".concat(transportName, \" connection not set\"), ConnectionErrorReason.InternalError);\r\n        }\r\n        let needNegotiation = false;\r\n        if (!subscriber && !_this2.dataChannelForKind(kind, subscriber)) {\r\n          _this2.createDataChannels();\r\n          needNegotiation = true;\r\n        }\r\n        if (!needNegotiation && !subscriber && !_this2.pcManager.publisher.isICEConnected && _this2.pcManager.publisher.getICEConnectionState() !== 'checking') {\r\n          needNegotiation = true;\r\n        }\r\n        if (needNegotiation) {\r\n          // start negotiation\r\n          _this2.negotiate();\r\n        }\r\n        const targetChannel = _this2.dataChannelForKind(kind, subscriber);\r\n        if ((targetChannel === null || targetChannel === void 0 ? void 0 : targetChannel.readyState) === 'open') {\r\n          return;\r\n        }\r\n        // wait until ICE connected\r\n        const endTime = new Date().getTime() + _this2.peerConnectionTimeout;\r\n        while (new Date().getTime() < endTime) {\r\n          if (transport.isICEConnected && ((_a = _this2.dataChannelForKind(kind, subscriber)) === null || _a === void 0 ? void 0 : _a.readyState) === 'open') {\r\n            return;\r\n          }\r\n          yield sleep(50);\r\n        }\r\n        throw new ConnectionError(\"could not establish \".concat(transportName, \" connection, state: \").concat(transport.getICEConnectionState()), ConnectionErrorReason.InternalError);\r\n      }();\r\n    });\r\n  }\r\n  ensurePublisherConnected(kind) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.publisherConnectionPromise) {\r\n        this.publisherConnectionPromise = this.ensureDataTransportConnected(kind, false);\r\n      }\r\n      yield this.publisherConnectionPromise;\r\n    });\r\n  }\r\n  /* @internal */\r\n  verifyTransport() {\r\n    if (!this.pcManager) {\r\n      return false;\r\n    }\r\n    // primary connection\r\n    if (this.pcManager.currentState !== PCTransportState.CONNECTED) {\r\n      return false;\r\n    }\r\n    // ensure signal is connected\r\n    if (!this.client.ws || this.client.ws.readyState === WebSocket.CLOSED) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  /** @internal */\r\n  negotiate() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      // observe signal state\r\n      return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n        if (!this.pcManager) {\r\n          reject(new NegotiationError('PC manager is closed'));\r\n          return;\r\n        }\r\n        this.pcManager.requirePublisher();\r\n        // don't negotiate without any transceivers or data channel, it will generate sdp without ice frag then negotiate failed\r\n        if (this.pcManager.publisher.getTransceivers().length == 0 && !this.lossyDC && !this.reliableDC) {\r\n          this.createDataChannels();\r\n        }\r\n        const abortController = new AbortController();\r\n        const handleClosed = () => {\r\n          abortController.abort();\r\n          this.log.debug('engine disconnected while negotiation was ongoing', this.logContext);\r\n          resolve();\r\n          return;\r\n        };\r\n        if (this.isClosed) {\r\n          reject('cannot negotiate on closed engine');\r\n        }\r\n        this.on(EngineEvent.Closing, handleClosed);\r\n        this.pcManager.publisher.once(PCEvents.RTPVideoPayloadTypes, rtpTypes => {\r\n          const rtpMap = new Map();\r\n          rtpTypes.forEach(rtp => {\r\n            const codec = rtp.codec.toLowerCase();\r\n            if (isVideoCodec(codec)) {\r\n              rtpMap.set(rtp.payload, codec);\r\n            }\r\n          });\r\n          this.emit(EngineEvent.RTPVideoMapUpdate, rtpMap);\r\n        });\r\n        try {\r\n          yield this.pcManager.negotiate(abortController);\r\n          resolve();\r\n        } catch (e) {\r\n          if (e instanceof NegotiationError) {\r\n            this.fullReconnectOnNext = true;\r\n          }\r\n          this.handleDisconnect('negotiation', ReconnectReason.RR_UNKNOWN);\r\n          reject(e);\r\n        } finally {\r\n          this.off(EngineEvent.Closing, handleClosed);\r\n        }\r\n      }));\r\n    });\r\n  }\r\n  dataChannelForKind(kind, sub) {\r\n    if (!sub) {\r\n      if (kind === DataPacket_Kind.LOSSY) {\r\n        return this.lossyDC;\r\n      }\r\n      if (kind === DataPacket_Kind.RELIABLE) {\r\n        return this.reliableDC;\r\n      }\r\n    } else {\r\n      if (kind === DataPacket_Kind.LOSSY) {\r\n        return this.lossyDCSub;\r\n      }\r\n      if (kind === DataPacket_Kind.RELIABLE) {\r\n        return this.reliableDCSub;\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  sendSyncState(remoteTracks, localTracks) {\r\n    var _a, _b;\r\n    if (!this.pcManager) {\r\n      this.log.warn('sync state cannot be sent without peer connection setup', this.logContext);\r\n      return;\r\n    }\r\n    const previousAnswer = this.pcManager.subscriber.getLocalDescription();\r\n    const previousOffer = this.pcManager.subscriber.getRemoteDescription();\r\n    /* 1. autosubscribe on, so subscribed tracks = all tracks - unsub tracks,\r\n          in this case, we send unsub tracks, so server add all tracks to this\r\n          subscribe pc and unsub special tracks from it.\r\n       2. autosubscribe off, we send subscribed tracks.\r\n    */\r\n    const autoSubscribe = (_b = (_a = this.signalOpts) === null || _a === void 0 ? void 0 : _a.autoSubscribe) !== null && _b !== void 0 ? _b : true;\r\n    const trackSids = new Array();\r\n    const trackSidsDisabled = new Array();\r\n    remoteTracks.forEach(track => {\r\n      if (track.isDesired !== autoSubscribe) {\r\n        trackSids.push(track.trackSid);\r\n      }\r\n      if (!track.isEnabled) {\r\n        trackSidsDisabled.push(track.trackSid);\r\n      }\r\n    });\r\n    this.client.sendSyncState(new SyncState({\r\n      answer: previousAnswer ? toProtoSessionDescription({\r\n        sdp: previousAnswer.sdp,\r\n        type: previousAnswer.type\r\n      }) : undefined,\r\n      offer: previousOffer ? toProtoSessionDescription({\r\n        sdp: previousOffer.sdp,\r\n        type: previousOffer.type\r\n      }) : undefined,\r\n      subscription: new UpdateSubscription({\r\n        trackSids,\r\n        subscribe: !autoSubscribe,\r\n        participantTracks: []\r\n      }),\r\n      publishTracks: getTrackPublicationInfo(localTracks),\r\n      dataChannels: this.dataChannelsInfo(),\r\n      trackSidsDisabled,\r\n      datachannelReceiveStates: this.reliableReceivedState.map((seq, sid) => {\r\n        return new DataChannelReceiveState({\r\n          publisherSid: sid,\r\n          lastSeq: seq\r\n        });\r\n      })\r\n    }));\r\n  }\r\n  /* @internal */\r\n  failNext() {\r\n    // debugging method to fail the next reconnect/resume attempt\r\n    this.shouldFailNext = true;\r\n  }\r\n  dataChannelsInfo() {\r\n    const infos = [];\r\n    const getInfo = (dc, target) => {\r\n      if ((dc === null || dc === void 0 ? void 0 : dc.id) !== undefined && dc.id !== null) {\r\n        infos.push(new DataChannelInfo({\r\n          label: dc.label,\r\n          id: dc.id,\r\n          target\r\n        }));\r\n      }\r\n    };\r\n    getInfo(this.dataChannelForKind(DataPacket_Kind.LOSSY), SignalTarget.PUBLISHER);\r\n    getInfo(this.dataChannelForKind(DataPacket_Kind.RELIABLE), SignalTarget.PUBLISHER);\r\n    getInfo(this.dataChannelForKind(DataPacket_Kind.LOSSY, true), SignalTarget.SUBSCRIBER);\r\n    getInfo(this.dataChannelForKind(DataPacket_Kind.RELIABLE, true), SignalTarget.SUBSCRIBER);\r\n    return infos;\r\n  }\r\n  clearReconnectTimeout() {\r\n    if (this.reconnectTimeout) {\r\n      CriticalTimers.clearTimeout(this.reconnectTimeout);\r\n    }\r\n  }\r\n  clearPendingReconnect() {\r\n    this.clearReconnectTimeout();\r\n    this.reconnectAttempts = 0;\r\n  }\r\n  registerOnLineListener() {\r\n    if (isWeb()) {\r\n      window.addEventListener('online', this.handleBrowserOnLine);\r\n    }\r\n  }\r\n  deregisterOnLineListener() {\r\n    if (isWeb()) {\r\n      window.removeEventListener('online', this.handleBrowserOnLine);\r\n    }\r\n  }\r\n}\r\nclass SignalReconnectError extends Error {}\r\nfunction supportOptionalDatachannel(protocol) {\r\n  return protocol !== undefined && protocol > 13;\r\n}\r\nfunction applyUserDataCompat(newObj, oldObj) {\r\n  const participantIdentity = newObj.participantIdentity ? newObj.participantIdentity : oldObj.participantIdentity;\r\n  newObj.participantIdentity = participantIdentity;\r\n  oldObj.participantIdentity = participantIdentity;\r\n  const destinationIdentities = newObj.destinationIdentities.length !== 0 ? newObj.destinationIdentities : oldObj.destinationIdentities;\r\n  newObj.destinationIdentities = destinationIdentities;\r\n  oldObj.destinationIdentities = destinationIdentities;\r\n}\r\n\r\nclass RegionUrlProvider {\r\n  constructor(url, token) {\r\n    this.lastUpdateAt = 0;\r\n    this.settingsCacheTime = 3000;\r\n    this.attemptedRegions = [];\r\n    this.serverUrl = new URL(url);\r\n    this.token = token;\r\n  }\r\n  updateToken(token) {\r\n    this.token = token;\r\n  }\r\n  isCloud() {\r\n    return isCloud(this.serverUrl);\r\n  }\r\n  getServerUrl() {\r\n    return this.serverUrl;\r\n  }\r\n  getNextBestRegionUrl(abortSignal) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.isCloud()) {\r\n        throw Error('region availability is only supported for LiveKit Cloud domains');\r\n      }\r\n      if (!this.regionSettings || Date.now() - this.lastUpdateAt > this.settingsCacheTime) {\r\n        this.regionSettings = yield this.fetchRegionSettings(abortSignal);\r\n      }\r\n      const regionsLeft = this.regionSettings.regions.filter(region => !this.attemptedRegions.find(attempted => attempted.url === region.url));\r\n      if (regionsLeft.length > 0) {\r\n        const nextRegion = regionsLeft[0];\r\n        this.attemptedRegions.push(nextRegion);\r\n        livekitLogger.debug(\"next region: \".concat(nextRegion.region));\r\n        return nextRegion.url;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n  resetAttempts() {\r\n    this.attemptedRegions = [];\r\n  }\r\n  /* @internal */\r\n  fetchRegionSettings(signal) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const regionSettingsResponse = yield fetch(\"\".concat(getCloudConfigUrl(this.serverUrl), \"/regions\"), {\r\n        headers: {\r\n          authorization: \"Bearer \".concat(this.token)\r\n        },\r\n        signal\r\n      });\r\n      if (regionSettingsResponse.ok) {\r\n        const regionSettings = yield regionSettingsResponse.json();\r\n        this.lastUpdateAt = Date.now();\r\n        return regionSettings;\r\n      } else {\r\n        throw new ConnectionError(\"Could not fetch region settings: \".concat(regionSettingsResponse.statusText), regionSettingsResponse.status === 401 ? ConnectionErrorReason.NotAllowed : ConnectionErrorReason.InternalError, regionSettingsResponse.status);\r\n      }\r\n    });\r\n  }\r\n  setServerReportedRegions(regions) {\r\n    this.regionSettings = regions;\r\n    this.lastUpdateAt = Date.now();\r\n  }\r\n}\r\nfunction getCloudConfigUrl(serverUrl) {\r\n  return \"\".concat(serverUrl.protocol.replace('ws', 'http'), \"//\").concat(serverUrl.host, \"/settings\");\r\n}\r\n\r\nclass BaseStreamReader {\r\n  get info() {\r\n    return this._info;\r\n  }\r\n  constructor(info, stream, totalByteSize) {\r\n    this.reader = stream;\r\n    this.totalByteSize = totalByteSize;\r\n    this._info = info;\r\n    this.bytesReceived = 0;\r\n  }\r\n}\r\nclass ByteStreamReader extends BaseStreamReader {\r\n  handleChunkReceived(chunk) {\r\n    var _a;\r\n    this.bytesReceived += chunk.content.byteLength;\r\n    const currentProgress = this.totalByteSize ? this.bytesReceived / this.totalByteSize : undefined;\r\n    (_a = this.onProgress) === null || _a === void 0 ? void 0 : _a.call(this, currentProgress);\r\n  }\r\n  [Symbol.asyncIterator]() {\r\n    const reader = this.reader.getReader();\r\n    return {\r\n      next: () => __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n          const {\r\n            done,\r\n            value\r\n          } = yield reader.read();\r\n          if (done) {\r\n            return {\r\n              done: true,\r\n              value: undefined\r\n            };\r\n          } else {\r\n            this.handleChunkReceived(value);\r\n            return {\r\n              done: false,\r\n              value: value.content\r\n            };\r\n          }\r\n        } catch (error) {\r\n          // TODO handle errors\r\n          return {\r\n            done: true,\r\n            value: undefined\r\n          };\r\n        }\r\n      }),\r\n      return() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n          reader.releaseLock();\r\n          return {\r\n            done: true,\r\n            value: undefined\r\n          };\r\n        });\r\n      }\r\n    };\r\n  }\r\n  readAll() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, e_1, _b, _c;\r\n      let chunks = new Set();\r\n      try {\r\n        for (var _d = true, _e = __asyncValues(this), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {\r\n          _c = _f.value;\r\n          _d = false;\r\n          const chunk = _c;\r\n          chunks.add(chunk);\r\n        }\r\n      } catch (e_1_1) {\r\n        e_1 = {\r\n          error: e_1_1\r\n        };\r\n      } finally {\r\n        try {\r\n          if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);\r\n        } finally {\r\n          if (e_1) throw e_1.error;\r\n        }\r\n      }\r\n      return Array.from(chunks);\r\n    });\r\n  }\r\n}\r\n/**\r\n * A class to read chunks from a ReadableStream and provide them in a structured format.\r\n */\r\nclass TextStreamReader extends BaseStreamReader {\r\n  /**\r\n   * A TextStreamReader instance can be used as an AsyncIterator that returns the entire string\r\n   * that has been received up to the current point in time.\r\n   */\r\n  constructor(info, stream, totalChunkCount) {\r\n    super(info, stream, totalChunkCount);\r\n    this.receivedChunks = new Map();\r\n  }\r\n  handleChunkReceived(chunk) {\r\n    var _a;\r\n    const index = bigIntToNumber(chunk.chunkIndex);\r\n    const previousChunkAtIndex = this.receivedChunks.get(index);\r\n    if (previousChunkAtIndex && previousChunkAtIndex.version > chunk.version) {\r\n      // we have a newer version already, dropping the old one\r\n      return;\r\n    }\r\n    this.receivedChunks.set(index, chunk);\r\n    this.bytesReceived += chunk.content.byteLength;\r\n    const currentProgress = this.totalByteSize ? this.bytesReceived / this.totalByteSize : undefined;\r\n    (_a = this.onProgress) === null || _a === void 0 ? void 0 : _a.call(this, currentProgress);\r\n  }\r\n  /**\r\n   * Async iterator implementation to allow usage of `for await...of` syntax.\r\n   * Yields structured chunks from the stream.\r\n   *\r\n   */\r\n  [Symbol.asyncIterator]() {\r\n    const reader = this.reader.getReader();\r\n    const decoder = new TextDecoder();\r\n    return {\r\n      next: () => __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n          const {\r\n            done,\r\n            value\r\n          } = yield reader.read();\r\n          if (done) {\r\n            return {\r\n              done: true,\r\n              value: undefined\r\n            };\r\n          } else {\r\n            this.handleChunkReceived(value);\r\n            return {\r\n              done: false,\r\n              value: decoder.decode(value.content)\r\n            };\r\n          }\r\n        } catch (error) {\r\n          // TODO handle errors\r\n          return {\r\n            done: true,\r\n            value: undefined\r\n          };\r\n        }\r\n      }),\r\n      return() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n          reader.releaseLock();\r\n          return {\r\n            done: true,\r\n            value: undefined\r\n          };\r\n        });\r\n      }\r\n    };\r\n  }\r\n  readAll() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, e_2, _b, _c;\r\n      let finalString = '';\r\n      try {\r\n        for (var _d = true, _e = __asyncValues(this), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {\r\n          _c = _f.value;\r\n          _d = false;\r\n          const chunk = _c;\r\n          finalString += chunk;\r\n        }\r\n      } catch (e_2_1) {\r\n        e_2 = {\r\n          error: e_2_1\r\n        };\r\n      } finally {\r\n        try {\r\n          if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);\r\n        } finally {\r\n          if (e_2) throw e_2.error;\r\n        }\r\n      }\r\n      return finalString;\r\n    });\r\n  }\r\n}\r\n\r\nclass BaseStreamWriter {\r\n  constructor(writableStream, info, onClose) {\r\n    this.writableStream = writableStream;\r\n    this.defaultWriter = writableStream.getWriter();\r\n    this.onClose = onClose;\r\n    this.info = info;\r\n  }\r\n  write(chunk) {\r\n    return this.defaultWriter.write(chunk);\r\n  }\r\n  close() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      yield this.defaultWriter.close();\r\n      this.defaultWriter.releaseLock();\r\n      (_a = this.onClose) === null || _a === void 0 ? void 0 : _a.call(this);\r\n    });\r\n  }\r\n}\r\nclass TextStreamWriter extends BaseStreamWriter {}\r\nclass ByteStreamWriter extends BaseStreamWriter {}\r\n\r\nclass RemoteTrack extends Track {\r\n  constructor(mediaTrack, sid, kind, receiver, loggerOptions) {\r\n    super(mediaTrack, kind, loggerOptions);\r\n    this.sid = sid;\r\n    this.receiver = receiver;\r\n  }\r\n  get isLocal() {\r\n    return false;\r\n  }\r\n  /** @internal */\r\n  setMuted(muted) {\r\n    if (this.isMuted !== muted) {\r\n      this.isMuted = muted;\r\n      this._mediaStreamTrack.enabled = !muted;\r\n      this.emit(muted ? TrackEvent.Muted : TrackEvent.Unmuted, this);\r\n    }\r\n  }\r\n  /** @internal */\r\n  setMediaStream(stream) {\r\n    // this is needed to determine when the track is finished\r\n    this.mediaStream = stream;\r\n    const onRemoveTrack = event => {\r\n      if (event.track === this._mediaStreamTrack) {\r\n        stream.removeEventListener('removetrack', onRemoveTrack);\r\n        if (this.receiver && 'playoutDelayHint' in this.receiver) {\r\n          this.receiver.playoutDelayHint = undefined;\r\n        }\r\n        this.receiver = undefined;\r\n        this._currentBitrate = 0;\r\n        this.emit(TrackEvent.Ended, this);\r\n      }\r\n    };\r\n    stream.addEventListener('removetrack', onRemoveTrack);\r\n  }\r\n  start() {\r\n    this.startMonitor();\r\n    // use `enabled` of track to enable re-use of transceiver\r\n    super.enable();\r\n  }\r\n  stop() {\r\n    this.stopMonitor();\r\n    // use `enabled` of track to enable re-use of transceiver\r\n    super.disable();\r\n  }\r\n  /**\r\n   * Gets the RTCStatsReport for the RemoteTrack's underlying RTCRtpReceiver\r\n   * See https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport\r\n   *\r\n   * @returns Promise<RTCStatsReport> | undefined\r\n   */\r\n  getRTCStatsReport() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (!((_a = this.receiver) === null || _a === void 0 ? void 0 : _a.getStats)) {\r\n        return;\r\n      }\r\n      const statsReport = yield this.receiver.getStats();\r\n      return statsReport;\r\n    });\r\n  }\r\n  /**\r\n   * Allows to set a playout delay (in seconds) for this track.\r\n   * A higher value allows for more buffering of the track in the browser\r\n   * and will result in a delay of media being played back of `delayInSeconds`\r\n   */\r\n  setPlayoutDelay(delayInSeconds) {\r\n    if (this.receiver) {\r\n      if ('playoutDelayHint' in this.receiver) {\r\n        this.receiver.playoutDelayHint = delayInSeconds;\r\n      } else {\r\n        this.log.warn('Playout delay not supported in this browser');\r\n      }\r\n    } else {\r\n      this.log.warn('Cannot set playout delay, track already ended');\r\n    }\r\n  }\r\n  /**\r\n   * Returns the current playout delay (in seconds) of this track.\r\n   */\r\n  getPlayoutDelay() {\r\n    if (this.receiver) {\r\n      if ('playoutDelayHint' in this.receiver) {\r\n        return this.receiver.playoutDelayHint;\r\n      } else {\r\n        this.log.warn('Playout delay not supported in this browser');\r\n      }\r\n    } else {\r\n      this.log.warn('Cannot get playout delay, track already ended');\r\n    }\r\n    return 0;\r\n  }\r\n  /* @internal */\r\n  startMonitor() {\r\n    if (!this.monitorInterval) {\r\n      this.monitorInterval = setInterval(() => this.monitorReceiver(), monitorFrequency);\r\n    }\r\n    if (supportsSynchronizationSources()) {\r\n      this.registerTimeSyncUpdate();\r\n    }\r\n  }\r\n  registerTimeSyncUpdate() {\r\n    const loop = () => {\r\n      var _a;\r\n      this.timeSyncHandle = requestAnimationFrame(() => loop());\r\n      const sources = (_a = this.receiver) === null || _a === void 0 ? void 0 : _a.getSynchronizationSources()[0];\r\n      if (sources) {\r\n        const {\r\n          timestamp,\r\n          rtpTimestamp\r\n        } = sources;\r\n        if (rtpTimestamp && this.rtpTimestamp !== rtpTimestamp) {\r\n          this.emit(TrackEvent.TimeSyncUpdate, {\r\n            timestamp,\r\n            rtpTimestamp\r\n          });\r\n          this.rtpTimestamp = rtpTimestamp;\r\n        }\r\n      }\r\n    };\r\n    loop();\r\n  }\r\n}\r\n\r\nclass RemoteAudioTrack extends RemoteTrack {\r\n  constructor(mediaTrack, sid, receiver, audioContext, audioOutput, loggerOptions) {\r\n    super(mediaTrack, sid, Track.Kind.Audio, receiver, loggerOptions);\r\n    this.monitorReceiver = () => __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.receiver) {\r\n        this._currentBitrate = 0;\r\n        return;\r\n      }\r\n      const stats = yield this.getReceiverStats();\r\n      if (stats && this.prevStats && this.receiver) {\r\n        this._currentBitrate = computeBitrate(stats, this.prevStats);\r\n      }\r\n      this.prevStats = stats;\r\n    });\r\n    this.audioContext = audioContext;\r\n    this.webAudioPluginNodes = [];\r\n    if (audioOutput) {\r\n      this.sinkId = audioOutput.deviceId;\r\n    }\r\n  }\r\n  /**\r\n   * sets the volume for all attached audio elements\r\n   */\r\n  setVolume(volume) {\r\n    var _a;\r\n    for (const el of this.attachedElements) {\r\n      if (this.audioContext) {\r\n        (_a = this.gainNode) === null || _a === void 0 ? void 0 : _a.gain.setTargetAtTime(volume, 0, 0.1);\r\n      } else {\r\n        el.volume = volume;\r\n      }\r\n    }\r\n    if (isReactNative()) {\r\n      // @ts-ignore\r\n      this._mediaStreamTrack._setVolume(volume);\r\n    }\r\n    this.elementVolume = volume;\r\n  }\r\n  /**\r\n   * gets the volume of attached audio elements (loudest)\r\n   */\r\n  getVolume() {\r\n    if (this.elementVolume) {\r\n      return this.elementVolume;\r\n    }\r\n    if (isReactNative()) {\r\n      // RN volume value defaults to 1.0 if hasn't been changed.\r\n      return 1.0;\r\n    }\r\n    let highestVolume = 0;\r\n    this.attachedElements.forEach(element => {\r\n      if (element.volume > highestVolume) {\r\n        highestVolume = element.volume;\r\n      }\r\n    });\r\n    return highestVolume;\r\n  }\r\n  /**\r\n   * calls setSinkId on all attached elements, if supported\r\n   * @param deviceId audio output device\r\n   */\r\n  setSinkId(deviceId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.sinkId = deviceId;\r\n      yield Promise.all(this.attachedElements.map(elm => {\r\n        if (!supportsSetSinkId(elm)) {\r\n          return;\r\n        }\r\n        /* @ts-ignore */\r\n        return elm.setSinkId(deviceId);\r\n      }));\r\n    });\r\n  }\r\n  attach(element) {\r\n    const needsNewWebAudioConnection = this.attachedElements.length === 0;\r\n    if (!element) {\r\n      element = super.attach();\r\n    } else {\r\n      super.attach(element);\r\n    }\r\n    if (this.sinkId && supportsSetSinkId(element)) {\r\n      element.setSinkId(this.sinkId).catch(e => {\r\n        this.log.error('Failed to set sink id on remote audio track', e, this.logContext);\r\n      });\r\n    }\r\n    if (this.audioContext && needsNewWebAudioConnection) {\r\n      this.log.debug('using audio context mapping', this.logContext);\r\n      this.connectWebAudio(this.audioContext, element);\r\n      element.volume = 0;\r\n      element.muted = true;\r\n    }\r\n    if (this.elementVolume) {\r\n      // make sure volume setting is being applied to the newly attached element\r\n      this.setVolume(this.elementVolume);\r\n    }\r\n    return element;\r\n  }\r\n  detach(element) {\r\n    let detached;\r\n    if (!element) {\r\n      detached = super.detach();\r\n      this.disconnectWebAudio();\r\n    } else {\r\n      detached = super.detach(element);\r\n      // if there are still any attached elements after detaching, connect webaudio to the first element that's left\r\n      // disconnect webaudio otherwise\r\n      if (this.audioContext) {\r\n        if (this.attachedElements.length > 0) {\r\n          this.connectWebAudio(this.audioContext, this.attachedElements[0]);\r\n        } else {\r\n          this.disconnectWebAudio();\r\n        }\r\n      }\r\n    }\r\n    return detached;\r\n  }\r\n  /**\r\n   * @internal\r\n   * @experimental\r\n   */\r\n  setAudioContext(audioContext) {\r\n    this.audioContext = audioContext;\r\n    if (audioContext && this.attachedElements.length > 0) {\r\n      this.connectWebAudio(audioContext, this.attachedElements[0]);\r\n    } else if (!audioContext) {\r\n      this.disconnectWebAudio();\r\n    }\r\n  }\r\n  /**\r\n   * @internal\r\n   * @experimental\r\n   * @param {AudioNode[]} nodes - An array of WebAudio nodes. These nodes should not be connected to each other when passed, as the sdk will take care of connecting them in the order of the array.\r\n   */\r\n  setWebAudioPlugins(nodes) {\r\n    this.webAudioPluginNodes = nodes;\r\n    if (this.attachedElements.length > 0 && this.audioContext) {\r\n      this.connectWebAudio(this.audioContext, this.attachedElements[0]);\r\n    }\r\n  }\r\n  connectWebAudio(context, element) {\r\n    this.disconnectWebAudio();\r\n    // @ts-ignore attached elements always have a srcObject set\r\n    this.sourceNode = context.createMediaStreamSource(element.srcObject);\r\n    let lastNode = this.sourceNode;\r\n    this.webAudioPluginNodes.forEach(node => {\r\n      lastNode.connect(node);\r\n      lastNode = node;\r\n    });\r\n    this.gainNode = context.createGain();\r\n    lastNode.connect(this.gainNode);\r\n    this.gainNode.connect(context.destination);\r\n    if (this.elementVolume) {\r\n      this.gainNode.gain.setTargetAtTime(this.elementVolume, 0, 0.1);\r\n    }\r\n    // try to resume the context if it isn't running already\r\n    if (context.state !== 'running') {\r\n      context.resume().then(() => {\r\n        if (context.state !== 'running') {\r\n          this.emit(TrackEvent.AudioPlaybackFailed, new Error(\"Audio Context couldn't be started automatically\"));\r\n        }\r\n      }).catch(e => {\r\n        this.emit(TrackEvent.AudioPlaybackFailed, e);\r\n      });\r\n    }\r\n  }\r\n  disconnectWebAudio() {\r\n    var _a, _b;\r\n    (_a = this.gainNode) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n    (_b = this.sourceNode) === null || _b === void 0 ? void 0 : _b.disconnect();\r\n    this.gainNode = undefined;\r\n    this.sourceNode = undefined;\r\n  }\r\n  getReceiverStats() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.receiver || !this.receiver.getStats) {\r\n        return;\r\n      }\r\n      const stats = yield this.receiver.getStats();\r\n      let receiverStats;\r\n      stats.forEach(v => {\r\n        if (v.type === 'inbound-rtp') {\r\n          receiverStats = {\r\n            type: 'audio',\r\n            streamId: v.id,\r\n            timestamp: v.timestamp,\r\n            jitter: v.jitter,\r\n            bytesReceived: v.bytesReceived,\r\n            concealedSamples: v.concealedSamples,\r\n            concealmentEvents: v.concealmentEvents,\r\n            silentConcealedSamples: v.silentConcealedSamples,\r\n            silentConcealmentEvents: v.silentConcealmentEvents,\r\n            totalAudioEnergy: v.totalAudioEnergy,\r\n            totalSamplesDuration: v.totalSamplesDuration\r\n          };\r\n        }\r\n      });\r\n      return receiverStats;\r\n    });\r\n  }\r\n}\r\n\r\nconst REACTION_DELAY = 100;\r\nclass RemoteVideoTrack extends RemoteTrack {\r\n  constructor(mediaTrack, sid, receiver, adaptiveStreamSettings, loggerOptions) {\r\n    super(mediaTrack, sid, Track.Kind.Video, receiver, loggerOptions);\r\n    this.elementInfos = [];\r\n    this.monitorReceiver = () => __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.receiver) {\r\n        this._currentBitrate = 0;\r\n        return;\r\n      }\r\n      const stats = yield this.getReceiverStats();\r\n      if (stats && this.prevStats && this.receiver) {\r\n        this._currentBitrate = computeBitrate(stats, this.prevStats);\r\n      }\r\n      this.prevStats = stats;\r\n    });\r\n    this.debouncedHandleResize = r(() => {\r\n      this.updateDimensions();\r\n    }, REACTION_DELAY);\r\n    this.adaptiveStreamSettings = adaptiveStreamSettings;\r\n  }\r\n  get isAdaptiveStream() {\r\n    return this.adaptiveStreamSettings !== undefined;\r\n  }\r\n  /**\r\n   * Note: When using adaptiveStream, you need to use remoteVideoTrack.attach() to add the track to a HTMLVideoElement, otherwise your video tracks might never start\r\n   */\r\n  get mediaStreamTrack() {\r\n    return this._mediaStreamTrack;\r\n  }\r\n  /** @internal */\r\n  setMuted(muted) {\r\n    super.setMuted(muted);\r\n    this.attachedElements.forEach(element => {\r\n      // detach or attach\r\n      if (muted) {\r\n        detachTrack(this._mediaStreamTrack, element);\r\n      } else {\r\n        attachToElement(this._mediaStreamTrack, element);\r\n      }\r\n    });\r\n  }\r\n  attach(element) {\r\n    if (!element) {\r\n      element = super.attach();\r\n    } else {\r\n      super.attach(element);\r\n    }\r\n    // It's possible attach is called multiple times on an element. When that's\r\n    // the case, we'd want to avoid adding duplicate elementInfos\r\n    if (this.adaptiveStreamSettings && this.elementInfos.find(info => info.element === element) === undefined) {\r\n      const elementInfo = new HTMLElementInfo(element);\r\n      this.observeElementInfo(elementInfo);\r\n    }\r\n    return element;\r\n  }\r\n  /**\r\n   * Observe an ElementInfo for changes when adaptive streaming.\r\n   * @param elementInfo\r\n   * @internal\r\n   */\r\n  observeElementInfo(elementInfo) {\r\n    if (this.adaptiveStreamSettings && this.elementInfos.find(info => info === elementInfo) === undefined) {\r\n      elementInfo.handleResize = () => {\r\n        this.debouncedHandleResize();\r\n      };\r\n      elementInfo.handleVisibilityChanged = () => {\r\n        this.updateVisibility();\r\n      };\r\n      this.elementInfos.push(elementInfo);\r\n      elementInfo.observe();\r\n      // trigger the first resize update cycle\r\n      // if the tab is backgrounded, the initial resize event does not fire until\r\n      // the tab comes into focus for the first time.\r\n      this.debouncedHandleResize();\r\n      this.updateVisibility();\r\n    } else {\r\n      this.log.warn('visibility resize observer not triggered', this.logContext);\r\n    }\r\n  }\r\n  /**\r\n   * Stop observing an ElementInfo for changes.\r\n   * @param elementInfo\r\n   * @internal\r\n   */\r\n  stopObservingElementInfo(elementInfo) {\r\n    if (!this.isAdaptiveStream) {\r\n      this.log.warn('stopObservingElementInfo ignored', this.logContext);\r\n      return;\r\n    }\r\n    const stopElementInfos = this.elementInfos.filter(info => info === elementInfo);\r\n    for (const info of stopElementInfos) {\r\n      info.stopObserving();\r\n    }\r\n    this.elementInfos = this.elementInfos.filter(info => info !== elementInfo);\r\n    this.updateVisibility();\r\n    this.debouncedHandleResize();\r\n  }\r\n  detach(element) {\r\n    let detachedElements = [];\r\n    if (element) {\r\n      this.stopObservingElement(element);\r\n      return super.detach(element);\r\n    }\r\n    detachedElements = super.detach();\r\n    for (const e of detachedElements) {\r\n      this.stopObservingElement(e);\r\n    }\r\n    return detachedElements;\r\n  }\r\n  /** @internal */\r\n  getDecoderImplementation() {\r\n    var _a;\r\n    return (_a = this.prevStats) === null || _a === void 0 ? void 0 : _a.decoderImplementation;\r\n  }\r\n  getReceiverStats() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (!this.receiver || !this.receiver.getStats) {\r\n        return;\r\n      }\r\n      const stats = yield this.receiver.getStats();\r\n      let receiverStats;\r\n      let codecID = '';\r\n      let codecs = new Map();\r\n      stats.forEach(v => {\r\n        if (v.type === 'inbound-rtp') {\r\n          codecID = v.codecId;\r\n          receiverStats = {\r\n            type: 'video',\r\n            streamId: v.id,\r\n            framesDecoded: v.framesDecoded,\r\n            framesDropped: v.framesDropped,\r\n            framesReceived: v.framesReceived,\r\n            packetsReceived: v.packetsReceived,\r\n            packetsLost: v.packetsLost,\r\n            frameWidth: v.frameWidth,\r\n            frameHeight: v.frameHeight,\r\n            pliCount: v.pliCount,\r\n            firCount: v.firCount,\r\n            nackCount: v.nackCount,\r\n            jitter: v.jitter,\r\n            timestamp: v.timestamp,\r\n            bytesReceived: v.bytesReceived,\r\n            decoderImplementation: v.decoderImplementation\r\n          };\r\n        } else if (v.type === 'codec') {\r\n          codecs.set(v.id, v);\r\n        }\r\n      });\r\n      if (receiverStats && codecID !== '' && codecs.get(codecID)) {\r\n        receiverStats.mimeType = codecs.get(codecID).mimeType;\r\n      }\r\n      return receiverStats;\r\n    });\r\n  }\r\n  stopObservingElement(element) {\r\n    const stopElementInfos = this.elementInfos.filter(info => info.element === element);\r\n    for (const info of stopElementInfos) {\r\n      this.stopObservingElementInfo(info);\r\n    }\r\n  }\r\n  handleAppVisibilityChanged() {\r\n    const _super = Object.create(null, {\r\n      handleAppVisibilityChanged: {\r\n        get: () => super.handleAppVisibilityChanged\r\n      }\r\n    });\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield _super.handleAppVisibilityChanged.call(this);\r\n      if (!this.isAdaptiveStream) return;\r\n      this.updateVisibility();\r\n    });\r\n  }\r\n  updateVisibility() {\r\n    var _a, _b;\r\n    const lastVisibilityChange = this.elementInfos.reduce((prev, info) => Math.max(prev, info.visibilityChangedAt || 0), 0);\r\n    const backgroundPause = ((_b = (_a = this.adaptiveStreamSettings) === null || _a === void 0 ? void 0 : _a.pauseVideoInBackground) !== null && _b !== void 0 ? _b : true // default to true\r\n    ) ? this.isInBackground : false;\r\n    const isPiPMode = this.elementInfos.some(info => info.pictureInPicture);\r\n    const isVisible = this.elementInfos.some(info => info.visible) && !backgroundPause || isPiPMode;\r\n    if (this.lastVisible === isVisible) {\r\n      return;\r\n    }\r\n    if (!isVisible && Date.now() - lastVisibilityChange < REACTION_DELAY) {\r\n      // delay hidden events\r\n      CriticalTimers.setTimeout(() => {\r\n        this.updateVisibility();\r\n      }, REACTION_DELAY);\r\n      return;\r\n    }\r\n    this.lastVisible = isVisible;\r\n    this.emit(TrackEvent.VisibilityChanged, isVisible, this);\r\n  }\r\n  updateDimensions() {\r\n    var _a, _b;\r\n    let maxWidth = 0;\r\n    let maxHeight = 0;\r\n    const pixelDensity = this.getPixelDensity();\r\n    for (const info of this.elementInfos) {\r\n      const currentElementWidth = info.width() * pixelDensity;\r\n      const currentElementHeight = info.height() * pixelDensity;\r\n      if (currentElementWidth + currentElementHeight > maxWidth + maxHeight) {\r\n        maxWidth = currentElementWidth;\r\n        maxHeight = currentElementHeight;\r\n      }\r\n    }\r\n    if (((_a = this.lastDimensions) === null || _a === void 0 ? void 0 : _a.width) === maxWidth && ((_b = this.lastDimensions) === null || _b === void 0 ? void 0 : _b.height) === maxHeight) {\r\n      return;\r\n    }\r\n    this.lastDimensions = {\r\n      width: maxWidth,\r\n      height: maxHeight\r\n    };\r\n    this.emit(TrackEvent.VideoDimensionsChanged, this.lastDimensions, this);\r\n  }\r\n  getPixelDensity() {\r\n    var _a;\r\n    const pixelDensity = (_a = this.adaptiveStreamSettings) === null || _a === void 0 ? void 0 : _a.pixelDensity;\r\n    if (pixelDensity === 'screen') {\r\n      return getDevicePixelRatio();\r\n    } else if (!pixelDensity) {\r\n      // when unset, we'll pick a sane default here.\r\n      // for higher pixel density devices (mobile phones, etc), we'll use 2\r\n      // otherwise it defaults to 1\r\n      const devicePixelRatio = getDevicePixelRatio();\r\n      if (devicePixelRatio > 2) {\r\n        return 2;\r\n      } else {\r\n        return 1;\r\n      }\r\n    }\r\n    return pixelDensity;\r\n  }\r\n}\r\nclass HTMLElementInfo {\r\n  get visible() {\r\n    return this.isPiP || this.isIntersecting;\r\n  }\r\n  get pictureInPicture() {\r\n    return this.isPiP;\r\n  }\r\n  constructor(element, visible) {\r\n    this.onVisibilityChanged = entry => {\r\n      var _a;\r\n      const {\r\n        target,\r\n        isIntersecting\r\n      } = entry;\r\n      if (target === this.element) {\r\n        this.isIntersecting = isIntersecting;\r\n        this.isPiP = isElementInPiP(this.element);\r\n        this.visibilityChangedAt = Date.now();\r\n        (_a = this.handleVisibilityChanged) === null || _a === void 0 ? void 0 : _a.call(this);\r\n      }\r\n    };\r\n    this.onEnterPiP = () => {\r\n      var _a, _b, _c;\r\n      (_b = (_a = window.documentPictureInPicture) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.addEventListener('pagehide', this.onLeavePiP);\r\n      this.isPiP = isElementInPiP(this.element);\r\n      (_c = this.handleVisibilityChanged) === null || _c === void 0 ? void 0 : _c.call(this);\r\n    };\r\n    this.onLeavePiP = () => {\r\n      var _a;\r\n      this.isPiP = isElementInPiP(this.element);\r\n      (_a = this.handleVisibilityChanged) === null || _a === void 0 ? void 0 : _a.call(this);\r\n    };\r\n    this.element = element;\r\n    this.isIntersecting = visible !== null && visible !== void 0 ? visible : isElementInViewport(element);\r\n    this.isPiP = isWeb() && isElementInPiP(element);\r\n    this.visibilityChangedAt = 0;\r\n  }\r\n  width() {\r\n    return this.element.clientWidth;\r\n  }\r\n  height() {\r\n    return this.element.clientHeight;\r\n  }\r\n  observe() {\r\n    var _a, _b, _c;\r\n    // make sure we update the current visible state once we start to observe\r\n    this.isIntersecting = isElementInViewport(this.element);\r\n    this.isPiP = isElementInPiP(this.element);\r\n    this.element.handleResize = () => {\r\n      var _a;\r\n      (_a = this.handleResize) === null || _a === void 0 ? void 0 : _a.call(this);\r\n    };\r\n    this.element.handleVisibilityChanged = this.onVisibilityChanged;\r\n    getIntersectionObserver().observe(this.element);\r\n    getResizeObserver().observe(this.element);\r\n    this.element.addEventListener('enterpictureinpicture', this.onEnterPiP);\r\n    this.element.addEventListener('leavepictureinpicture', this.onLeavePiP);\r\n    (_a = window.documentPictureInPicture) === null || _a === void 0 ? void 0 : _a.addEventListener('enter', this.onEnterPiP);\r\n    (_c = (_b = window.documentPictureInPicture) === null || _b === void 0 ? void 0 : _b.window) === null || _c === void 0 ? void 0 : _c.addEventListener('pagehide', this.onLeavePiP);\r\n  }\r\n  stopObserving() {\r\n    var _a, _b, _c, _d, _e;\r\n    (_a = getIntersectionObserver()) === null || _a === void 0 ? void 0 : _a.unobserve(this.element);\r\n    (_b = getResizeObserver()) === null || _b === void 0 ? void 0 : _b.unobserve(this.element);\r\n    this.element.removeEventListener('enterpictureinpicture', this.onEnterPiP);\r\n    this.element.removeEventListener('leavepictureinpicture', this.onLeavePiP);\r\n    (_c = window.documentPictureInPicture) === null || _c === void 0 ? void 0 : _c.removeEventListener('enter', this.onEnterPiP);\r\n    (_e = (_d = window.documentPictureInPicture) === null || _d === void 0 ? void 0 : _d.window) === null || _e === void 0 ? void 0 : _e.removeEventListener('pagehide', this.onLeavePiP);\r\n  }\r\n}\r\nfunction isElementInPiP(el) {\r\n  var _a, _b;\r\n  // Simple video PiP\r\n  if (document.pictureInPictureElement === el) return true;\r\n  // Document PiP\r\n  if ((_a = window.documentPictureInPicture) === null || _a === void 0 ? void 0 : _a.window) return isElementInViewport(el, (_b = window.documentPictureInPicture) === null || _b === void 0 ? void 0 : _b.window);\r\n  return false;\r\n}\r\n// does not account for occlusion by other elements or opacity property\r\nfunction isElementInViewport(el, win) {\r\n  const viewportWindow = win || window;\r\n  let top = el.offsetTop;\r\n  let left = el.offsetLeft;\r\n  const width = el.offsetWidth;\r\n  const height = el.offsetHeight;\r\n  const {\r\n    hidden\r\n  } = el;\r\n  const {\r\n    display\r\n  } = getComputedStyle(el);\r\n  while (el.offsetParent) {\r\n    el = el.offsetParent;\r\n    top += el.offsetTop;\r\n    left += el.offsetLeft;\r\n  }\r\n  return top < viewportWindow.pageYOffset + viewportWindow.innerHeight && left < viewportWindow.pageXOffset + viewportWindow.innerWidth && top + height > viewportWindow.pageYOffset && left + width > viewportWindow.pageXOffset && !hidden && display !== 'none';\r\n}\r\n\r\nclass TrackPublication extends eventsExports.EventEmitter {\r\n  constructor(kind, id, name, loggerOptions) {\r\n    var _a;\r\n    super();\r\n    this.metadataMuted = false;\r\n    this.encryption = Encryption_Type.NONE;\r\n    this.log = livekitLogger;\r\n    this.handleMuted = () => {\r\n      this.emit(TrackEvent.Muted);\r\n    };\r\n    this.handleUnmuted = () => {\r\n      this.emit(TrackEvent.Unmuted);\r\n    };\r\n    this.log = getLogger((_a = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.Publication);\r\n    this.loggerContextCb = this.loggerContextCb;\r\n    this.setMaxListeners(100);\r\n    this.kind = kind;\r\n    this.trackSid = id;\r\n    this.trackName = name;\r\n    this.source = Track.Source.Unknown;\r\n  }\r\n  /** @internal */\r\n  setTrack(track) {\r\n    if (this.track) {\r\n      this.track.off(TrackEvent.Muted, this.handleMuted);\r\n      this.track.off(TrackEvent.Unmuted, this.handleUnmuted);\r\n    }\r\n    this.track = track;\r\n    if (track) {\r\n      // forward events\r\n      track.on(TrackEvent.Muted, this.handleMuted);\r\n      track.on(TrackEvent.Unmuted, this.handleUnmuted);\r\n    }\r\n  }\r\n  get logContext() {\r\n    var _a;\r\n    return Object.assign(Object.assign({}, (_a = this.loggerContextCb) === null || _a === void 0 ? void 0 : _a.call(this)), getLogContextFromTrack(this));\r\n  }\r\n  get isMuted() {\r\n    return this.metadataMuted;\r\n  }\r\n  get isEnabled() {\r\n    return true;\r\n  }\r\n  get isSubscribed() {\r\n    return this.track !== undefined;\r\n  }\r\n  get isEncrypted() {\r\n    return this.encryption !== Encryption_Type.NONE;\r\n  }\r\n  /**\r\n   * an [AudioTrack] if this publication holds an audio track\r\n   */\r\n  get audioTrack() {\r\n    if (isAudioTrack(this.track)) {\r\n      return this.track;\r\n    }\r\n  }\r\n  /**\r\n   * an [VideoTrack] if this publication holds a video track\r\n   */\r\n  get videoTrack() {\r\n    if (isVideoTrack(this.track)) {\r\n      return this.track;\r\n    }\r\n  }\r\n  /** @internal */\r\n  updateInfo(info) {\r\n    this.trackSid = info.sid;\r\n    this.trackName = info.name;\r\n    this.source = Track.sourceFromProto(info.source);\r\n    this.mimeType = info.mimeType;\r\n    if (this.kind === Track.Kind.Video && info.width > 0) {\r\n      this.dimensions = {\r\n        width: info.width,\r\n        height: info.height\r\n      };\r\n      this.simulcasted = info.simulcast;\r\n    }\r\n    this.encryption = info.encryption;\r\n    this.trackInfo = info;\r\n    this.log.debug('update publication info', Object.assign(Object.assign({}, this.logContext), {\r\n      info\r\n    }));\r\n  }\r\n}\r\n(function (TrackPublication) {\r\n  (function (SubscriptionStatus) {\r\n    SubscriptionStatus[\"Desired\"] = \"desired\";\r\n    SubscriptionStatus[\"Subscribed\"] = \"subscribed\";\r\n    SubscriptionStatus[\"Unsubscribed\"] = \"unsubscribed\";\r\n  })(TrackPublication.SubscriptionStatus || (TrackPublication.SubscriptionStatus = {}));\r\n  (function (PermissionStatus) {\r\n    PermissionStatus[\"Allowed\"] = \"allowed\";\r\n    PermissionStatus[\"NotAllowed\"] = \"not_allowed\";\r\n  })(TrackPublication.PermissionStatus || (TrackPublication.PermissionStatus = {}));\r\n})(TrackPublication || (TrackPublication = {}));\r\n\r\nclass LocalTrackPublication extends TrackPublication {\r\n  get isUpstreamPaused() {\r\n    var _a;\r\n    return (_a = this.track) === null || _a === void 0 ? void 0 : _a.isUpstreamPaused;\r\n  }\r\n  constructor(kind, ti, track, loggerOptions) {\r\n    super(kind, ti.sid, ti.name, loggerOptions);\r\n    this.track = undefined;\r\n    this.handleTrackEnded = () => {\r\n      this.emit(TrackEvent.Ended);\r\n    };\r\n    this.updateInfo(ti);\r\n    this.setTrack(track);\r\n  }\r\n  setTrack(track) {\r\n    if (this.track) {\r\n      this.track.off(TrackEvent.Ended, this.handleTrackEnded);\r\n    }\r\n    super.setTrack(track);\r\n    if (track) {\r\n      track.on(TrackEvent.Ended, this.handleTrackEnded);\r\n    }\r\n  }\r\n  get isMuted() {\r\n    if (this.track) {\r\n      return this.track.isMuted;\r\n    }\r\n    return super.isMuted;\r\n  }\r\n  get audioTrack() {\r\n    return super.audioTrack;\r\n  }\r\n  get videoTrack() {\r\n    return super.videoTrack;\r\n  }\r\n  get isLocal() {\r\n    return true;\r\n  }\r\n  /**\r\n   * Mute the track associated with this publication\r\n   */\r\n  mute() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      return (_a = this.track) === null || _a === void 0 ? void 0 : _a.mute();\r\n    });\r\n  }\r\n  /**\r\n   * Unmute track associated with this publication\r\n   */\r\n  unmute() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      return (_a = this.track) === null || _a === void 0 ? void 0 : _a.unmute();\r\n    });\r\n  }\r\n  /**\r\n   * Pauses the media stream track associated with this publication from being sent to the server\r\n   * and signals \"muted\" event to other participants\r\n   * Useful if you want to pause the stream without pausing the local media stream track\r\n   */\r\n  pauseUpstream() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      yield (_a = this.track) === null || _a === void 0 ? void 0 : _a.pauseUpstream();\r\n    });\r\n  }\r\n  /**\r\n   * Resumes sending the media stream track associated with this publication to the server after a call to [[pauseUpstream()]]\r\n   * and signals \"unmuted\" event to other participants (unless the track is explicitly muted)\r\n   */\r\n  resumeUpstream() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      yield (_a = this.track) === null || _a === void 0 ? void 0 : _a.resumeUpstream();\r\n    });\r\n  }\r\n  getTrackFeatures() {\r\n    var _a;\r\n    if (isAudioTrack(this.track)) {\r\n      const settings = this.track.getSourceTrackSettings();\r\n      const features = new Set();\r\n      if (settings.autoGainControl) {\r\n        features.add(AudioTrackFeature.TF_AUTO_GAIN_CONTROL);\r\n      }\r\n      if (settings.echoCancellation) {\r\n        features.add(AudioTrackFeature.TF_ECHO_CANCELLATION);\r\n      }\r\n      if (settings.noiseSuppression) {\r\n        features.add(AudioTrackFeature.TF_NOISE_SUPPRESSION);\r\n      }\r\n      if (settings.channelCount && settings.channelCount > 1) {\r\n        features.add(AudioTrackFeature.TF_STEREO);\r\n      }\r\n      if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.dtx)) {\r\n        features.add(AudioTrackFeature.TF_NO_DTX);\r\n      }\r\n      if (this.track.enhancedNoiseCancellation) {\r\n        features.add(AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION);\r\n      }\r\n      return Array.from(features.values());\r\n    } else return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Creates a local video and audio track at the same time. When acquiring both\r\n * audio and video tracks together, it'll display a single permission prompt to\r\n * the user instead of two separate ones.\r\n * @param options\r\n */\r\nfunction createLocalTracks(options, loggerOptions) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    options !== null && options !== void 0 ? options : options = {};\r\n    let attemptExactMatch = false;\r\n    const {\r\n      audioProcessor,\r\n      videoProcessor,\r\n      optionsWithoutProcessor: internalOptions\r\n    } = extractProcessorsFromOptions(options);\r\n    let retryAudioOptions = internalOptions.audio;\r\n    let retryVideoOptions = internalOptions.video;\r\n    if (audioProcessor && typeof internalOptions.audio === 'object') {\r\n      internalOptions.audio.processor = audioProcessor;\r\n    }\r\n    if (videoProcessor && typeof internalOptions.video === 'object') {\r\n      internalOptions.video.processor = videoProcessor;\r\n    }\r\n    // if the user passes a device id as a string, we default to exact match\r\n    if (options.audio && typeof internalOptions.audio === 'object' && typeof internalOptions.audio.deviceId === 'string') {\r\n      const deviceId = internalOptions.audio.deviceId;\r\n      internalOptions.audio.deviceId = {\r\n        exact: deviceId\r\n      };\r\n      attemptExactMatch = true;\r\n      retryAudioOptions = Object.assign(Object.assign({}, internalOptions.audio), {\r\n        deviceId: {\r\n          ideal: deviceId\r\n        }\r\n      });\r\n    }\r\n    if (internalOptions.video && typeof internalOptions.video === 'object' && typeof internalOptions.video.deviceId === 'string') {\r\n      const deviceId = internalOptions.video.deviceId;\r\n      internalOptions.video.deviceId = {\r\n        exact: deviceId\r\n      };\r\n      attemptExactMatch = true;\r\n      retryVideoOptions = Object.assign(Object.assign({}, internalOptions.video), {\r\n        deviceId: {\r\n          ideal: deviceId\r\n        }\r\n      });\r\n    }\r\n    if (internalOptions.audio === true || typeof internalOptions.audio === 'object' && !internalOptions.audio.deviceId) {\r\n      internalOptions.audio = {\r\n        deviceId: 'default'\r\n      };\r\n    }\r\n    if (internalOptions.video === true) {\r\n      internalOptions.video = {\r\n        deviceId: 'default'\r\n      };\r\n    } else if (typeof internalOptions.video === 'object' && !internalOptions.video.deviceId) {\r\n      internalOptions.video.deviceId = 'default';\r\n    }\r\n    const opts = mergeDefaultOptions(internalOptions, audioDefaults, videoDefaults);\r\n    const constraints = constraintsForOptions(opts);\r\n    // Keep a reference to the promise on DeviceManager and await it in getLocalDevices()\r\n    // works around iOS Safari Bug https://bugs.webkit.org/show_bug.cgi?id=179363\r\n    const mediaPromise = navigator.mediaDevices.getUserMedia(constraints);\r\n    if (internalOptions.audio) {\r\n      DeviceManager.userMediaPromiseMap.set('audioinput', mediaPromise);\r\n      mediaPromise.catch(() => DeviceManager.userMediaPromiseMap.delete('audioinput'));\r\n    }\r\n    if (internalOptions.video) {\r\n      DeviceManager.userMediaPromiseMap.set('videoinput', mediaPromise);\r\n      mediaPromise.catch(() => DeviceManager.userMediaPromiseMap.delete('videoinput'));\r\n    }\r\n    try {\r\n      const stream = yield mediaPromise;\r\n      return yield Promise.all(stream.getTracks().map(mediaStreamTrack => __awaiter(this, void 0, void 0, function* () {\r\n        const isAudio = mediaStreamTrack.kind === 'audio';\r\n        let trackOptions = isAudio ? opts.audio : opts.video;\r\n        if (typeof trackOptions === 'boolean' || !trackOptions) {\r\n          trackOptions = {};\r\n        }\r\n        let trackConstraints;\r\n        const conOrBool = isAudio ? constraints.audio : constraints.video;\r\n        if (typeof conOrBool !== 'boolean') {\r\n          trackConstraints = conOrBool;\r\n        }\r\n        // update the constraints with the device id the user gave permissions to in the permission prompt\r\n        // otherwise each track restart (e.g. mute - unmute) will try to initialize the device again -> causing additional permission prompts\r\n        const newDeviceId = mediaStreamTrack.getSettings().deviceId;\r\n        if ((trackConstraints === null || trackConstraints === void 0 ? void 0 : trackConstraints.deviceId) && unwrapConstraint(trackConstraints.deviceId) !== newDeviceId) {\r\n          trackConstraints.deviceId = newDeviceId;\r\n        } else if (!trackConstraints) {\r\n          trackConstraints = {\r\n            deviceId: newDeviceId\r\n          };\r\n        }\r\n        const track = mediaTrackToLocalTrack(mediaStreamTrack, trackConstraints, loggerOptions);\r\n        if (track.kind === Track.Kind.Video) {\r\n          track.source = Track.Source.Camera;\r\n        } else if (track.kind === Track.Kind.Audio) {\r\n          track.source = Track.Source.Microphone;\r\n        }\r\n        track.mediaStream = stream;\r\n        if (isAudioTrack(track) && audioProcessor) {\r\n          yield track.setProcessor(audioProcessor);\r\n        } else if (isVideoTrack(track) && videoProcessor) {\r\n          yield track.setProcessor(videoProcessor);\r\n        }\r\n        return track;\r\n      })));\r\n    } catch (e) {\r\n      if (!attemptExactMatch) {\r\n        throw e;\r\n      }\r\n      return createLocalTracks(Object.assign(Object.assign({}, options), {\r\n        audio: retryAudioOptions,\r\n        video: retryVideoOptions\r\n      }), loggerOptions);\r\n    }\r\n  });\r\n}\r\n/**\r\n * Creates a [[LocalVideoTrack]] with getUserMedia()\r\n * @param options\r\n */\r\nfunction createLocalVideoTrack(options) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    const tracks = yield createLocalTracks({\r\n      audio: false,\r\n      video: options !== null && options !== void 0 ? options : true\r\n    });\r\n    return tracks[0];\r\n  });\r\n}\r\nfunction createLocalAudioTrack(options) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    const tracks = yield createLocalTracks({\r\n      audio: options !== null && options !== void 0 ? options : true,\r\n      video: false\r\n    });\r\n    return tracks[0];\r\n  });\r\n}\r\n/**\r\n * Creates a screen capture tracks with getDisplayMedia().\r\n * A LocalVideoTrack is always created and returned.\r\n * If { audio: true }, and the browser supports audio capture, a LocalAudioTrack is also created.\r\n */\r\nfunction createLocalScreenTracks(options) {\r\n  return __awaiter(this, void 0, void 0, function* () {\r\n    if (options === undefined) {\r\n      options = {};\r\n    }\r\n    if (options.resolution === undefined && !isSafari17()) {\r\n      options.resolution = ScreenSharePresets.h1080fps30.resolution;\r\n    }\r\n    if (navigator.mediaDevices.getDisplayMedia === undefined) {\r\n      throw new DeviceUnsupportedError('getDisplayMedia not supported');\r\n    }\r\n    const constraints = screenCaptureToDisplayMediaStreamOptions(options);\r\n    const stream = yield navigator.mediaDevices.getDisplayMedia(constraints);\r\n    const tracks = stream.getVideoTracks();\r\n    if (tracks.length === 0) {\r\n      throw new TrackInvalidError('no video track found');\r\n    }\r\n    const screenVideo = new LocalVideoTrack(tracks[0], undefined, false);\r\n    screenVideo.source = Track.Source.ScreenShare;\r\n    const localTracks = [screenVideo];\r\n    if (stream.getAudioTracks().length > 0) {\r\n      const screenAudio = new LocalAudioTrack(stream.getAudioTracks()[0], undefined, false);\r\n      screenAudio.source = Track.Source.ScreenShareAudio;\r\n      localTracks.push(screenAudio);\r\n    }\r\n    return localTracks;\r\n  });\r\n}\r\n\r\nvar ConnectionQuality;\r\n(function (ConnectionQuality) {\r\n  ConnectionQuality[\"Excellent\"] = \"excellent\";\r\n  ConnectionQuality[\"Good\"] = \"good\";\r\n  ConnectionQuality[\"Poor\"] = \"poor\";\r\n  /**\r\n   * Indicates that a participant has temporarily (or permanently) lost connection to LiveKit.\r\n   * For permanent disconnection a `ParticipantDisconnected` event will be emitted after a timeout\r\n   */\r\n  ConnectionQuality[\"Lost\"] = \"lost\";\r\n  ConnectionQuality[\"Unknown\"] = \"unknown\";\r\n})(ConnectionQuality || (ConnectionQuality = {}));\r\nfunction qualityFromProto(q) {\r\n  switch (q) {\r\n    case ConnectionQuality$1.EXCELLENT:\r\n      return ConnectionQuality.Excellent;\r\n    case ConnectionQuality$1.GOOD:\r\n      return ConnectionQuality.Good;\r\n    case ConnectionQuality$1.POOR:\r\n      return ConnectionQuality.Poor;\r\n    case ConnectionQuality$1.LOST:\r\n      return ConnectionQuality.Lost;\r\n    default:\r\n      return ConnectionQuality.Unknown;\r\n  }\r\n}\r\nclass Participant extends eventsExports.EventEmitter {\r\n  get logContext() {\r\n    var _a, _b;\r\n    return Object.assign({}, (_b = (_a = this.loggerOptions) === null || _a === void 0 ? void 0 : _a.loggerContextCb) === null || _b === void 0 ? void 0 : _b.call(_a));\r\n  }\r\n  get isEncrypted() {\r\n    return this.trackPublications.size > 0 && Array.from(this.trackPublications.values()).every(tr => tr.isEncrypted);\r\n  }\r\n  get isAgent() {\r\n    var _a;\r\n    return ((_a = this.permissions) === null || _a === void 0 ? void 0 : _a.agent) || this.kind === ParticipantInfo_Kind.AGENT;\r\n  }\r\n  get isActive() {\r\n    var _a;\r\n    return ((_a = this.participantInfo) === null || _a === void 0 ? void 0 : _a.state) === ParticipantInfo_State.ACTIVE;\r\n  }\r\n  get kind() {\r\n    return this._kind;\r\n  }\r\n  /** participant attributes, similar to metadata, but as a key/value map */\r\n  get attributes() {\r\n    return Object.freeze(Object.assign({}, this._attributes));\r\n  }\r\n  /** @internal */\r\n  constructor(sid, identity, name, metadata, attributes, loggerOptions) {\r\n    let kind = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : ParticipantInfo_Kind.STANDARD;\r\n    var _a;\r\n    super();\r\n    /** audio level between 0-1.0, 1 being loudest, 0 being softest */\r\n    this.audioLevel = 0;\r\n    /** if participant is currently speaking */\r\n    this.isSpeaking = false;\r\n    this._connectionQuality = ConnectionQuality.Unknown;\r\n    this.log = livekitLogger;\r\n    this.log = getLogger((_a = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.Participant);\r\n    this.loggerOptions = loggerOptions;\r\n    this.setMaxListeners(100);\r\n    this.sid = sid;\r\n    this.identity = identity;\r\n    this.name = name;\r\n    this.metadata = metadata;\r\n    this.audioTrackPublications = new Map();\r\n    this.videoTrackPublications = new Map();\r\n    this.trackPublications = new Map();\r\n    this._kind = kind;\r\n    this._attributes = attributes !== null && attributes !== void 0 ? attributes : {};\r\n  }\r\n  getTrackPublications() {\r\n    return Array.from(this.trackPublications.values());\r\n  }\r\n  /**\r\n   * Finds the first track that matches the source filter, for example, getting\r\n   * the user's camera track with getTrackBySource(Track.Source.Camera).\r\n   */\r\n  getTrackPublication(source) {\r\n    for (const [, pub] of this.trackPublications) {\r\n      if (pub.source === source) {\r\n        return pub;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Finds the first track that matches the track's name.\r\n   */\r\n  getTrackPublicationByName(name) {\r\n    for (const [, pub] of this.trackPublications) {\r\n      if (pub.trackName === name) {\r\n        return pub;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Waits until the participant is active and ready to receive data messages\r\n   * @returns a promise that resolves when the participant is active\r\n   */\r\n  waitUntilActive() {\r\n    if (this.isActive) {\r\n      return Promise.resolve();\r\n    }\r\n    if (this.activeFuture) {\r\n      return this.activeFuture.promise;\r\n    }\r\n    this.activeFuture = new Future();\r\n    this.once(ParticipantEvent.Active, () => {\r\n      var _a, _b;\r\n      (_b = (_a = this.activeFuture) === null || _a === void 0 ? void 0 : _a.resolve) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n      this.activeFuture = undefined;\r\n    });\r\n    return this.activeFuture.promise;\r\n  }\r\n  get connectionQuality() {\r\n    return this._connectionQuality;\r\n  }\r\n  get isCameraEnabled() {\r\n    var _a;\r\n    const track = this.getTrackPublication(Track.Source.Camera);\r\n    return !((_a = track === null || track === void 0 ? void 0 : track.isMuted) !== null && _a !== void 0 ? _a : true);\r\n  }\r\n  get isMicrophoneEnabled() {\r\n    var _a;\r\n    const track = this.getTrackPublication(Track.Source.Microphone);\r\n    return !((_a = track === null || track === void 0 ? void 0 : track.isMuted) !== null && _a !== void 0 ? _a : true);\r\n  }\r\n  get isScreenShareEnabled() {\r\n    const track = this.getTrackPublication(Track.Source.ScreenShare);\r\n    return !!track;\r\n  }\r\n  get isLocal() {\r\n    return false;\r\n  }\r\n  /** when participant joined the room */\r\n  get joinedAt() {\r\n    if (this.participantInfo) {\r\n      return new Date(Number.parseInt(this.participantInfo.joinedAt.toString()) * 1000);\r\n    }\r\n    return new Date();\r\n  }\r\n  /** @internal */\r\n  updateInfo(info) {\r\n    var _a;\r\n    // it's possible the update could be applied out of order due to await\r\n    // during reconnect sequences. when that happens, it's possible for server\r\n    // to have sent more recent version of participant info while JS is waiting\r\n    // to process the existing payload.\r\n    // when the participant sid remains the same, and we already have a later version\r\n    // of the payload, they can be safely skipped\r\n    if (this.participantInfo && this.participantInfo.sid === info.sid && this.participantInfo.version > info.version) {\r\n      return false;\r\n    }\r\n    this.identity = info.identity;\r\n    this.sid = info.sid;\r\n    this._setName(info.name);\r\n    this._setMetadata(info.metadata);\r\n    this._setAttributes(info.attributes);\r\n    if (info.state === ParticipantInfo_State.ACTIVE && ((_a = this.participantInfo) === null || _a === void 0 ? void 0 : _a.state) !== ParticipantInfo_State.ACTIVE) {\r\n      this.emit(ParticipantEvent.Active);\r\n    }\r\n    if (info.permission) {\r\n      this.setPermissions(info.permission);\r\n    }\r\n    // set this last so setMetadata can detect changes\r\n    this.participantInfo = info;\r\n    return true;\r\n  }\r\n  /**\r\n   * Updates metadata from server\r\n   **/\r\n  _setMetadata(md) {\r\n    const changed = this.metadata !== md;\r\n    const prevMetadata = this.metadata;\r\n    this.metadata = md;\r\n    if (changed) {\r\n      this.emit(ParticipantEvent.ParticipantMetadataChanged, prevMetadata);\r\n    }\r\n  }\r\n  _setName(name) {\r\n    const changed = this.name !== name;\r\n    this.name = name;\r\n    if (changed) {\r\n      this.emit(ParticipantEvent.ParticipantNameChanged, name);\r\n    }\r\n  }\r\n  /**\r\n   * Updates metadata from server\r\n   **/\r\n  _setAttributes(attributes) {\r\n    const diff = diffAttributes(this.attributes, attributes);\r\n    this._attributes = attributes;\r\n    if (Object.keys(diff).length > 0) {\r\n      this.emit(ParticipantEvent.AttributesChanged, diff);\r\n    }\r\n  }\r\n  /** @internal */\r\n  setPermissions(permissions) {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    const prevPermissions = this.permissions;\r\n    const changed = permissions.canPublish !== ((_a = this.permissions) === null || _a === void 0 ? void 0 : _a.canPublish) || permissions.canSubscribe !== ((_b = this.permissions) === null || _b === void 0 ? void 0 : _b.canSubscribe) || permissions.canPublishData !== ((_c = this.permissions) === null || _c === void 0 ? void 0 : _c.canPublishData) || permissions.hidden !== ((_d = this.permissions) === null || _d === void 0 ? void 0 : _d.hidden) || permissions.recorder !== ((_e = this.permissions) === null || _e === void 0 ? void 0 : _e.recorder) || permissions.canPublishSources.length !== this.permissions.canPublishSources.length || permissions.canPublishSources.some((value, index) => {\r\n      var _a;\r\n      return value !== ((_a = this.permissions) === null || _a === void 0 ? void 0 : _a.canPublishSources[index]);\r\n    }) || permissions.canSubscribeMetrics !== ((_f = this.permissions) === null || _f === void 0 ? void 0 : _f.canSubscribeMetrics);\r\n    this.permissions = permissions;\r\n    if (changed) {\r\n      this.emit(ParticipantEvent.ParticipantPermissionsChanged, prevPermissions);\r\n    }\r\n    return changed;\r\n  }\r\n  /** @internal */\r\n  setIsSpeaking(speaking) {\r\n    if (speaking === this.isSpeaking) {\r\n      return;\r\n    }\r\n    this.isSpeaking = speaking;\r\n    if (speaking) {\r\n      this.lastSpokeAt = new Date();\r\n    }\r\n    this.emit(ParticipantEvent.IsSpeakingChanged, speaking);\r\n  }\r\n  /** @internal */\r\n  setConnectionQuality(q) {\r\n    const prevQuality = this._connectionQuality;\r\n    this._connectionQuality = qualityFromProto(q);\r\n    if (prevQuality !== this._connectionQuality) {\r\n      this.emit(ParticipantEvent.ConnectionQualityChanged, this._connectionQuality);\r\n    }\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  setDisconnected() {\r\n    var _a, _b;\r\n    if (this.activeFuture) {\r\n      (_b = (_a = this.activeFuture).reject) === null || _b === void 0 ? void 0 : _b.call(_a, new Error('Participant disconnected'));\r\n      this.activeFuture = undefined;\r\n    }\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  setAudioContext(ctx) {\r\n    this.audioContext = ctx;\r\n    this.audioTrackPublications.forEach(track => isAudioTrack(track.track) && track.track.setAudioContext(ctx));\r\n  }\r\n  addTrackPublication(publication) {\r\n    // forward publication driven events\r\n    publication.on(TrackEvent.Muted, () => {\r\n      this.emit(ParticipantEvent.TrackMuted, publication);\r\n    });\r\n    publication.on(TrackEvent.Unmuted, () => {\r\n      this.emit(ParticipantEvent.TrackUnmuted, publication);\r\n    });\r\n    const pub = publication;\r\n    if (pub.track) {\r\n      pub.track.sid = publication.trackSid;\r\n    }\r\n    this.trackPublications.set(publication.trackSid, publication);\r\n    switch (publication.kind) {\r\n      case Track.Kind.Audio:\r\n        this.audioTrackPublications.set(publication.trackSid, publication);\r\n        break;\r\n      case Track.Kind.Video:\r\n        this.videoTrackPublications.set(publication.trackSid, publication);\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction trackPermissionToProto(perms) {\r\n  var _a, _b, _c;\r\n  if (!perms.participantSid && !perms.participantIdentity) {\r\n    throw new Error('Invalid track permission, must provide at least one of participantIdentity and participantSid');\r\n  }\r\n  return new TrackPermission({\r\n    participantIdentity: (_a = perms.participantIdentity) !== null && _a !== void 0 ? _a : '',\r\n    participantSid: (_b = perms.participantSid) !== null && _b !== void 0 ? _b : '',\r\n    allTracks: (_c = perms.allowAll) !== null && _c !== void 0 ? _c : false,\r\n    trackSids: perms.allowedTrackSids || []\r\n  });\r\n}\r\n\r\nconst STREAM_CHUNK_SIZE = 15000;\r\nclass LocalParticipant extends Participant {\r\n  /** @internal */\r\n  constructor(sid, identity, engine, options, roomRpcHandlers) {\r\n    super(sid, identity, undefined, undefined, undefined, {\r\n      loggerName: options.loggerName,\r\n      loggerContextCb: () => this.engine.logContext\r\n    });\r\n    this.pendingPublishing = new Set();\r\n    this.pendingPublishPromises = new Map();\r\n    this.participantTrackPermissions = [];\r\n    this.allParticipantsAllowedToSubscribe = true;\r\n    this.encryptionType = Encryption_Type.NONE;\r\n    this.enabledPublishVideoCodecs = [];\r\n    this.pendingAcks = new Map();\r\n    this.pendingResponses = new Map();\r\n    this.handleReconnecting = () => {\r\n      if (!this.reconnectFuture) {\r\n        this.reconnectFuture = new Future();\r\n      }\r\n    };\r\n    this.handleReconnected = () => {\r\n      var _a, _b;\r\n      (_b = (_a = this.reconnectFuture) === null || _a === void 0 ? void 0 : _a.resolve) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n      this.reconnectFuture = undefined;\r\n      this.updateTrackSubscriptionPermissions();\r\n    };\r\n    this.handleDisconnected = () => {\r\n      var _a, _b, _c, _d, _e, _f;\r\n      if (this.reconnectFuture) {\r\n        this.reconnectFuture.promise.catch(e => this.log.warn(e.message, this.logContext));\r\n        (_b = (_a = this.reconnectFuture) === null || _a === void 0 ? void 0 : _a.reject) === null || _b === void 0 ? void 0 : _b.call(_a, 'Got disconnected during reconnection attempt');\r\n        this.reconnectFuture = undefined;\r\n      }\r\n      if (this.signalConnectedFuture) {\r\n        (_d = (_c = this.signalConnectedFuture).reject) === null || _d === void 0 ? void 0 : _d.call(_c, 'Got disconnected without signal connected');\r\n        this.signalConnectedFuture = undefined;\r\n      }\r\n      (_f = (_e = this.activeAgentFuture) === null || _e === void 0 ? void 0 : _e.reject) === null || _f === void 0 ? void 0 : _f.call(_e, 'Got disconnected without active agent present');\r\n      this.activeAgentFuture = undefined;\r\n      this.firstActiveAgent = undefined;\r\n    };\r\n    this.handleSignalConnected = joinResponse => {\r\n      var _a, _b;\r\n      if (joinResponse.participant) {\r\n        this.updateInfo(joinResponse.participant);\r\n      }\r\n      if (!this.signalConnectedFuture) {\r\n        this.signalConnectedFuture = new Future();\r\n      }\r\n      (_b = (_a = this.signalConnectedFuture).resolve) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    };\r\n    this.handleSignalRequestResponse = response => {\r\n      const {\r\n        requestId,\r\n        reason,\r\n        message\r\n      } = response;\r\n      const targetRequest = this.pendingSignalRequests.get(requestId);\r\n      if (targetRequest) {\r\n        if (reason !== RequestResponse_Reason.OK) {\r\n          targetRequest.reject(new SignalRequestError(message, reason));\r\n        }\r\n        this.pendingSignalRequests.delete(requestId);\r\n      }\r\n    };\r\n    this.handleDataPacket = packet => {\r\n      switch (packet.value.case) {\r\n        case 'rpcResponse':\r\n          let rpcResponse = packet.value.value;\r\n          let payload = null;\r\n          let error = null;\r\n          if (rpcResponse.value.case === 'payload') {\r\n            payload = rpcResponse.value.value;\r\n          } else if (rpcResponse.value.case === 'error') {\r\n            error = RpcError.fromProto(rpcResponse.value.value);\r\n          }\r\n          this.handleIncomingRpcResponse(rpcResponse.requestId, payload, error);\r\n          break;\r\n        case 'rpcAck':\r\n          let rpcAck = packet.value.value;\r\n          this.handleIncomingRpcAck(rpcAck.requestId);\r\n          break;\r\n      }\r\n    };\r\n    this.updateTrackSubscriptionPermissions = () => {\r\n      this.log.debug('updating track subscription permissions', Object.assign(Object.assign({}, this.logContext), {\r\n        allParticipantsAllowed: this.allParticipantsAllowedToSubscribe,\r\n        participantTrackPermissions: this.participantTrackPermissions\r\n      }));\r\n      this.engine.client.sendUpdateSubscriptionPermissions(this.allParticipantsAllowedToSubscribe, this.participantTrackPermissions.map(p => trackPermissionToProto(p)));\r\n    };\r\n    /** @internal */\r\n    this.onTrackUnmuted = track => {\r\n      this.onTrackMuted(track, track.isUpstreamPaused);\r\n    };\r\n    // when the local track changes in mute status, we'll notify server as such\r\n    /** @internal */\r\n    this.onTrackMuted = (track, muted) => {\r\n      if (muted === undefined) {\r\n        muted = true;\r\n      }\r\n      if (!track.sid) {\r\n        this.log.error('could not update mute status for unpublished track', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n        return;\r\n      }\r\n      this.engine.updateMuteStatus(track.sid, muted);\r\n    };\r\n    this.onTrackUpstreamPaused = track => {\r\n      this.log.debug('upstream paused', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n      this.onTrackMuted(track, true);\r\n    };\r\n    this.onTrackUpstreamResumed = track => {\r\n      this.log.debug('upstream resumed', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n      this.onTrackMuted(track, track.isMuted);\r\n    };\r\n    this.onTrackFeatureUpdate = track => {\r\n      const pub = this.audioTrackPublications.get(track.sid);\r\n      if (!pub) {\r\n        this.log.warn(\"Could not update local audio track settings, missing publication for track \".concat(track.sid), this.logContext);\r\n        return;\r\n      }\r\n      this.engine.client.sendUpdateLocalAudioTrack(pub.trackSid, pub.getTrackFeatures());\r\n    };\r\n    this.handleSubscribedQualityUpdate = update => __awaiter(this, void 0, void 0, function* () {\r\n      var _a, e_1, _b, _c;\r\n      var _d;\r\n      if (!((_d = this.roomOptions) === null || _d === void 0 ? void 0 : _d.dynacast)) {\r\n        return;\r\n      }\r\n      const pub = this.videoTrackPublications.get(update.trackSid);\r\n      if (!pub) {\r\n        this.log.warn('received subscribed quality update for unknown track', Object.assign(Object.assign({}, this.logContext), {\r\n          trackSid: update.trackSid\r\n        }));\r\n        return;\r\n      }\r\n      if (!pub.videoTrack) {\r\n        return;\r\n      }\r\n      const newCodecs = yield pub.videoTrack.setPublishingCodecs(update.subscribedCodecs);\r\n      try {\r\n        for (var _e = true, newCodecs_1 = __asyncValues(newCodecs), newCodecs_1_1; newCodecs_1_1 = yield newCodecs_1.next(), _a = newCodecs_1_1.done, !_a; _e = true) {\r\n          _c = newCodecs_1_1.value;\r\n          _e = false;\r\n          const codec = _c;\r\n          if (isBackupCodec(codec)) {\r\n            this.log.debug(\"publish \".concat(codec, \" for \").concat(pub.videoTrack.sid), Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(pub)));\r\n            yield this.publishAdditionalCodecForTrack(pub.videoTrack, codec, pub.options);\r\n          }\r\n        }\r\n      } catch (e_1_1) {\r\n        e_1 = {\r\n          error: e_1_1\r\n        };\r\n      } finally {\r\n        try {\r\n          if (!_e && !_a && (_b = newCodecs_1.return)) yield _b.call(newCodecs_1);\r\n        } finally {\r\n          if (e_1) throw e_1.error;\r\n        }\r\n      }\r\n    });\r\n    this.handleLocalTrackUnpublished = unpublished => {\r\n      const track = this.trackPublications.get(unpublished.trackSid);\r\n      if (!track) {\r\n        this.log.warn('received unpublished event for unknown track', Object.assign(Object.assign({}, this.logContext), {\r\n          trackSid: unpublished.trackSid\r\n        }));\r\n        return;\r\n      }\r\n      this.unpublishTrack(track.track);\r\n    };\r\n    this.handleTrackEnded = track => __awaiter(this, void 0, void 0, function* () {\r\n      if (track.source === Track.Source.ScreenShare || track.source === Track.Source.ScreenShareAudio) {\r\n        this.log.debug('unpublishing local track due to TrackEnded', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n        this.unpublishTrack(track);\r\n      } else if (track.isUserProvided) {\r\n        yield track.mute();\r\n      } else if (isLocalAudioTrack(track) || isLocalVideoTrack(track)) {\r\n        try {\r\n          if (isWeb()) {\r\n            try {\r\n              const currentPermissions = yield navigator === null || navigator === void 0 ? void 0 : navigator.permissions.query({\r\n                // the permission query for camera and microphone currently not supported in Safari and Firefox\r\n                // @ts-ignore\r\n                name: track.source === Track.Source.Camera ? 'camera' : 'microphone'\r\n              });\r\n              if (currentPermissions && currentPermissions.state === 'denied') {\r\n                this.log.warn(\"user has revoked access to \".concat(track.source), Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n                // detect granted change after permissions were denied to try and resume then\r\n                currentPermissions.onchange = () => {\r\n                  if (currentPermissions.state !== 'denied') {\r\n                    if (!track.isMuted) {\r\n                      track.restartTrack();\r\n                    }\r\n                    currentPermissions.onchange = null;\r\n                  }\r\n                };\r\n                throw new Error('GetUserMedia Permission denied');\r\n              }\r\n            } catch (e) {\r\n              // permissions query fails for firefox, we continue and try to restart the track\r\n            }\r\n          }\r\n          if (!track.isMuted) {\r\n            this.log.debug('track ended, attempting to use a different device', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n            if (isLocalAudioTrack(track)) {\r\n              // fall back to default device if available\r\n              yield track.restartTrack({\r\n                deviceId: 'default'\r\n              });\r\n            } else {\r\n              yield track.restartTrack();\r\n            }\r\n          }\r\n        } catch (e) {\r\n          this.log.warn(\"could not restart track, muting instead\", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n          yield track.mute();\r\n        }\r\n      }\r\n    });\r\n    this.audioTrackPublications = new Map();\r\n    this.videoTrackPublications = new Map();\r\n    this.trackPublications = new Map();\r\n    this.engine = engine;\r\n    this.roomOptions = options;\r\n    this.setupEngine(engine);\r\n    this.activeDeviceMap = new Map([['audioinput', 'default'], ['videoinput', 'default'], ['audiooutput', 'default']]);\r\n    this.pendingSignalRequests = new Map();\r\n    this.rpcHandlers = roomRpcHandlers;\r\n  }\r\n  get lastCameraError() {\r\n    return this.cameraError;\r\n  }\r\n  get lastMicrophoneError() {\r\n    return this.microphoneError;\r\n  }\r\n  get isE2EEEnabled() {\r\n    return this.encryptionType !== Encryption_Type.NONE;\r\n  }\r\n  getTrackPublication(source) {\r\n    const track = super.getTrackPublication(source);\r\n    if (track) {\r\n      return track;\r\n    }\r\n  }\r\n  getTrackPublicationByName(name) {\r\n    const track = super.getTrackPublicationByName(name);\r\n    if (track) {\r\n      return track;\r\n    }\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  setupEngine(engine) {\r\n    this.engine = engine;\r\n    this.engine.on(EngineEvent.RemoteMute, (trackSid, muted) => {\r\n      const pub = this.trackPublications.get(trackSid);\r\n      if (!pub || !pub.track) {\r\n        return;\r\n      }\r\n      if (muted) {\r\n        pub.mute();\r\n      } else {\r\n        pub.unmute();\r\n      }\r\n    });\r\n    this.engine.on(EngineEvent.Connected, this.handleReconnected).on(EngineEvent.SignalConnected, this.handleSignalConnected).on(EngineEvent.SignalRestarted, this.handleReconnected).on(EngineEvent.SignalResumed, this.handleReconnected).on(EngineEvent.Restarting, this.handleReconnecting).on(EngineEvent.Resuming, this.handleReconnecting).on(EngineEvent.LocalTrackUnpublished, this.handleLocalTrackUnpublished).on(EngineEvent.SubscribedQualityUpdate, this.handleSubscribedQualityUpdate).on(EngineEvent.Disconnected, this.handleDisconnected).on(EngineEvent.SignalRequestResponse, this.handleSignalRequestResponse).on(EngineEvent.DataPacketReceived, this.handleDataPacket);\r\n    this.signalConnectedFuture = undefined;\r\n  }\r\n  /**\r\n   * Sets and updates the metadata of the local participant.\r\n   * Note: this requires `canUpdateOwnMetadata` permission.\r\n   * method will throw if the user doesn't have the required permissions\r\n   * @param metadata\r\n   */\r\n  setMetadata(metadata) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield this.requestMetadataUpdate({\r\n        metadata\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * Sets and updates the name of the local participant.\r\n   * Note: this requires `canUpdateOwnMetadata` permission.\r\n   * method will throw if the user doesn't have the required permissions\r\n   * @param metadata\r\n   */\r\n  setName(name) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield this.requestMetadataUpdate({\r\n        name\r\n      });\r\n    });\r\n  }\r\n  /**\r\n   * Set or update participant attributes. It will make updates only to keys that\r\n   * are present in `attributes`, and will not override others.\r\n   * Note: this requires `canUpdateOwnMetadata` permission.\r\n   * @param attributes attributes to update\r\n   */\r\n  setAttributes(attributes) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield this.requestMetadataUpdate({\r\n        attributes\r\n      });\r\n    });\r\n  }\r\n  requestMetadataUpdate(_a) {\r\n    return __awaiter(this, arguments, void 0, function (_ref) {\r\n      var _this = this;\r\n      let {\r\n        metadata,\r\n        name,\r\n        attributes\r\n      } = _ref;\r\n      return function* () {\r\n        return new Promise((resolve, reject) => __awaiter(_this, void 0, void 0, function* () {\r\n          var _a, _b;\r\n          try {\r\n            let isRejected = false;\r\n            const requestId = yield this.engine.client.sendUpdateLocalMetadata((_a = metadata !== null && metadata !== void 0 ? metadata : this.metadata) !== null && _a !== void 0 ? _a : '', (_b = name !== null && name !== void 0 ? name : this.name) !== null && _b !== void 0 ? _b : '', attributes);\r\n            const startTime = performance.now();\r\n            this.pendingSignalRequests.set(requestId, {\r\n              resolve,\r\n              reject: error => {\r\n                reject(error);\r\n                isRejected = true;\r\n              },\r\n              values: {\r\n                name,\r\n                metadata,\r\n                attributes\r\n              }\r\n            });\r\n            while (performance.now() - startTime < 5000 && !isRejected) {\r\n              if ((!name || this.name === name) && (!metadata || this.metadata === metadata) && (!attributes || Object.entries(attributes).every(_ref2 => {\r\n                let [key, value] = _ref2;\r\n                return this.attributes[key] === value || value === '' && !this.attributes[key];\r\n              }))) {\r\n                this.pendingSignalRequests.delete(requestId);\r\n                resolve();\r\n                return;\r\n              }\r\n              yield sleep(50);\r\n            }\r\n            reject(new SignalRequestError('Request to update local metadata timed out', 'TimeoutError'));\r\n          } catch (e) {\r\n            if (e instanceof Error) reject(e);\r\n          }\r\n        }));\r\n      }();\r\n    });\r\n  }\r\n  /**\r\n   * Enable or disable a participant's camera track.\r\n   *\r\n   * If a track has already published, it'll mute or unmute the track.\r\n   * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise\r\n   */\r\n  setCameraEnabled(enabled, options, publishOptions) {\r\n    return this.setTrackEnabled(Track.Source.Camera, enabled, options, publishOptions);\r\n  }\r\n  /**\r\n   * Enable or disable a participant's microphone track.\r\n   *\r\n   * If a track has already published, it'll mute or unmute the track.\r\n   * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise\r\n   */\r\n  setMicrophoneEnabled(enabled, options, publishOptions) {\r\n    return this.setTrackEnabled(Track.Source.Microphone, enabled, options, publishOptions);\r\n  }\r\n  /**\r\n   * Start or stop sharing a participant's screen\r\n   * Resolves with a `LocalTrackPublication` instance if successful and `undefined` otherwise\r\n   */\r\n  setScreenShareEnabled(enabled, options, publishOptions) {\r\n    return this.setTrackEnabled(Track.Source.ScreenShare, enabled, options, publishOptions);\r\n  }\r\n  /** @internal */\r\n  setPermissions(permissions) {\r\n    const prevPermissions = this.permissions;\r\n    const changed = super.setPermissions(permissions);\r\n    if (changed && prevPermissions) {\r\n      this.emit(ParticipantEvent.ParticipantPermissionsChanged, prevPermissions);\r\n    }\r\n    return changed;\r\n  }\r\n  /** @internal */\r\n  setE2EEEnabled(enabled) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.encryptionType = enabled ? Encryption_Type.GCM : Encryption_Type.NONE;\r\n      yield this.republishAllTracks(undefined, false);\r\n    });\r\n  }\r\n  setTrackEnabled(source, enabled, options, publishOptions) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      this.log.debug('setTrackEnabled', Object.assign(Object.assign({}, this.logContext), {\r\n        source,\r\n        enabled\r\n      }));\r\n      if (this.republishPromise) {\r\n        yield this.republishPromise;\r\n      }\r\n      let track = this.getTrackPublication(source);\r\n      if (enabled) {\r\n        if (track) {\r\n          yield track.unmute();\r\n        } else {\r\n          let localTracks;\r\n          if (this.pendingPublishing.has(source)) {\r\n            const pendingTrack = yield this.waitForPendingPublicationOfSource(source);\r\n            if (!pendingTrack) {\r\n              this.log.info('waiting for pending publication promise timed out', Object.assign(Object.assign({}, this.logContext), {\r\n                source\r\n              }));\r\n            }\r\n            yield pendingTrack === null || pendingTrack === void 0 ? void 0 : pendingTrack.unmute();\r\n            return pendingTrack;\r\n          }\r\n          this.pendingPublishing.add(source);\r\n          try {\r\n            switch (source) {\r\n              case Track.Source.Camera:\r\n                localTracks = yield this.createTracks({\r\n                  video: (_a = options) !== null && _a !== void 0 ? _a : true\r\n                });\r\n                break;\r\n              case Track.Source.Microphone:\r\n                localTracks = yield this.createTracks({\r\n                  audio: (_b = options) !== null && _b !== void 0 ? _b : true\r\n                });\r\n                break;\r\n              case Track.Source.ScreenShare:\r\n                localTracks = yield this.createScreenTracks(Object.assign({}, options));\r\n                break;\r\n              default:\r\n                throw new TrackInvalidError(source);\r\n            }\r\n          } catch (e) {\r\n            localTracks === null || localTracks === void 0 ? void 0 : localTracks.forEach(tr => {\r\n              tr.stop();\r\n            });\r\n            if (e instanceof Error) {\r\n              this.emit(ParticipantEvent.MediaDevicesError, e, sourceToKind(source));\r\n            }\r\n            this.pendingPublishing.delete(source);\r\n            throw e;\r\n          }\r\n          for (const localTrack of localTracks) {\r\n            if (source === Track.Source.Microphone && isAudioTrack(localTrack) && (publishOptions === null || publishOptions === void 0 ? void 0 : publishOptions.preConnectBuffer)) {\r\n              this.log.info('starting preconnect buffer for microphone', Object.assign({}, this.logContext));\r\n              localTrack.startPreConnectBuffer();\r\n            }\r\n          }\r\n          try {\r\n            const publishPromises = [];\r\n            for (const localTrack of localTracks) {\r\n              this.log.info('publishing track', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(localTrack)));\r\n              publishPromises.push(this.publishTrack(localTrack, publishOptions));\r\n            }\r\n            const publishedTracks = yield Promise.all(publishPromises);\r\n            // for screen share publications including audio, this will only return the screen share publication, not the screen share audio one\r\n            // revisit if we want to return an array of tracks instead for v2\r\n            [track] = publishedTracks;\r\n          } catch (e) {\r\n            localTracks === null || localTracks === void 0 ? void 0 : localTracks.forEach(tr => {\r\n              tr.stop();\r\n            });\r\n            throw e;\r\n          } finally {\r\n            this.pendingPublishing.delete(source);\r\n          }\r\n        }\r\n      } else {\r\n        if (!(track === null || track === void 0 ? void 0 : track.track) && this.pendingPublishing.has(source)) {\r\n          // if there's no track available yet first wait for pending publishing promises of that source to see if it becomes available\r\n          track = yield this.waitForPendingPublicationOfSource(source);\r\n          if (!track) {\r\n            this.log.info('waiting for pending publication promise timed out', Object.assign(Object.assign({}, this.logContext), {\r\n              source\r\n            }));\r\n          }\r\n        }\r\n        if (track && track.track) {\r\n          // screenshare cannot be muted, unpublish instead\r\n          if (source === Track.Source.ScreenShare) {\r\n            track = yield this.unpublishTrack(track.track);\r\n            const screenAudioTrack = this.getTrackPublication(Track.Source.ScreenShareAudio);\r\n            if (screenAudioTrack && screenAudioTrack.track) {\r\n              this.unpublishTrack(screenAudioTrack.track);\r\n            }\r\n          } else {\r\n            yield track.mute();\r\n          }\r\n        }\r\n      }\r\n      return track;\r\n    });\r\n  }\r\n  /**\r\n   * Publish both camera and microphone at the same time. This is useful for\r\n   * displaying a single Permission Dialog box to the end user.\r\n   */\r\n  enableCameraAndMicrophone() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.pendingPublishing.has(Track.Source.Camera) || this.pendingPublishing.has(Track.Source.Microphone)) {\r\n        // no-op it's already been requested\r\n        return;\r\n      }\r\n      this.pendingPublishing.add(Track.Source.Camera);\r\n      this.pendingPublishing.add(Track.Source.Microphone);\r\n      try {\r\n        const tracks = yield this.createTracks({\r\n          audio: true,\r\n          video: true\r\n        });\r\n        yield Promise.all(tracks.map(track => this.publishTrack(track)));\r\n      } finally {\r\n        this.pendingPublishing.delete(Track.Source.Camera);\r\n        this.pendingPublishing.delete(Track.Source.Microphone);\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Create local camera and/or microphone tracks\r\n   * @param options\r\n   * @returns\r\n   */\r\n  createTracks(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      options !== null && options !== void 0 ? options : options = {};\r\n      const mergedOptionsWithProcessors = mergeDefaultOptions(options, (_a = this.roomOptions) === null || _a === void 0 ? void 0 : _a.audioCaptureDefaults, (_b = this.roomOptions) === null || _b === void 0 ? void 0 : _b.videoCaptureDefaults);\r\n      try {\r\n        const tracks = yield createLocalTracks(mergedOptionsWithProcessors, {\r\n          loggerName: this.roomOptions.loggerName,\r\n          loggerContextCb: () => this.logContext\r\n        });\r\n        const localTracks = tracks.map(track => {\r\n          if (isAudioTrack(track)) {\r\n            this.microphoneError = undefined;\r\n            track.setAudioContext(this.audioContext);\r\n            track.source = Track.Source.Microphone;\r\n            this.emit(ParticipantEvent.AudioStreamAcquired);\r\n          }\r\n          if (isVideoTrack(track)) {\r\n            this.cameraError = undefined;\r\n            track.source = Track.Source.Camera;\r\n          }\r\n          return track;\r\n        });\r\n        return localTracks;\r\n      } catch (err) {\r\n        if (err instanceof Error) {\r\n          if (options.audio) {\r\n            this.microphoneError = err;\r\n          }\r\n          if (options.video) {\r\n            this.cameraError = err;\r\n          }\r\n        }\r\n        throw err;\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Creates a screen capture tracks with getDisplayMedia().\r\n   * A LocalVideoTrack is always created and returned.\r\n   * If { audio: true }, and the browser supports audio capture, a LocalAudioTrack is also created.\r\n   */\r\n  createScreenTracks(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (options === undefined) {\r\n        options = {};\r\n      }\r\n      if (navigator.mediaDevices.getDisplayMedia === undefined) {\r\n        throw new DeviceUnsupportedError('getDisplayMedia not supported');\r\n      }\r\n      if (options.resolution === undefined && !isSafari17()) {\r\n        // we need to constrain the dimensions, otherwise it could lead to low bitrate\r\n        // due to encoding a huge video. Encoding such large surfaces is really expensive\r\n        // unfortunately Safari 17 has a but and cannot be constrained by default\r\n        options.resolution = ScreenSharePresets.h1080fps30.resolution;\r\n      }\r\n      const constraints = screenCaptureToDisplayMediaStreamOptions(options);\r\n      const stream = yield navigator.mediaDevices.getDisplayMedia(constraints);\r\n      const tracks = stream.getVideoTracks();\r\n      if (tracks.length === 0) {\r\n        throw new TrackInvalidError('no video track found');\r\n      }\r\n      const screenVideo = new LocalVideoTrack(tracks[0], undefined, false, {\r\n        loggerName: this.roomOptions.loggerName,\r\n        loggerContextCb: () => this.logContext\r\n      });\r\n      screenVideo.source = Track.Source.ScreenShare;\r\n      if (options.contentHint) {\r\n        screenVideo.mediaStreamTrack.contentHint = options.contentHint;\r\n      }\r\n      const localTracks = [screenVideo];\r\n      if (stream.getAudioTracks().length > 0) {\r\n        this.emit(ParticipantEvent.AudioStreamAcquired);\r\n        const screenAudio = new LocalAudioTrack(stream.getAudioTracks()[0], undefined, false, this.audioContext, {\r\n          loggerName: this.roomOptions.loggerName,\r\n          loggerContextCb: () => this.logContext\r\n        });\r\n        screenAudio.source = Track.Source.ScreenShareAudio;\r\n        localTracks.push(screenAudio);\r\n      }\r\n      return localTracks;\r\n    });\r\n  }\r\n  /**\r\n   * Publish a new track to the room\r\n   * @param track\r\n   * @param options\r\n   */\r\n  publishTrack(track, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.publishOrRepublishTrack(track, options);\r\n    });\r\n  }\r\n  publishOrRepublishTrack(track_1, options_1) {\r\n    return __awaiter(this, arguments, void 0, function (track, options) {\r\n      var _this2 = this;\r\n      let isRepublish = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\r\n      return function* () {\r\n        var _a, _b, _c, _d;\r\n        if (isLocalAudioTrack(track)) {\r\n          track.setAudioContext(_this2.audioContext);\r\n        }\r\n        yield (_a = _this2.reconnectFuture) === null || _a === void 0 ? void 0 : _a.promise;\r\n        if (_this2.republishPromise && !isRepublish) {\r\n          yield _this2.republishPromise;\r\n        }\r\n        if (isLocalTrack(track) && _this2.pendingPublishPromises.has(track)) {\r\n          yield _this2.pendingPublishPromises.get(track);\r\n        }\r\n        let defaultConstraints;\r\n        if (track instanceof MediaStreamTrack) {\r\n          defaultConstraints = track.getConstraints();\r\n        } else {\r\n          // we want to access constraints directly as `track.mediaStreamTrack`\r\n          // might be pointing to a non-device track (e.g. processed track) already\r\n          defaultConstraints = track.constraints;\r\n          let deviceKind = undefined;\r\n          switch (track.source) {\r\n            case Track.Source.Microphone:\r\n              deviceKind = 'audioinput';\r\n              break;\r\n            case Track.Source.Camera:\r\n              deviceKind = 'videoinput';\r\n          }\r\n          if (deviceKind && _this2.activeDeviceMap.has(deviceKind)) {\r\n            defaultConstraints = Object.assign(Object.assign({}, defaultConstraints), {\r\n              deviceId: _this2.activeDeviceMap.get(deviceKind)\r\n            });\r\n          }\r\n        }\r\n        // convert raw media track into audio or video track\r\n        if (track instanceof MediaStreamTrack) {\r\n          switch (track.kind) {\r\n            case 'audio':\r\n              track = new LocalAudioTrack(track, defaultConstraints, true, _this2.audioContext, {\r\n                loggerName: _this2.roomOptions.loggerName,\r\n                loggerContextCb: () => _this2.logContext\r\n              });\r\n              break;\r\n            case 'video':\r\n              track = new LocalVideoTrack(track, defaultConstraints, true, {\r\n                loggerName: _this2.roomOptions.loggerName,\r\n                loggerContextCb: () => _this2.logContext\r\n              });\r\n              break;\r\n            default:\r\n              throw new TrackInvalidError(\"unsupported MediaStreamTrack kind \".concat(track.kind));\r\n          }\r\n        } else {\r\n          track.updateLoggerOptions({\r\n            loggerName: _this2.roomOptions.loggerName,\r\n            loggerContextCb: () => _this2.logContext\r\n          });\r\n        }\r\n        // is it already published? if so skip\r\n        let existingPublication;\r\n        _this2.trackPublications.forEach(publication => {\r\n          if (!publication.track) {\r\n            return;\r\n          }\r\n          if (publication.track === track) {\r\n            existingPublication = publication;\r\n          }\r\n        });\r\n        if (existingPublication) {\r\n          _this2.log.warn('track has already been published, skipping', Object.assign(Object.assign({}, _this2.logContext), getLogContextFromTrack(existingPublication)));\r\n          return existingPublication;\r\n        }\r\n        const isStereoInput = 'channelCount' in track.mediaStreamTrack.getSettings() &&\r\n        // @ts-ignore `channelCount` on getSettings() is currently only available for Safari, but is generally the best way to determine a stereo track https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/channelCount\r\n        track.mediaStreamTrack.getSettings().channelCount === 2 || track.mediaStreamTrack.getConstraints().channelCount === 2;\r\n        const isStereo = (_b = options === null || options === void 0 ? void 0 : options.forceStereo) !== null && _b !== void 0 ? _b : isStereoInput;\r\n        // disable dtx for stereo track if not enabled explicitly\r\n        if (isStereo) {\r\n          if (!options) {\r\n            options = {};\r\n          }\r\n          if (options.dtx === undefined) {\r\n            _this2.log.info(\"Opus DTX will be disabled for stereo tracks by default. Enable them explicitly to make it work.\", Object.assign(Object.assign({}, _this2.logContext), getLogContextFromTrack(track)));\r\n          }\r\n          if (options.red === undefined) {\r\n            _this2.log.info(\"Opus RED will be disabled for stereo tracks by default. Enable them explicitly to make it work.\");\r\n          }\r\n          (_c = options.dtx) !== null && _c !== void 0 ? _c : options.dtx = false;\r\n          (_d = options.red) !== null && _d !== void 0 ? _d : options.red = false;\r\n        }\r\n        const opts = Object.assign(Object.assign({}, _this2.roomOptions.publishDefaults), options);\r\n        if (!isE2EESimulcastSupported() && _this2.roomOptions.e2ee) {\r\n          _this2.log.info(\"End-to-end encryption is set up, simulcast publishing will be disabled on Safari versions and iOS browsers running iOS < v17.2\", Object.assign({}, _this2.logContext));\r\n          opts.simulcast = false;\r\n        }\r\n        if (opts.source) {\r\n          track.source = opts.source;\r\n        }\r\n        const publishPromise = new Promise((resolve, reject) => __awaiter(_this2, void 0, void 0, function* () {\r\n          try {\r\n            if (this.engine.client.currentState !== SignalConnectionState.CONNECTED) {\r\n              this.log.debug('deferring track publication until signal is connected', Object.assign(Object.assign({}, this.logContext), {\r\n                track: getLogContextFromTrack(track)\r\n              }));\r\n              const timeout = setTimeout(() => {\r\n                reject(new PublishTrackError('publishing rejected as engine not connected within timeout', 408));\r\n              }, 15000);\r\n              yield this.waitUntilEngineConnected();\r\n              clearTimeout(timeout);\r\n              const publication = yield this.publish(track, opts, isStereo);\r\n              resolve(publication);\r\n            } else {\r\n              try {\r\n                const publication = yield this.publish(track, opts, isStereo);\r\n                resolve(publication);\r\n              } catch (e) {\r\n                reject(e);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        }));\r\n        _this2.pendingPublishPromises.set(track, publishPromise);\r\n        try {\r\n          const publication = yield publishPromise;\r\n          return publication;\r\n        } catch (e) {\r\n          throw e;\r\n        } finally {\r\n          _this2.pendingPublishPromises.delete(track);\r\n        }\r\n      }();\r\n    });\r\n  }\r\n  waitUntilEngineConnected() {\r\n    if (!this.signalConnectedFuture) {\r\n      this.signalConnectedFuture = new Future();\r\n    }\r\n    return this.signalConnectedFuture.promise;\r\n  }\r\n  hasPermissionsToPublish(track) {\r\n    if (!this.permissions) {\r\n      this.log.warn('no permissions present for publishing track', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n      return false;\r\n    }\r\n    const {\r\n      canPublish,\r\n      canPublishSources\r\n    } = this.permissions;\r\n    if (canPublish && (canPublishSources.length === 0 || canPublishSources.map(source => getTrackSourceFromProto(source)).includes(track.source))) {\r\n      return true;\r\n    }\r\n    this.log.warn('insufficient permissions to publish', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n    return false;\r\n  }\r\n  publish(track, opts, isStereo) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\r\n      if (!this.hasPermissionsToPublish(track)) {\r\n        throw new PublishTrackError('failed to publish track, insufficient permissions', 403);\r\n      }\r\n      const existingTrackOfSource = Array.from(this.trackPublications.values()).find(publishedTrack => isLocalTrack(track) && publishedTrack.source === track.source);\r\n      if (existingTrackOfSource && track.source !== Track.Source.Unknown) {\r\n        this.log.info(\"publishing a second track with the same source: \".concat(track.source), Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n      }\r\n      if (opts.stopMicTrackOnMute && isAudioTrack(track)) {\r\n        track.stopOnMute = true;\r\n      }\r\n      if (track.source === Track.Source.ScreenShare && isFireFox()) {\r\n        // Firefox does not work well with simulcasted screen share\r\n        // we frequently get no data on layer 0 when enabled\r\n        opts.simulcast = false;\r\n      }\r\n      // require full AV1/VP9 SVC support prior to using it\r\n      if (opts.videoCodec === 'av1' && !supportsAV1()) {\r\n        opts.videoCodec = undefined;\r\n      }\r\n      if (opts.videoCodec === 'vp9' && !supportsVP9()) {\r\n        opts.videoCodec = undefined;\r\n      }\r\n      if (opts.videoCodec === undefined) {\r\n        opts.videoCodec = defaultVideoCodec;\r\n      }\r\n      if (this.enabledPublishVideoCodecs.length > 0) {\r\n        // fallback to a supported codec if it is not supported\r\n        if (!this.enabledPublishVideoCodecs.some(c => opts.videoCodec === mimeTypeToVideoCodecString(c.mime))) {\r\n          opts.videoCodec = mimeTypeToVideoCodecString(this.enabledPublishVideoCodecs[0].mime);\r\n        }\r\n      }\r\n      const videoCodec = opts.videoCodec;\r\n      // handle track actions\r\n      track.on(TrackEvent.Muted, this.onTrackMuted);\r\n      track.on(TrackEvent.Unmuted, this.onTrackUnmuted);\r\n      track.on(TrackEvent.Ended, this.handleTrackEnded);\r\n      track.on(TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused);\r\n      track.on(TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed);\r\n      track.on(TrackEvent.AudioTrackFeatureUpdate, this.onTrackFeatureUpdate);\r\n      const audioFeatures = [];\r\n      const disableDtx = !((_a = opts.dtx) !== null && _a !== void 0 ? _a : true);\r\n      const settings = track.getSourceTrackSettings();\r\n      if (settings.autoGainControl) {\r\n        audioFeatures.push(AudioTrackFeature.TF_AUTO_GAIN_CONTROL);\r\n      }\r\n      if (settings.echoCancellation) {\r\n        audioFeatures.push(AudioTrackFeature.TF_ECHO_CANCELLATION);\r\n      }\r\n      if (settings.noiseSuppression) {\r\n        audioFeatures.push(AudioTrackFeature.TF_NOISE_SUPPRESSION);\r\n      }\r\n      if (settings.channelCount && settings.channelCount > 1) {\r\n        audioFeatures.push(AudioTrackFeature.TF_STEREO);\r\n      }\r\n      if (disableDtx) {\r\n        audioFeatures.push(AudioTrackFeature.TF_NO_DTX);\r\n      }\r\n      if (isLocalAudioTrack(track) && track.hasPreConnectBuffer) {\r\n        audioFeatures.push(AudioTrackFeature.TF_PRECONNECT_BUFFER);\r\n      }\r\n      // create track publication from track\r\n      const req = new AddTrackRequest({\r\n        // get local track id for use during publishing\r\n        cid: track.mediaStreamTrack.id,\r\n        name: opts.name,\r\n        type: Track.kindToProto(track.kind),\r\n        muted: track.isMuted,\r\n        source: Track.sourceToProto(track.source),\r\n        disableDtx,\r\n        encryption: this.encryptionType,\r\n        stereo: isStereo,\r\n        disableRed: this.isE2EEEnabled || !((_b = opts.red) !== null && _b !== void 0 ? _b : true),\r\n        stream: opts === null || opts === void 0 ? void 0 : opts.stream,\r\n        backupCodecPolicy: opts === null || opts === void 0 ? void 0 : opts.backupCodecPolicy,\r\n        audioFeatures\r\n      });\r\n      // compute encodings and layers for video\r\n      let encodings;\r\n      if (track.kind === Track.Kind.Video) {\r\n        let dims = {\r\n          width: 0,\r\n          height: 0\r\n        };\r\n        try {\r\n          dims = yield track.waitForDimensions();\r\n        } catch (e) {\r\n          // use defaults, it's quite painful for congestion control without simulcast\r\n          // so using default dims according to publish settings\r\n          const defaultRes = (_d = (_c = this.roomOptions.videoCaptureDefaults) === null || _c === void 0 ? void 0 : _c.resolution) !== null && _d !== void 0 ? _d : VideoPresets.h720.resolution;\r\n          dims = {\r\n            width: defaultRes.width,\r\n            height: defaultRes.height\r\n          };\r\n          // log failure\r\n          this.log.error('could not determine track dimensions, using defaults', Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)), {\r\n            dims\r\n          }));\r\n        }\r\n        // width and height should be defined for video\r\n        req.width = dims.width;\r\n        req.height = dims.height;\r\n        // for svc codecs, disable simulcast and use vp8 for backup codec\r\n        if (isLocalVideoTrack(track)) {\r\n          if (isSVCCodec(videoCodec)) {\r\n            if (track.source === Track.Source.ScreenShare) {\r\n              // vp9 svc with screenshare cannot encode multiple spatial layers\r\n              // doing so reduces publish resolution to minimal resolution\r\n              opts.scalabilityMode = 'L1T3';\r\n              // Chrome does not allow more than 5 fps with L1T3, and it has encoding bugs with L3T3\r\n              // It has a different path for screenshare handling and it seems to be untested/buggy\r\n              // As a workaround, we are setting contentHint to force it to go through the same\r\n              // path as regular camera video. While this is not optimal, it delivers the performance\r\n              // that we need\r\n              if ('contentHint' in track.mediaStreamTrack) {\r\n                track.mediaStreamTrack.contentHint = 'motion';\r\n                this.log.info('forcing contentHint to motion for screenshare with SVC codecs', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n              }\r\n            }\r\n            // set scalabilityMode to 'L3T3_KEY' by default\r\n            opts.scalabilityMode = (_e = opts.scalabilityMode) !== null && _e !== void 0 ? _e : 'L3T3_KEY';\r\n          }\r\n          req.simulcastCodecs = [new SimulcastCodec({\r\n            codec: videoCodec,\r\n            cid: track.mediaStreamTrack.id\r\n          })];\r\n          // set up backup\r\n          if (opts.backupCodec === true) {\r\n            opts.backupCodec = {\r\n              codec: defaultVideoCodec\r\n            };\r\n          }\r\n          if (opts.backupCodec && videoCodec !== opts.backupCodec.codec &&\r\n          // TODO remove this once e2ee is supported for backup codecs\r\n          req.encryption === Encryption_Type.NONE) {\r\n            // multi-codec simulcast requires dynacast\r\n            if (!this.roomOptions.dynacast) {\r\n              this.roomOptions.dynacast = true;\r\n            }\r\n            req.simulcastCodecs.push(new SimulcastCodec({\r\n              codec: opts.backupCodec.codec,\r\n              cid: ''\r\n            }));\r\n          }\r\n        }\r\n        encodings = computeVideoEncodings(track.source === Track.Source.ScreenShare, req.width, req.height, opts);\r\n        req.layers = videoLayersFromEncodings(req.width, req.height, encodings, isSVCCodec(opts.videoCodec));\r\n      } else if (track.kind === Track.Kind.Audio) {\r\n        encodings = [{\r\n          maxBitrate: (_f = opts.audioPreset) === null || _f === void 0 ? void 0 : _f.maxBitrate,\r\n          priority: (_h = (_g = opts.audioPreset) === null || _g === void 0 ? void 0 : _g.priority) !== null && _h !== void 0 ? _h : 'high',\r\n          networkPriority: (_k = (_j = opts.audioPreset) === null || _j === void 0 ? void 0 : _j.priority) !== null && _k !== void 0 ? _k : 'high'\r\n        }];\r\n      }\r\n      if (!this.engine || this.engine.isClosed) {\r\n        throw new UnexpectedConnectionState('cannot publish track when not connected');\r\n      }\r\n      const negotiate = () => __awaiter(this, void 0, void 0, function* () {\r\n        var _a, _b, _c;\r\n        if (!this.engine.pcManager) {\r\n          throw new UnexpectedConnectionState('pcManager is not ready');\r\n        }\r\n        track.sender = yield this.engine.createSender(track, opts, encodings);\r\n        if (isLocalVideoTrack(track)) {\r\n          (_a = opts.degradationPreference) !== null && _a !== void 0 ? _a : opts.degradationPreference = getDefaultDegradationPreference(track);\r\n          track.setDegradationPreference(opts.degradationPreference);\r\n        }\r\n        if (encodings) {\r\n          if (isFireFox() && track.kind === Track.Kind.Audio) {\r\n            /* Refer to RFC https://datatracker.ietf.org/doc/html/rfc7587#section-6.1,\r\n               livekit-server uses maxaveragebitrate=510000 in the answer sdp to permit client to\r\n               publish high quality audio track. But firefox always uses this value as the actual\r\n               bitrates, causing the audio bitrates to rise to 510Kbps in any stereo case unexpectedly.\r\n               So the client need to modify maxaverragebitrates in answer sdp to user provided value to\r\n               fix the issue.\r\n             */\r\n            let trackTransceiver = undefined;\r\n            for (const transceiver of this.engine.pcManager.publisher.getTransceivers()) {\r\n              if (transceiver.sender === track.sender) {\r\n                trackTransceiver = transceiver;\r\n                break;\r\n              }\r\n            }\r\n            if (trackTransceiver) {\r\n              this.engine.pcManager.publisher.setTrackCodecBitrate({\r\n                transceiver: trackTransceiver,\r\n                codec: 'opus',\r\n                maxbr: ((_b = encodings[0]) === null || _b === void 0 ? void 0 : _b.maxBitrate) ? encodings[0].maxBitrate / 1000 : 0\r\n              });\r\n            }\r\n          } else if (track.codec && isSVCCodec(track.codec) && ((_c = encodings[0]) === null || _c === void 0 ? void 0 : _c.maxBitrate)) {\r\n            this.engine.pcManager.publisher.setTrackCodecBitrate({\r\n              cid: req.cid,\r\n              codec: track.codec,\r\n              maxbr: encodings[0].maxBitrate / 1000\r\n            });\r\n          }\r\n        }\r\n        yield this.engine.negotiate();\r\n      });\r\n      let ti;\r\n      const addTrackPromise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n        var _a;\r\n        try {\r\n          ti = yield this.engine.addTrack(req);\r\n          resolve(ti);\r\n        } catch (err) {\r\n          if (track.sender && ((_a = this.engine.pcManager) === null || _a === void 0 ? void 0 : _a.publisher)) {\r\n            this.engine.pcManager.publisher.removeTrack(track.sender);\r\n            yield this.engine.negotiate().catch(negotiateErr => {\r\n              this.log.error('failed to negotiate after removing track due to failed add track request', Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)), {\r\n                error: negotiateErr\r\n              }));\r\n            });\r\n          }\r\n          reject(err);\r\n        }\r\n      }));\r\n      if (this.enabledPublishVideoCodecs.length > 0) {\r\n        const rets = yield Promise.all([addTrackPromise, negotiate()]);\r\n        ti = rets[0];\r\n      } else {\r\n        ti = yield addTrackPromise;\r\n        // server might not support the codec the client has requested, in that case, fallback\r\n        // to a supported codec\r\n        let primaryCodecMime;\r\n        ti.codecs.forEach(codec => {\r\n          if (primaryCodecMime === undefined) {\r\n            primaryCodecMime = codec.mimeType;\r\n          }\r\n        });\r\n        if (primaryCodecMime && track.kind === Track.Kind.Video) {\r\n          const updatedCodec = mimeTypeToVideoCodecString(primaryCodecMime);\r\n          if (updatedCodec !== videoCodec) {\r\n            this.log.debug('falling back to server selected codec', Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)), {\r\n              codec: updatedCodec\r\n            }));\r\n            opts.videoCodec = updatedCodec;\r\n            // recompute encodings since bitrates/etc could have changed\r\n            encodings = computeVideoEncodings(track.source === Track.Source.ScreenShare, req.width, req.height, opts);\r\n          }\r\n        }\r\n        yield negotiate();\r\n      }\r\n      const publication = new LocalTrackPublication(track.kind, ti, track, {\r\n        loggerName: this.roomOptions.loggerName,\r\n        loggerContextCb: () => this.logContext\r\n      });\r\n      // save options for when it needs to be republished again\r\n      publication.options = opts;\r\n      track.sid = ti.sid;\r\n      this.log.debug(\"publishing \".concat(track.kind, \" with encodings\"), Object.assign(Object.assign({}, this.logContext), {\r\n        encodings,\r\n        trackInfo: ti\r\n      }));\r\n      if (isLocalVideoTrack(track)) {\r\n        track.startMonitor(this.engine.client);\r\n      } else if (isLocalAudioTrack(track)) {\r\n        track.startMonitor();\r\n      }\r\n      this.addTrackPublication(publication);\r\n      // send event for publication\r\n      this.emit(ParticipantEvent.LocalTrackPublished, publication);\r\n      if (isLocalAudioTrack(track) && ti.audioFeatures.includes(AudioTrackFeature.TF_PRECONNECT_BUFFER)) {\r\n        const stream = track.getPreConnectBuffer();\r\n        // TODO: we're registering the listener after negotiation, so there might be a race\r\n        this.on(ParticipantEvent.LocalTrackSubscribed, pub => {\r\n          if (pub.trackSid === ti.sid) {\r\n            if (!track.hasPreConnectBuffer) {\r\n              this.log.warn('subscribe event came to late, buffer already closed', this.logContext);\r\n              return;\r\n            }\r\n            this.log.debug('finished recording preconnect buffer', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n            track.stopPreConnectBuffer();\r\n          }\r\n        });\r\n        if (stream) {\r\n          const bufferStreamPromise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\r\n            var _a, e_2, _b, _c;\r\n            var _d, _e;\r\n            try {\r\n              this.log.debug('waiting for agent', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n              const agentActiveTimeout = setTimeout(() => {\r\n                reject(new Error('agent not active within 10 seconds'));\r\n              }, 10000);\r\n              const agent = yield this.waitUntilActiveAgentPresent();\r\n              clearTimeout(agentActiveTimeout);\r\n              this.log.debug('sending preconnect buffer', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n              const writer = yield this.streamBytes({\r\n                name: 'preconnect-buffer',\r\n                mimeType: 'audio/opus',\r\n                topic: 'lk.agent.pre-connect-audio-buffer',\r\n                destinationIdentities: [agent.identity],\r\n                attributes: {\r\n                  trackId: publication.trackSid,\r\n                  sampleRate: String((_d = settings.sampleRate) !== null && _d !== void 0 ? _d : '48000'),\r\n                  channels: String((_e = settings.channelCount) !== null && _e !== void 0 ? _e : '1')\r\n                }\r\n              });\r\n              try {\r\n                for (var _f = true, stream_1 = __asyncValues(stream), stream_1_1; stream_1_1 = yield stream_1.next(), _a = stream_1_1.done, !_a; _f = true) {\r\n                  _c = stream_1_1.value;\r\n                  _f = false;\r\n                  const chunk = _c;\r\n                  yield writer.write(chunk);\r\n                }\r\n              } catch (e_2_1) {\r\n                e_2 = {\r\n                  error: e_2_1\r\n                };\r\n              } finally {\r\n                try {\r\n                  if (!_f && !_a && (_b = stream_1.return)) yield _b.call(stream_1);\r\n                } finally {\r\n                  if (e_2) throw e_2.error;\r\n                }\r\n              }\r\n              yield writer.close();\r\n              resolve();\r\n            } catch (e) {\r\n              reject(e);\r\n            }\r\n          }));\r\n          bufferStreamPromise.then(() => {\r\n            this.log.debug('preconnect buffer sent successfully', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n          }).catch(e => {\r\n            this.log.error('error sending preconnect buffer', Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)), {\r\n              error: e\r\n            }));\r\n          });\r\n        }\r\n      }\r\n      return publication;\r\n    });\r\n  }\r\n  get isLocal() {\r\n    return true;\r\n  }\r\n  /** @internal\r\n   * publish additional codec to existing track\r\n   */\r\n  publishAdditionalCodecForTrack(track, videoCodec, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      // TODO remove once e2ee is supported for backup tracks\r\n      if (this.encryptionType !== Encryption_Type.NONE) {\r\n        return;\r\n      }\r\n      // is it not published? if so skip\r\n      let existingPublication;\r\n      this.trackPublications.forEach(publication => {\r\n        if (!publication.track) {\r\n          return;\r\n        }\r\n        if (publication.track === track) {\r\n          existingPublication = publication;\r\n        }\r\n      });\r\n      if (!existingPublication) {\r\n        throw new TrackInvalidError('track is not published');\r\n      }\r\n      if (!isLocalVideoTrack(track)) {\r\n        throw new TrackInvalidError('track is not a video track');\r\n      }\r\n      const opts = Object.assign(Object.assign({}, (_a = this.roomOptions) === null || _a === void 0 ? void 0 : _a.publishDefaults), options);\r\n      const encodings = computeTrackBackupEncodings(track, videoCodec, opts);\r\n      if (!encodings) {\r\n        this.log.info(\"backup codec has been disabled, ignoring request to add additional codec for track\", Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n        return;\r\n      }\r\n      const simulcastTrack = track.addSimulcastTrack(videoCodec, encodings);\r\n      if (!simulcastTrack) {\r\n        return;\r\n      }\r\n      const req = new AddTrackRequest({\r\n        cid: simulcastTrack.mediaStreamTrack.id,\r\n        type: Track.kindToProto(track.kind),\r\n        muted: track.isMuted,\r\n        source: Track.sourceToProto(track.source),\r\n        sid: track.sid,\r\n        simulcastCodecs: [{\r\n          codec: opts.videoCodec,\r\n          cid: simulcastTrack.mediaStreamTrack.id\r\n        }]\r\n      });\r\n      req.layers = videoLayersFromEncodings(req.width, req.height, encodings);\r\n      if (!this.engine || this.engine.isClosed) {\r\n        throw new UnexpectedConnectionState('cannot publish track when not connected');\r\n      }\r\n      const negotiate = () => __awaiter(this, void 0, void 0, function* () {\r\n        yield this.engine.createSimulcastSender(track, simulcastTrack, opts, encodings);\r\n        yield this.engine.negotiate();\r\n      });\r\n      const rets = yield Promise.all([this.engine.addTrack(req), negotiate()]);\r\n      const ti = rets[0];\r\n      this.log.debug(\"published \".concat(videoCodec, \" for track \").concat(track.sid), Object.assign(Object.assign({}, this.logContext), {\r\n        encodings,\r\n        trackInfo: ti\r\n      }));\r\n    });\r\n  }\r\n  unpublishTrack(track, stopOnUnpublish) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      if (isLocalTrack(track)) {\r\n        const publishPromise = this.pendingPublishPromises.get(track);\r\n        if (publishPromise) {\r\n          this.log.info('awaiting publish promise before attempting to unpublish', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(track)));\r\n          yield publishPromise;\r\n        }\r\n      }\r\n      // look through all published tracks to find the right ones\r\n      const publication = this.getPublicationForTrack(track);\r\n      const pubLogContext = publication ? getLogContextFromTrack(publication) : undefined;\r\n      this.log.debug('unpublishing track', Object.assign(Object.assign({}, this.logContext), pubLogContext));\r\n      if (!publication || !publication.track) {\r\n        this.log.warn('track was not unpublished because no publication was found', Object.assign(Object.assign({}, this.logContext), pubLogContext));\r\n        return undefined;\r\n      }\r\n      track = publication.track;\r\n      track.off(TrackEvent.Muted, this.onTrackMuted);\r\n      track.off(TrackEvent.Unmuted, this.onTrackUnmuted);\r\n      track.off(TrackEvent.Ended, this.handleTrackEnded);\r\n      track.off(TrackEvent.UpstreamPaused, this.onTrackUpstreamPaused);\r\n      track.off(TrackEvent.UpstreamResumed, this.onTrackUpstreamResumed);\r\n      track.off(TrackEvent.AudioTrackFeatureUpdate, this.onTrackFeatureUpdate);\r\n      if (stopOnUnpublish === undefined) {\r\n        stopOnUnpublish = (_b = (_a = this.roomOptions) === null || _a === void 0 ? void 0 : _a.stopLocalTrackOnUnpublish) !== null && _b !== void 0 ? _b : true;\r\n      }\r\n      if (stopOnUnpublish) {\r\n        track.stop();\r\n      } else {\r\n        track.stopMonitor();\r\n      }\r\n      let negotiationNeeded = false;\r\n      const trackSender = track.sender;\r\n      track.sender = undefined;\r\n      if (this.engine.pcManager && this.engine.pcManager.currentState < PCTransportState.FAILED && trackSender) {\r\n        try {\r\n          for (const transceiver of this.engine.pcManager.publisher.getTransceivers()) {\r\n            // if sender is not currently sending (after replaceTrack(null))\r\n            // removeTrack would have no effect.\r\n            // to ensure we end up successfully removing the track, manually set\r\n            // the transceiver to inactive\r\n            if (transceiver.sender === trackSender) {\r\n              transceiver.direction = 'inactive';\r\n              negotiationNeeded = true;\r\n            }\r\n          }\r\n          if (this.engine.removeTrack(trackSender)) {\r\n            negotiationNeeded = true;\r\n          }\r\n          if (isLocalVideoTrack(track)) {\r\n            for (const [, trackInfo] of track.simulcastCodecs) {\r\n              if (trackInfo.sender) {\r\n                if (this.engine.removeTrack(trackInfo.sender)) {\r\n                  negotiationNeeded = true;\r\n                }\r\n                trackInfo.sender = undefined;\r\n              }\r\n            }\r\n            track.simulcastCodecs.clear();\r\n          }\r\n        } catch (e) {\r\n          this.log.warn('failed to unpublish track', Object.assign(Object.assign(Object.assign({}, this.logContext), pubLogContext), {\r\n            error: e\r\n          }));\r\n        }\r\n      }\r\n      // remove from our maps\r\n      this.trackPublications.delete(publication.trackSid);\r\n      switch (publication.kind) {\r\n        case Track.Kind.Audio:\r\n          this.audioTrackPublications.delete(publication.trackSid);\r\n          break;\r\n        case Track.Kind.Video:\r\n          this.videoTrackPublications.delete(publication.trackSid);\r\n          break;\r\n      }\r\n      this.emit(ParticipantEvent.LocalTrackUnpublished, publication);\r\n      publication.setTrack(undefined);\r\n      if (negotiationNeeded) {\r\n        yield this.engine.negotiate();\r\n      }\r\n      return publication;\r\n    });\r\n  }\r\n  unpublishTracks(tracks) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const results = yield Promise.all(tracks.map(track => this.unpublishTrack(track)));\r\n      return results.filter(track => !!track);\r\n    });\r\n  }\r\n  republishAllTracks(options_1) {\r\n    return __awaiter(this, arguments, void 0, function (options) {\r\n      var _this3 = this;\r\n      let restartTracks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n      return function* () {\r\n        if (_this3.republishPromise) {\r\n          yield _this3.republishPromise;\r\n        }\r\n        _this3.republishPromise = new Promise((resolve, reject) => __awaiter(_this3, void 0, void 0, function* () {\r\n          try {\r\n            const localPubs = [];\r\n            this.trackPublications.forEach(pub => {\r\n              if (pub.track) {\r\n                if (options) {\r\n                  pub.options = Object.assign(Object.assign({}, pub.options), options);\r\n                }\r\n                localPubs.push(pub);\r\n              }\r\n            });\r\n            yield Promise.all(localPubs.map(pub => __awaiter(this, void 0, void 0, function* () {\r\n              const track = pub.track;\r\n              yield this.unpublishTrack(track, false);\r\n              if (restartTracks && !track.isMuted && track.source !== Track.Source.ScreenShare && track.source !== Track.Source.ScreenShareAudio && (isLocalAudioTrack(track) || isLocalVideoTrack(track)) && !track.isUserProvided) {\r\n                // generally we need to restart the track before publishing, often a full reconnect\r\n                // is necessary because computer had gone to sleep.\r\n                this.log.debug('restarting existing track', Object.assign(Object.assign({}, this.logContext), {\r\n                  track: pub.trackSid\r\n                }));\r\n                yield track.restartTrack();\r\n              }\r\n              yield this.publishOrRepublishTrack(track, pub.options, true);\r\n            })));\r\n            resolve();\r\n          } catch (error) {\r\n            reject(error);\r\n          } finally {\r\n            this.republishPromise = undefined;\r\n          }\r\n        }));\r\n        yield _this3.republishPromise;\r\n      }();\r\n    });\r\n  }\r\n  /**\r\n   * Publish a new data payload to the room. Data will be forwarded to each\r\n   * participant in the room if the destination field in publishOptions is empty\r\n   *\r\n   * @param data Uint8Array of the payload. To send string data, use TextEncoder.encode\r\n   * @param options optionally specify a `reliable`, `topic` and `destination`\r\n   */\r\n  publishData(data_1) {\r\n    return __awaiter(this, arguments, void 0, function (data) {\r\n      var _this4 = this;\r\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n      return function* () {\r\n        const kind = options.reliable ? DataPacket_Kind.RELIABLE : DataPacket_Kind.LOSSY;\r\n        const destinationIdentities = options.destinationIdentities;\r\n        const topic = options.topic;\r\n        const packet = new DataPacket({\r\n          kind: kind,\r\n          value: {\r\n            case: 'user',\r\n            value: new UserPacket({\r\n              participantIdentity: _this4.identity,\r\n              payload: data,\r\n              destinationIdentities,\r\n              topic\r\n            })\r\n          }\r\n        });\r\n        yield _this4.engine.sendDataPacket(packet, kind);\r\n      }();\r\n    });\r\n  }\r\n  /**\r\n   * Publish SIP DTMF message to the room.\r\n   *\r\n   * @param code DTMF code\r\n   * @param digit DTMF digit\r\n   */\r\n  publishDtmf(code, digit) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const packet = new DataPacket({\r\n        kind: DataPacket_Kind.RELIABLE,\r\n        value: {\r\n          case: 'sipDtmf',\r\n          value: new SipDTMF({\r\n            code: code,\r\n            digit: digit\r\n          })\r\n        }\r\n      });\r\n      yield this.engine.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n    });\r\n  }\r\n  sendChatMessage(text, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const msg = {\r\n        id: crypto.randomUUID(),\r\n        message: text,\r\n        timestamp: Date.now(),\r\n        attachedFiles: options === null || options === void 0 ? void 0 : options.attachments\r\n      };\r\n      const packet = new DataPacket({\r\n        value: {\r\n          case: 'chatMessage',\r\n          value: new ChatMessage(Object.assign(Object.assign({}, msg), {\r\n            timestamp: protoInt64.parse(msg.timestamp)\r\n          }))\r\n        }\r\n      });\r\n      yield this.engine.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n      this.emit(ParticipantEvent.ChatMessage, msg);\r\n      return msg;\r\n    });\r\n  }\r\n  editChatMessage(editText, originalMessage) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const msg = Object.assign(Object.assign({}, originalMessage), {\r\n        message: editText,\r\n        editTimestamp: Date.now()\r\n      });\r\n      const packet = new DataPacket({\r\n        value: {\r\n          case: 'chatMessage',\r\n          value: new ChatMessage(Object.assign(Object.assign({}, msg), {\r\n            timestamp: protoInt64.parse(msg.timestamp),\r\n            editTimestamp: protoInt64.parse(msg.editTimestamp)\r\n          }))\r\n        }\r\n      });\r\n      yield this.engine.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n      this.emit(ParticipantEvent.ChatMessage, msg);\r\n      return msg;\r\n    });\r\n  }\r\n  sendText(text, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const streamId = crypto.randomUUID();\r\n      const textInBytes = new TextEncoder().encode(text);\r\n      const totalTextLength = textInBytes.byteLength;\r\n      const fileIds = (_a = options === null || options === void 0 ? void 0 : options.attachments) === null || _a === void 0 ? void 0 : _a.map(() => crypto.randomUUID());\r\n      const progresses = new Array(fileIds ? fileIds.length + 1 : 1).fill(0);\r\n      const handleProgress = (progress, idx) => {\r\n        var _a;\r\n        progresses[idx] = progress;\r\n        const totalProgress = progresses.reduce((acc, val) => acc + val, 0);\r\n        (_a = options === null || options === void 0 ? void 0 : options.onProgress) === null || _a === void 0 ? void 0 : _a.call(options, totalProgress);\r\n      };\r\n      const writer = yield this.streamText({\r\n        streamId,\r\n        totalSize: totalTextLength,\r\n        destinationIdentities: options === null || options === void 0 ? void 0 : options.destinationIdentities,\r\n        topic: options === null || options === void 0 ? void 0 : options.topic,\r\n        attachedStreamIds: fileIds,\r\n        attributes: options === null || options === void 0 ? void 0 : options.attributes\r\n      });\r\n      yield writer.write(text);\r\n      // set text part of progress to 1\r\n      handleProgress(1, 0);\r\n      yield writer.close();\r\n      if ((options === null || options === void 0 ? void 0 : options.attachments) && fileIds) {\r\n        yield Promise.all(options.attachments.map((file, idx) => __awaiter(this, void 0, void 0, function* () {\r\n          return this._sendFile(fileIds[idx], file, {\r\n            topic: options.topic,\r\n            mimeType: file.type,\r\n            onProgress: progress => {\r\n              handleProgress(progress, idx + 1);\r\n            }\r\n          });\r\n        })));\r\n      }\r\n      return writer.info;\r\n    });\r\n  }\r\n  /**\r\n   * @internal\r\n   * @experimental CAUTION, might get removed in a minor release\r\n   */\r\n  streamText(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      const streamId = (_a = options === null || options === void 0 ? void 0 : options.streamId) !== null && _a !== void 0 ? _a : crypto.randomUUID();\r\n      const info = {\r\n        id: streamId,\r\n        mimeType: 'text/plain',\r\n        timestamp: Date.now(),\r\n        topic: (_b = options === null || options === void 0 ? void 0 : options.topic) !== null && _b !== void 0 ? _b : '',\r\n        size: options === null || options === void 0 ? void 0 : options.totalSize,\r\n        attributes: options === null || options === void 0 ? void 0 : options.attributes\r\n      };\r\n      const header = new DataStream_Header({\r\n        streamId,\r\n        mimeType: info.mimeType,\r\n        topic: info.topic,\r\n        timestamp: numberToBigInt(info.timestamp),\r\n        totalLength: numberToBigInt(options === null || options === void 0 ? void 0 : options.totalSize),\r\n        attributes: info.attributes,\r\n        contentHeader: {\r\n          case: 'textHeader',\r\n          value: new DataStream_TextHeader({\r\n            version: options === null || options === void 0 ? void 0 : options.version,\r\n            attachedStreamIds: options === null || options === void 0 ? void 0 : options.attachedStreamIds,\r\n            replyToStreamId: options === null || options === void 0 ? void 0 : options.replyToStreamId,\r\n            operationType: (options === null || options === void 0 ? void 0 : options.type) === 'update' ? DataStream_OperationType.UPDATE : DataStream_OperationType.CREATE\r\n          })\r\n        }\r\n      });\r\n      const destinationIdentities = options === null || options === void 0 ? void 0 : options.destinationIdentities;\r\n      const packet = new DataPacket({\r\n        destinationIdentities,\r\n        value: {\r\n          case: 'streamHeader',\r\n          value: header\r\n        }\r\n      });\r\n      yield this.engine.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n      let chunkId = 0;\r\n      const localP = this;\r\n      const writableStream = new WritableStream({\r\n        // Implement the sink\r\n        write(text) {\r\n          return __awaiter(this, void 0, void 0, function* () {\r\n            for (const textByteChunk of splitUtf8(text, STREAM_CHUNK_SIZE)) {\r\n              yield localP.engine.waitForBufferStatusLow(DataPacket_Kind.RELIABLE);\r\n              const chunk = new DataStream_Chunk({\r\n                content: textByteChunk,\r\n                streamId,\r\n                chunkIndex: numberToBigInt(chunkId)\r\n              });\r\n              const chunkPacket = new DataPacket({\r\n                destinationIdentities,\r\n                value: {\r\n                  case: 'streamChunk',\r\n                  value: chunk\r\n                }\r\n              });\r\n              yield localP.engine.sendDataPacket(chunkPacket, DataPacket_Kind.RELIABLE);\r\n              chunkId += 1;\r\n            }\r\n          });\r\n        },\r\n        close() {\r\n          return __awaiter(this, void 0, void 0, function* () {\r\n            const trailer = new DataStream_Trailer({\r\n              streamId\r\n            });\r\n            const trailerPacket = new DataPacket({\r\n              destinationIdentities,\r\n              value: {\r\n                case: 'streamTrailer',\r\n                value: trailer\r\n              }\r\n            });\r\n            yield localP.engine.sendDataPacket(trailerPacket, DataPacket_Kind.RELIABLE);\r\n          });\r\n        },\r\n        abort(err) {\r\n          console.log('Sink error:', err);\r\n          // TODO handle aborts to signal something to receiver side\r\n        }\r\n      });\r\n      let onEngineClose = () => __awaiter(this, void 0, void 0, function* () {\r\n        yield writer.close();\r\n      });\r\n      localP.engine.once(EngineEvent.Closing, onEngineClose);\r\n      const writer = new TextStreamWriter(writableStream, info, () => this.engine.off(EngineEvent.Closing, onEngineClose));\r\n      return writer;\r\n    });\r\n  }\r\n  sendFile(file, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const streamId = crypto.randomUUID();\r\n      yield this._sendFile(streamId, file, options);\r\n      return {\r\n        id: streamId\r\n      };\r\n    });\r\n  }\r\n  _sendFile(streamId, file, options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const writer = yield this.streamBytes({\r\n        streamId,\r\n        totalSize: file.size,\r\n        name: file.name,\r\n        mimeType: (_a = options === null || options === void 0 ? void 0 : options.mimeType) !== null && _a !== void 0 ? _a : file.type,\r\n        topic: options === null || options === void 0 ? void 0 : options.topic,\r\n        destinationIdentities: options === null || options === void 0 ? void 0 : options.destinationIdentities\r\n      });\r\n      const reader = file.stream().getReader();\r\n      while (true) {\r\n        const {\r\n          done,\r\n          value\r\n        } = yield reader.read();\r\n        if (done) {\r\n          break;\r\n        }\r\n        yield writer.write(value);\r\n      }\r\n      yield writer.close();\r\n      return writer.info;\r\n    });\r\n  }\r\n  streamBytes(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c, _d, _e;\r\n      const streamId = (_a = options === null || options === void 0 ? void 0 : options.streamId) !== null && _a !== void 0 ? _a : crypto.randomUUID();\r\n      const destinationIdentities = options === null || options === void 0 ? void 0 : options.destinationIdentities;\r\n      const info = {\r\n        id: streamId,\r\n        mimeType: (_b = options === null || options === void 0 ? void 0 : options.mimeType) !== null && _b !== void 0 ? _b : 'application/octet-stream',\r\n        topic: (_c = options === null || options === void 0 ? void 0 : options.topic) !== null && _c !== void 0 ? _c : '',\r\n        timestamp: Date.now(),\r\n        attributes: options === null || options === void 0 ? void 0 : options.attributes,\r\n        size: options === null || options === void 0 ? void 0 : options.totalSize,\r\n        name: (_d = options === null || options === void 0 ? void 0 : options.name) !== null && _d !== void 0 ? _d : 'unknown'\r\n      };\r\n      const header = new DataStream_Header({\r\n        totalLength: numberToBigInt((_e = info.size) !== null && _e !== void 0 ? _e : 0),\r\n        mimeType: info.mimeType,\r\n        streamId,\r\n        topic: info.topic,\r\n        timestamp: numberToBigInt(Date.now()),\r\n        attributes: info.attributes,\r\n        contentHeader: {\r\n          case: 'byteHeader',\r\n          value: new DataStream_ByteHeader({\r\n            name: info.name\r\n          })\r\n        }\r\n      });\r\n      const packet = new DataPacket({\r\n        destinationIdentities,\r\n        value: {\r\n          case: 'streamHeader',\r\n          value: header\r\n        }\r\n      });\r\n      yield this.engine.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n      let chunkId = 0;\r\n      const writeMutex = new _();\r\n      const engine = this.engine;\r\n      const log = this.log;\r\n      const writableStream = new WritableStream({\r\n        write(chunk) {\r\n          return __awaiter(this, void 0, void 0, function* () {\r\n            const unlock = yield writeMutex.lock();\r\n            let byteOffset = 0;\r\n            try {\r\n              while (byteOffset < chunk.byteLength) {\r\n                const subChunk = chunk.slice(byteOffset, byteOffset + STREAM_CHUNK_SIZE);\r\n                yield engine.waitForBufferStatusLow(DataPacket_Kind.RELIABLE);\r\n                const chunkPacket = new DataPacket({\r\n                  destinationIdentities,\r\n                  value: {\r\n                    case: 'streamChunk',\r\n                    value: new DataStream_Chunk({\r\n                      content: subChunk,\r\n                      streamId,\r\n                      chunkIndex: numberToBigInt(chunkId)\r\n                    })\r\n                  }\r\n                });\r\n                yield engine.sendDataPacket(chunkPacket, DataPacket_Kind.RELIABLE);\r\n                chunkId += 1;\r\n                byteOffset += subChunk.byteLength;\r\n              }\r\n            } finally {\r\n              unlock();\r\n            }\r\n          });\r\n        },\r\n        close() {\r\n          return __awaiter(this, void 0, void 0, function* () {\r\n            const trailer = new DataStream_Trailer({\r\n              streamId\r\n            });\r\n            const trailerPacket = new DataPacket({\r\n              destinationIdentities,\r\n              value: {\r\n                case: 'streamTrailer',\r\n                value: trailer\r\n              }\r\n            });\r\n            yield engine.sendDataPacket(trailerPacket, DataPacket_Kind.RELIABLE);\r\n          });\r\n        },\r\n        abort(err) {\r\n          log.error('Sink error:', err);\r\n        }\r\n      });\r\n      const byteWriter = new ByteStreamWriter(writableStream, info);\r\n      return byteWriter;\r\n    });\r\n  }\r\n  /**\r\n   * Initiate an RPC call to a remote participant\r\n   * @param params - Parameters for initiating the RPC call, see {@link PerformRpcParams}\r\n   * @returns A promise that resolves with the response payload or rejects with an error.\r\n   * @throws Error on failure. Details in `message`.\r\n   */\r\n  performRpc(_a) {\r\n    return __awaiter(this, arguments, void 0, function (_ref3) {\r\n      var _this5 = this;\r\n      let {\r\n        destinationIdentity,\r\n        method,\r\n        payload,\r\n        responseTimeout = 10000\r\n      } = _ref3;\r\n      return function* () {\r\n        const maxRoundTripLatency = 2000;\r\n        return new Promise((resolve, reject) => __awaiter(_this5, void 0, void 0, function* () {\r\n          var _a, _b, _c, _d;\r\n          if (byteLength(payload) > MAX_PAYLOAD_BYTES) {\r\n            reject(RpcError.builtIn('REQUEST_PAYLOAD_TOO_LARGE'));\r\n            return;\r\n          }\r\n          if (((_b = (_a = this.engine.latestJoinResponse) === null || _a === void 0 ? void 0 : _a.serverInfo) === null || _b === void 0 ? void 0 : _b.version) && compareVersions((_d = (_c = this.engine.latestJoinResponse) === null || _c === void 0 ? void 0 : _c.serverInfo) === null || _d === void 0 ? void 0 : _d.version, '1.8.0') < 0) {\r\n            reject(RpcError.builtIn('UNSUPPORTED_SERVER'));\r\n            return;\r\n          }\r\n          const id = crypto.randomUUID();\r\n          yield this.publishRpcRequest(destinationIdentity, id, method, payload, responseTimeout - maxRoundTripLatency);\r\n          const ackTimeoutId = setTimeout(() => {\r\n            this.pendingAcks.delete(id);\r\n            reject(RpcError.builtIn('CONNECTION_TIMEOUT'));\r\n            this.pendingResponses.delete(id);\r\n            clearTimeout(responseTimeoutId);\r\n          }, maxRoundTripLatency);\r\n          this.pendingAcks.set(id, {\r\n            resolve: () => {\r\n              clearTimeout(ackTimeoutId);\r\n            },\r\n            participantIdentity: destinationIdentity\r\n          });\r\n          const responseTimeoutId = setTimeout(() => {\r\n            this.pendingResponses.delete(id);\r\n            reject(RpcError.builtIn('RESPONSE_TIMEOUT'));\r\n          }, responseTimeout);\r\n          this.pendingResponses.set(id, {\r\n            resolve: (responsePayload, responseError) => {\r\n              clearTimeout(responseTimeoutId);\r\n              if (this.pendingAcks.has(id)) {\r\n                console.warn('RPC response received before ack', id);\r\n                this.pendingAcks.delete(id);\r\n                clearTimeout(ackTimeoutId);\r\n              }\r\n              if (responseError) {\r\n                reject(responseError);\r\n              } else {\r\n                resolve(responsePayload !== null && responsePayload !== void 0 ? responsePayload : '');\r\n              }\r\n            },\r\n            participantIdentity: destinationIdentity\r\n          });\r\n        }));\r\n      }();\r\n    });\r\n  }\r\n  /**\r\n   * @deprecated use `room.registerRpcMethod` instead\r\n   */\r\n  registerRpcMethod(method, handler) {\r\n    if (this.rpcHandlers.has(method)) {\r\n      this.log.warn(\"you're overriding the RPC handler for method \".concat(method, \", in the future this will throw an error\"));\r\n    }\r\n    this.rpcHandlers.set(method, handler);\r\n  }\r\n  /**\r\n   * @deprecated use `room.unregisterRpcMethod` instead\r\n   */\r\n  unregisterRpcMethod(method) {\r\n    this.rpcHandlers.delete(method);\r\n  }\r\n  /**\r\n   * Control who can subscribe to LocalParticipant's published tracks.\r\n   *\r\n   * By default, all participants can subscribe. This allows fine-grained control over\r\n   * who is able to subscribe at a participant and track level.\r\n   *\r\n   * Note: if access is given at a track-level (i.e. both [allParticipantsAllowed] and\r\n   * [ParticipantTrackPermission.allTracksAllowed] are false), any newer published tracks\r\n   * will not grant permissions to any participants and will require a subsequent\r\n   * permissions update to allow subscription.\r\n   *\r\n   * @param allParticipantsAllowed Allows all participants to subscribe all tracks.\r\n   *  Takes precedence over [[participantTrackPermissions]] if set to true.\r\n   *  By default this is set to true.\r\n   * @param participantTrackPermissions Full list of individual permissions per\r\n   *  participant/track. Any omitted participants will not receive any permissions.\r\n   */\r\n  setTrackSubscriptionPermissions(allParticipantsAllowed) {\r\n    let participantTrackPermissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\r\n    this.participantTrackPermissions = participantTrackPermissions;\r\n    this.allParticipantsAllowedToSubscribe = allParticipantsAllowed;\r\n    if (!this.engine.client.isDisconnected) {\r\n      this.updateTrackSubscriptionPermissions();\r\n    }\r\n  }\r\n  handleIncomingRpcAck(requestId) {\r\n    const handler = this.pendingAcks.get(requestId);\r\n    if (handler) {\r\n      handler.resolve();\r\n      this.pendingAcks.delete(requestId);\r\n    } else {\r\n      console.error('Ack received for unexpected RPC request', requestId);\r\n    }\r\n  }\r\n  handleIncomingRpcResponse(requestId, payload, error) {\r\n    const handler = this.pendingResponses.get(requestId);\r\n    if (handler) {\r\n      handler.resolve(payload, error);\r\n      this.pendingResponses.delete(requestId);\r\n    } else {\r\n      console.error('Response received for unexpected RPC request', requestId);\r\n    }\r\n  }\r\n  /** @internal */\r\n  publishRpcRequest(destinationIdentity, requestId, method, payload, responseTimeout) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const packet = new DataPacket({\r\n        destinationIdentities: [destinationIdentity],\r\n        kind: DataPacket_Kind.RELIABLE,\r\n        value: {\r\n          case: 'rpcRequest',\r\n          value: new RpcRequest({\r\n            id: requestId,\r\n            method,\r\n            payload,\r\n            responseTimeoutMs: responseTimeout,\r\n            version: 1\r\n          })\r\n        }\r\n      });\r\n      yield this.engine.sendDataPacket(packet, DataPacket_Kind.RELIABLE);\r\n    });\r\n  }\r\n  /** @internal */\r\n  handleParticipantDisconnected(participantIdentity) {\r\n    for (const [id, {\r\n      participantIdentity: pendingIdentity\r\n    }] of this.pendingAcks) {\r\n      if (pendingIdentity === participantIdentity) {\r\n        this.pendingAcks.delete(id);\r\n      }\r\n    }\r\n    for (const [id, {\r\n      participantIdentity: pendingIdentity,\r\n      resolve\r\n    }] of this.pendingResponses) {\r\n      if (pendingIdentity === participantIdentity) {\r\n        resolve(null, RpcError.builtIn('RECIPIENT_DISCONNECTED'));\r\n        this.pendingResponses.delete(id);\r\n      }\r\n    }\r\n  }\r\n  /** @internal */\r\n  setEnabledPublishCodecs(codecs) {\r\n    this.enabledPublishVideoCodecs = codecs.filter(c => c.mime.split('/')[0].toLowerCase() === 'video');\r\n  }\r\n  /** @internal */\r\n  updateInfo(info) {\r\n    if (!super.updateInfo(info)) {\r\n      return false;\r\n    }\r\n    // reconcile track mute status.\r\n    // if server's track mute status doesn't match actual, we'll have to update\r\n    // the server's copy\r\n    info.tracks.forEach(ti => {\r\n      var _a, _b;\r\n      const pub = this.trackPublications.get(ti.sid);\r\n      if (pub) {\r\n        const mutedOnServer = pub.isMuted || ((_b = (_a = pub.track) === null || _a === void 0 ? void 0 : _a.isUpstreamPaused) !== null && _b !== void 0 ? _b : false);\r\n        if (mutedOnServer !== ti.muted) {\r\n          this.log.debug('updating server mute state after reconcile', Object.assign(Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(pub)), {\r\n            mutedOnServer\r\n          }));\r\n          this.engine.client.sendMuteTrack(ti.sid, mutedOnServer);\r\n        }\r\n      }\r\n    });\r\n    return true;\r\n  }\r\n  /** @internal */\r\n  setActiveAgent(agent) {\r\n    var _a, _b, _c, _d;\r\n    this.firstActiveAgent = agent;\r\n    if (agent && !this.firstActiveAgent) {\r\n      this.firstActiveAgent = agent;\r\n    }\r\n    if (agent) {\r\n      (_b = (_a = this.activeAgentFuture) === null || _a === void 0 ? void 0 : _a.resolve) === null || _b === void 0 ? void 0 : _b.call(_a, agent);\r\n    } else {\r\n      (_d = (_c = this.activeAgentFuture) === null || _c === void 0 ? void 0 : _c.reject) === null || _d === void 0 ? void 0 : _d.call(_c, 'Agent disconnected');\r\n    }\r\n    this.activeAgentFuture = undefined;\r\n  }\r\n  waitUntilActiveAgentPresent() {\r\n    if (this.firstActiveAgent) {\r\n      return Promise.resolve(this.firstActiveAgent);\r\n    }\r\n    if (!this.activeAgentFuture) {\r\n      this.activeAgentFuture = new Future();\r\n    }\r\n    return this.activeAgentFuture.promise;\r\n  }\r\n  getPublicationForTrack(track) {\r\n    let publication;\r\n    this.trackPublications.forEach(pub => {\r\n      const localTrack = pub.track;\r\n      if (!localTrack) {\r\n        return;\r\n      }\r\n      // this looks overly complicated due to this object tree\r\n      if (track instanceof MediaStreamTrack) {\r\n        if (isLocalAudioTrack(localTrack) || isLocalVideoTrack(localTrack)) {\r\n          if (localTrack.mediaStreamTrack === track) {\r\n            publication = pub;\r\n          }\r\n        }\r\n      } else if (track === localTrack) {\r\n        publication = pub;\r\n      }\r\n    });\r\n    return publication;\r\n  }\r\n  waitForPendingPublicationOfSource(source) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const waitForPendingTimeout = 10000;\r\n      const startTime = Date.now();\r\n      while (Date.now() < startTime + waitForPendingTimeout) {\r\n        const publishPromiseEntry = Array.from(this.pendingPublishPromises.entries()).find(_ref4 => {\r\n          let [pendingTrack] = _ref4;\r\n          return pendingTrack.source === source;\r\n        });\r\n        if (publishPromiseEntry) {\r\n          return publishPromiseEntry[1];\r\n        }\r\n        yield sleep(20);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass RemoteTrackPublication extends TrackPublication {\r\n  constructor(kind, ti, autoSubscribe, loggerOptions) {\r\n    super(kind, ti.sid, ti.name, loggerOptions);\r\n    this.track = undefined;\r\n    /** @internal */\r\n    this.allowed = true;\r\n    this.disabled = false;\r\n    this.currentVideoQuality = VideoQuality.HIGH;\r\n    this.handleEnded = track => {\r\n      this.setTrack(undefined);\r\n      this.emit(TrackEvent.Ended, track);\r\n    };\r\n    this.handleVisibilityChange = visible => {\r\n      this.log.debug(\"adaptivestream video visibility \".concat(this.trackSid, \", visible=\").concat(visible), this.logContext);\r\n      this.disabled = !visible;\r\n      this.emitTrackUpdate();\r\n    };\r\n    this.handleVideoDimensionsChange = dimensions => {\r\n      this.log.debug(\"adaptivestream video dimensions \".concat(dimensions.width, \"x\").concat(dimensions.height), this.logContext);\r\n      this.videoDimensions = dimensions;\r\n      this.emitTrackUpdate();\r\n    };\r\n    this.subscribed = autoSubscribe;\r\n    this.updateInfo(ti);\r\n  }\r\n  /**\r\n   * Subscribe or unsubscribe to this remote track\r\n   * @param subscribed true to subscribe to a track, false to unsubscribe\r\n   */\r\n  setSubscribed(subscribed) {\r\n    const prevStatus = this.subscriptionStatus;\r\n    const prevPermission = this.permissionStatus;\r\n    this.subscribed = subscribed;\r\n    // reset allowed status when desired subscription state changes\r\n    // server will notify client via signal message if it's not allowed\r\n    if (subscribed) {\r\n      this.allowed = true;\r\n    }\r\n    const sub = new UpdateSubscription({\r\n      trackSids: [this.trackSid],\r\n      subscribe: this.subscribed,\r\n      participantTracks: [new ParticipantTracks({\r\n        // sending an empty participant id since TrackPublication doesn't keep it\r\n        // this is filled in by the participant that receives this message\r\n        participantSid: '',\r\n        trackSids: [this.trackSid]\r\n      })]\r\n    });\r\n    this.emit(TrackEvent.UpdateSubscription, sub);\r\n    this.emitSubscriptionUpdateIfChanged(prevStatus);\r\n    this.emitPermissionUpdateIfChanged(prevPermission);\r\n  }\r\n  get subscriptionStatus() {\r\n    if (this.subscribed === false) {\r\n      return TrackPublication.SubscriptionStatus.Unsubscribed;\r\n    }\r\n    if (!super.isSubscribed) {\r\n      return TrackPublication.SubscriptionStatus.Desired;\r\n    }\r\n    return TrackPublication.SubscriptionStatus.Subscribed;\r\n  }\r\n  get permissionStatus() {\r\n    return this.allowed ? TrackPublication.PermissionStatus.Allowed : TrackPublication.PermissionStatus.NotAllowed;\r\n  }\r\n  /**\r\n   * Returns true if track is subscribed, and ready for playback\r\n   */\r\n  get isSubscribed() {\r\n    if (this.subscribed === false) {\r\n      return false;\r\n    }\r\n    return super.isSubscribed;\r\n  }\r\n  // returns client's desire to subscribe to a track, also true if autoSubscribe is enabled\r\n  get isDesired() {\r\n    return this.subscribed !== false;\r\n  }\r\n  get isEnabled() {\r\n    return !this.disabled;\r\n  }\r\n  get isLocal() {\r\n    return false;\r\n  }\r\n  /**\r\n   * disable server from sending down data for this track. this is useful when\r\n   * the participant is off screen, you may disable streaming down their video\r\n   * to reduce bandwidth requirements\r\n   * @param enabled\r\n   */\r\n  setEnabled(enabled) {\r\n    if (!this.isManualOperationAllowed() || this.disabled === !enabled) {\r\n      return;\r\n    }\r\n    this.disabled = !enabled;\r\n    this.emitTrackUpdate();\r\n  }\r\n  /**\r\n   * for tracks that support simulcasting, adjust subscribed quality\r\n   *\r\n   * This indicates the highest quality the client can accept. if network\r\n   * bandwidth does not allow, server will automatically reduce quality to\r\n   * optimize for uninterrupted video\r\n   */\r\n  setVideoQuality(quality) {\r\n    if (!this.isManualOperationAllowed() || this.currentVideoQuality === quality) {\r\n      return;\r\n    }\r\n    this.currentVideoQuality = quality;\r\n    this.videoDimensions = undefined;\r\n    this.emitTrackUpdate();\r\n  }\r\n  setVideoDimensions(dimensions) {\r\n    var _a, _b;\r\n    if (!this.isManualOperationAllowed()) {\r\n      return;\r\n    }\r\n    if (((_a = this.videoDimensions) === null || _a === void 0 ? void 0 : _a.width) === dimensions.width && ((_b = this.videoDimensions) === null || _b === void 0 ? void 0 : _b.height) === dimensions.height) {\r\n      return;\r\n    }\r\n    if (isRemoteVideoTrack(this.track)) {\r\n      this.videoDimensions = dimensions;\r\n    }\r\n    this.currentVideoQuality = undefined;\r\n    this.emitTrackUpdate();\r\n  }\r\n  setVideoFPS(fps) {\r\n    if (!this.isManualOperationAllowed()) {\r\n      return;\r\n    }\r\n    if (!isRemoteVideoTrack(this.track)) {\r\n      return;\r\n    }\r\n    if (this.fps === fps) {\r\n      return;\r\n    }\r\n    this.fps = fps;\r\n    this.emitTrackUpdate();\r\n  }\r\n  get videoQuality() {\r\n    return this.currentVideoQuality;\r\n  }\r\n  /** @internal */\r\n  setTrack(track) {\r\n    const prevStatus = this.subscriptionStatus;\r\n    const prevPermission = this.permissionStatus;\r\n    const prevTrack = this.track;\r\n    if (prevTrack === track) {\r\n      return;\r\n    }\r\n    if (prevTrack) {\r\n      // unregister listener\r\n      prevTrack.off(TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange);\r\n      prevTrack.off(TrackEvent.VisibilityChanged, this.handleVisibilityChange);\r\n      prevTrack.off(TrackEvent.Ended, this.handleEnded);\r\n      prevTrack.detach();\r\n      prevTrack.stopMonitor();\r\n      this.emit(TrackEvent.Unsubscribed, prevTrack);\r\n    }\r\n    super.setTrack(track);\r\n    if (track) {\r\n      track.sid = this.trackSid;\r\n      track.on(TrackEvent.VideoDimensionsChanged, this.handleVideoDimensionsChange);\r\n      track.on(TrackEvent.VisibilityChanged, this.handleVisibilityChange);\r\n      track.on(TrackEvent.Ended, this.handleEnded);\r\n      this.emit(TrackEvent.Subscribed, track);\r\n    }\r\n    this.emitPermissionUpdateIfChanged(prevPermission);\r\n    this.emitSubscriptionUpdateIfChanged(prevStatus);\r\n  }\r\n  /** @internal */\r\n  setAllowed(allowed) {\r\n    const prevStatus = this.subscriptionStatus;\r\n    const prevPermission = this.permissionStatus;\r\n    this.allowed = allowed;\r\n    this.emitPermissionUpdateIfChanged(prevPermission);\r\n    this.emitSubscriptionUpdateIfChanged(prevStatus);\r\n  }\r\n  /** @internal */\r\n  setSubscriptionError(error) {\r\n    this.emit(TrackEvent.SubscriptionFailed, error);\r\n  }\r\n  /** @internal */\r\n  updateInfo(info) {\r\n    super.updateInfo(info);\r\n    const prevMetadataMuted = this.metadataMuted;\r\n    this.metadataMuted = info.muted;\r\n    if (this.track) {\r\n      this.track.setMuted(info.muted);\r\n    } else if (prevMetadataMuted !== info.muted) {\r\n      this.emit(info.muted ? TrackEvent.Muted : TrackEvent.Unmuted);\r\n    }\r\n  }\r\n  emitSubscriptionUpdateIfChanged(previousStatus) {\r\n    const currentStatus = this.subscriptionStatus;\r\n    if (previousStatus === currentStatus) {\r\n      return;\r\n    }\r\n    this.emit(TrackEvent.SubscriptionStatusChanged, currentStatus, previousStatus);\r\n  }\r\n  emitPermissionUpdateIfChanged(previousPermissionStatus) {\r\n    const currentPermissionStatus = this.permissionStatus;\r\n    if (currentPermissionStatus !== previousPermissionStatus) {\r\n      this.emit(TrackEvent.SubscriptionPermissionChanged, this.permissionStatus, previousPermissionStatus);\r\n    }\r\n  }\r\n  isManualOperationAllowed() {\r\n    if (this.kind === Track.Kind.Video && this.isAdaptiveStream) {\r\n      this.log.warn('adaptive stream is enabled, cannot change video track settings', this.logContext);\r\n      return false;\r\n    }\r\n    if (!this.isDesired) {\r\n      this.log.warn('cannot update track settings when not subscribed', this.logContext);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  get isAdaptiveStream() {\r\n    return isRemoteVideoTrack(this.track) && this.track.isAdaptiveStream;\r\n  }\r\n  /* @internal */\r\n  emitTrackUpdate() {\r\n    const settings = new UpdateTrackSettings({\r\n      trackSids: [this.trackSid],\r\n      disabled: this.disabled,\r\n      fps: this.fps\r\n    });\r\n    if (this.videoDimensions) {\r\n      settings.width = Math.ceil(this.videoDimensions.width);\r\n      settings.height = Math.ceil(this.videoDimensions.height);\r\n    } else if (this.currentVideoQuality !== undefined) {\r\n      settings.quality = this.currentVideoQuality;\r\n    } else {\r\n      // defaults to high quality\r\n      settings.quality = VideoQuality.HIGH;\r\n    }\r\n    this.emit(TrackEvent.UpdateSettings, settings);\r\n  }\r\n}\r\n\r\nclass RemoteParticipant extends Participant {\r\n  /** @internal */\r\n  static fromParticipantInfo(signalClient, pi, loggerOptions) {\r\n    return new RemoteParticipant(signalClient, pi.sid, pi.identity, pi.name, pi.metadata, pi.attributes, loggerOptions, pi.kind);\r\n  }\r\n  get logContext() {\r\n    return Object.assign(Object.assign({}, super.logContext), {\r\n      rpID: this.sid,\r\n      remoteParticipant: this.identity\r\n    });\r\n  }\r\n  /** @internal */\r\n  constructor(signalClient, sid, identity, name, metadata, attributes, loggerOptions) {\r\n    let kind = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : ParticipantInfo_Kind.STANDARD;\r\n    super(sid, identity || '', name, metadata, attributes, loggerOptions, kind);\r\n    this.signalClient = signalClient;\r\n    this.trackPublications = new Map();\r\n    this.audioTrackPublications = new Map();\r\n    this.videoTrackPublications = new Map();\r\n    this.volumeMap = new Map();\r\n  }\r\n  addTrackPublication(publication) {\r\n    super.addTrackPublication(publication);\r\n    // register action events\r\n    publication.on(TrackEvent.UpdateSettings, settings => {\r\n      this.log.debug('send update settings', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(publication)));\r\n      this.signalClient.sendUpdateTrackSettings(settings);\r\n    });\r\n    publication.on(TrackEvent.UpdateSubscription, sub => {\r\n      sub.participantTracks.forEach(pt => {\r\n        pt.participantSid = this.sid;\r\n      });\r\n      this.signalClient.sendUpdateSubscription(sub);\r\n    });\r\n    publication.on(TrackEvent.SubscriptionPermissionChanged, status => {\r\n      this.emit(ParticipantEvent.TrackSubscriptionPermissionChanged, publication, status);\r\n    });\r\n    publication.on(TrackEvent.SubscriptionStatusChanged, status => {\r\n      this.emit(ParticipantEvent.TrackSubscriptionStatusChanged, publication, status);\r\n    });\r\n    publication.on(TrackEvent.Subscribed, track => {\r\n      this.emit(ParticipantEvent.TrackSubscribed, track, publication);\r\n    });\r\n    publication.on(TrackEvent.Unsubscribed, previousTrack => {\r\n      this.emit(ParticipantEvent.TrackUnsubscribed, previousTrack, publication);\r\n    });\r\n    publication.on(TrackEvent.SubscriptionFailed, error => {\r\n      this.emit(ParticipantEvent.TrackSubscriptionFailed, publication.trackSid, error);\r\n    });\r\n  }\r\n  getTrackPublication(source) {\r\n    const track = super.getTrackPublication(source);\r\n    if (track) {\r\n      return track;\r\n    }\r\n  }\r\n  getTrackPublicationByName(name) {\r\n    const track = super.getTrackPublicationByName(name);\r\n    if (track) {\r\n      return track;\r\n    }\r\n  }\r\n  /**\r\n   * sets the volume on the participant's audio track\r\n   * by default, this affects the microphone publication\r\n   * a different source can be passed in as a second argument\r\n   * if no track exists the volume will be applied when the microphone track is added\r\n   */\r\n  setVolume(volume) {\r\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Track.Source.Microphone;\r\n    this.volumeMap.set(source, volume);\r\n    const audioPublication = this.getTrackPublication(source);\r\n    if (audioPublication && audioPublication.track) {\r\n      audioPublication.track.setVolume(volume);\r\n    }\r\n  }\r\n  /**\r\n   * gets the volume on the participant's microphone track\r\n   */\r\n  getVolume() {\r\n    let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Track.Source.Microphone;\r\n    const audioPublication = this.getTrackPublication(source);\r\n    if (audioPublication && audioPublication.track) {\r\n      return audioPublication.track.getVolume();\r\n    }\r\n    return this.volumeMap.get(source);\r\n  }\r\n  /** @internal */\r\n  addSubscribedMediaTrack(mediaTrack, sid, mediaStream, receiver, adaptiveStreamSettings, triesLeft) {\r\n    // find the track publication\r\n    // it's possible for the media track to arrive before participant info\r\n    let publication = this.getTrackPublicationBySid(sid);\r\n    // it's also possible that the browser didn't honor our original track id\r\n    // FireFox would use its own local uuid instead of server track id\r\n    if (!publication) {\r\n      if (!sid.startsWith('TR')) {\r\n        // find the first track that matches type\r\n        this.trackPublications.forEach(p => {\r\n          if (!publication && mediaTrack.kind === p.kind.toString()) {\r\n            publication = p;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    // when we couldn't locate the track, it's possible that the metadata hasn't\r\n    // yet arrived. Wait a bit longer for it to arrive, or fire an error\r\n    if (!publication) {\r\n      if (triesLeft === 0) {\r\n        this.log.error('could not find published track', Object.assign(Object.assign({}, this.logContext), {\r\n          trackSid: sid\r\n        }));\r\n        this.emit(ParticipantEvent.TrackSubscriptionFailed, sid);\r\n        return;\r\n      }\r\n      if (triesLeft === undefined) triesLeft = 20;\r\n      setTimeout(() => {\r\n        this.addSubscribedMediaTrack(mediaTrack, sid, mediaStream, receiver, adaptiveStreamSettings, triesLeft - 1);\r\n      }, 150);\r\n      return;\r\n    }\r\n    if (mediaTrack.readyState === 'ended') {\r\n      this.log.error('unable to subscribe because MediaStreamTrack is ended. Do not call MediaStreamTrack.stop()', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(publication)));\r\n      this.emit(ParticipantEvent.TrackSubscriptionFailed, sid);\r\n      return;\r\n    }\r\n    const isVideo = mediaTrack.kind === 'video';\r\n    let track;\r\n    if (isVideo) {\r\n      track = new RemoteVideoTrack(mediaTrack, sid, receiver, adaptiveStreamSettings);\r\n    } else {\r\n      track = new RemoteAudioTrack(mediaTrack, sid, receiver, this.audioContext, this.audioOutput);\r\n    }\r\n    // set track info\r\n    track.source = publication.source;\r\n    // keep publication's muted status\r\n    track.isMuted = publication.isMuted;\r\n    track.setMediaStream(mediaStream);\r\n    track.start();\r\n    publication.setTrack(track);\r\n    // set participant volumes on new audio tracks\r\n    if (this.volumeMap.has(publication.source) && isRemoteTrack(track) && isAudioTrack(track)) {\r\n      track.setVolume(this.volumeMap.get(publication.source));\r\n    }\r\n    return publication;\r\n  }\r\n  /** @internal */\r\n  get hasMetadata() {\r\n    return !!this.participantInfo;\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  getTrackPublicationBySid(sid) {\r\n    return this.trackPublications.get(sid);\r\n  }\r\n  /** @internal */\r\n  updateInfo(info) {\r\n    if (!super.updateInfo(info)) {\r\n      return false;\r\n    }\r\n    // we are getting a list of all available tracks, reconcile in here\r\n    // and send out events for changes\r\n    // reconcile track publications, publish events only if metadata is already there\r\n    // i.e. changes since the local participant has joined\r\n    const validTracks = new Map();\r\n    const newTracks = new Map();\r\n    info.tracks.forEach(ti => {\r\n      var _a, _b;\r\n      let publication = this.getTrackPublicationBySid(ti.sid);\r\n      if (!publication) {\r\n        // new publication\r\n        const kind = Track.kindFromProto(ti.type);\r\n        if (!kind) {\r\n          return;\r\n        }\r\n        publication = new RemoteTrackPublication(kind, ti, (_a = this.signalClient.connectOptions) === null || _a === void 0 ? void 0 : _a.autoSubscribe, {\r\n          loggerContextCb: () => this.logContext,\r\n          loggerName: (_b = this.loggerOptions) === null || _b === void 0 ? void 0 : _b.loggerName\r\n        });\r\n        publication.updateInfo(ti);\r\n        newTracks.set(ti.sid, publication);\r\n        const existingTrackOfSource = Array.from(this.trackPublications.values()).find(publishedTrack => publishedTrack.source === (publication === null || publication === void 0 ? void 0 : publication.source));\r\n        if (existingTrackOfSource && publication.source !== Track.Source.Unknown) {\r\n          this.log.debug(\"received a second track publication for \".concat(this.identity, \" with the same source: \").concat(publication.source), Object.assign(Object.assign({}, this.logContext), {\r\n            oldTrack: getLogContextFromTrack(existingTrackOfSource),\r\n            newTrack: getLogContextFromTrack(publication)\r\n          }));\r\n        }\r\n        this.addTrackPublication(publication);\r\n      } else {\r\n        publication.updateInfo(ti);\r\n      }\r\n      validTracks.set(ti.sid, publication);\r\n    });\r\n    // detect removed tracks\r\n    this.trackPublications.forEach(publication => {\r\n      if (!validTracks.has(publication.trackSid)) {\r\n        this.log.trace('detected removed track on remote participant, unpublishing', Object.assign(Object.assign({}, this.logContext), getLogContextFromTrack(publication)));\r\n        this.unpublishTrack(publication.trackSid, true);\r\n      }\r\n    });\r\n    // always emit events for new publications, Room will not forward them unless it's ready\r\n    newTracks.forEach(publication => {\r\n      this.emit(ParticipantEvent.TrackPublished, publication);\r\n    });\r\n    return true;\r\n  }\r\n  /** @internal */\r\n  unpublishTrack(sid, sendUnpublish) {\r\n    const publication = this.trackPublications.get(sid);\r\n    if (!publication) {\r\n      return;\r\n    }\r\n    // also send unsubscribe, if track is actively subscribed\r\n    const {\r\n      track\r\n    } = publication;\r\n    if (track) {\r\n      track.stop();\r\n      publication.setTrack(undefined);\r\n    }\r\n    // remove track from maps only after unsubscribed has been fired\r\n    this.trackPublications.delete(sid);\r\n    // remove from the right type map\r\n    switch (publication.kind) {\r\n      case Track.Kind.Audio:\r\n        this.audioTrackPublications.delete(sid);\r\n        break;\r\n      case Track.Kind.Video:\r\n        this.videoTrackPublications.delete(sid);\r\n        break;\r\n    }\r\n    if (sendUnpublish) {\r\n      this.emit(ParticipantEvent.TrackUnpublished, publication);\r\n    }\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  setAudioOutput(output) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      this.audioOutput = output;\r\n      const promises = [];\r\n      this.audioTrackPublications.forEach(pub => {\r\n        var _a;\r\n        if (isAudioTrack(pub.track) && isRemoteTrack(pub.track)) {\r\n          promises.push(pub.track.setSinkId((_a = output.deviceId) !== null && _a !== void 0 ? _a : 'default'));\r\n        }\r\n      });\r\n      yield Promise.all(promises);\r\n    });\r\n  }\r\n  /** @internal */\r\n  emit(event) {\r\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n      args[_key - 1] = arguments[_key];\r\n    }\r\n    this.log.trace('participant event', Object.assign(Object.assign({}, this.logContext), {\r\n      event,\r\n      args\r\n    }));\r\n    return super.emit(event, ...args);\r\n  }\r\n}\r\n\r\nvar ConnectionState;\r\n(function (ConnectionState) {\r\n  ConnectionState[\"Disconnected\"] = \"disconnected\";\r\n  ConnectionState[\"Connecting\"] = \"connecting\";\r\n  ConnectionState[\"Connected\"] = \"connected\";\r\n  ConnectionState[\"Reconnecting\"] = \"reconnecting\";\r\n  ConnectionState[\"SignalReconnecting\"] = \"signalReconnecting\";\r\n})(ConnectionState || (ConnectionState = {}));\r\nconst connectionReconcileFrequency = 4 * 1000;\r\n/**\r\n * In LiveKit, a room is the logical grouping for a list of participants.\r\n * Participants in a room can publish tracks, and subscribe to others' tracks.\r\n *\r\n * a Room fires [[RoomEvent | RoomEvents]].\r\n *\r\n * @noInheritDoc\r\n */\r\nclass Room extends eventsExports.EventEmitter {\r\n  /**\r\n   * Creates a new Room, the primary construct for a LiveKit session.\r\n   * @param options\r\n   */\r\n  constructor(options) {\r\n    var _this;\r\n    var _a, _b, _c;\r\n    super();\r\n    _this = this;\r\n    this.state = ConnectionState.Disconnected;\r\n    /**\r\n     * list of participants that are actively speaking. when this changes\r\n     * a [[RoomEvent.ActiveSpeakersChanged]] event is fired\r\n     */\r\n    this.activeSpeakers = [];\r\n    /** reflects the sender encryption status of the local participant */\r\n    this.isE2EEEnabled = false;\r\n    this.audioEnabled = true;\r\n    this.isVideoPlaybackBlocked = false;\r\n    this.log = livekitLogger;\r\n    this.bufferedEvents = [];\r\n    this.isResuming = false;\r\n    this.byteStreamControllers = new Map();\r\n    this.textStreamControllers = new Map();\r\n    this.byteStreamHandlers = new Map();\r\n    this.textStreamHandlers = new Map();\r\n    this.rpcHandlers = new Map();\r\n    this.connect = (url, token, opts) => __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (!isBrowserSupported()) {\r\n        if (isReactNative()) {\r\n          throw Error(\"WebRTC isn't detected, have you called registerGlobals?\");\r\n        } else {\r\n          throw Error(\"LiveKit doesn't seem to be supported on this browser. Try to update your browser and make sure no browser extensions are disabling webRTC.\");\r\n        }\r\n      }\r\n      // In case a disconnect called happened right before the connect call, make sure the disconnect is completed first by awaiting its lock\r\n      const unlockDisconnect = yield this.disconnectLock.lock();\r\n      if (this.state === ConnectionState.Connected) {\r\n        // when the state is reconnecting or connected, this function returns immediately\r\n        this.log.info(\"already connected to room \".concat(this.name), this.logContext);\r\n        unlockDisconnect();\r\n        return Promise.resolve();\r\n      }\r\n      if (this.connectFuture) {\r\n        unlockDisconnect();\r\n        return this.connectFuture.promise;\r\n      }\r\n      this.setAndEmitConnectionState(ConnectionState.Connecting);\r\n      if (((_a = this.regionUrlProvider) === null || _a === void 0 ? void 0 : _a.getServerUrl().toString()) !== url) {\r\n        this.regionUrl = undefined;\r\n        this.regionUrlProvider = undefined;\r\n      }\r\n      if (isCloud(new URL(url))) {\r\n        if (this.regionUrlProvider === undefined) {\r\n          this.regionUrlProvider = new RegionUrlProvider(url, token);\r\n        } else {\r\n          this.regionUrlProvider.updateToken(token);\r\n        }\r\n        // trigger the first fetch without waiting for a response\r\n        // if initial connection fails, this will speed up picking regional url\r\n        // on subsequent runs\r\n        this.regionUrlProvider.fetchRegionSettings().then(settings => {\r\n          var _a;\r\n          (_a = this.regionUrlProvider) === null || _a === void 0 ? void 0 : _a.setServerReportedRegions(settings);\r\n        }).catch(e => {\r\n          this.log.warn('could not fetch region settings', Object.assign(Object.assign({}, this.logContext), {\r\n            error: e\r\n          }));\r\n        });\r\n      }\r\n      const connectFn = (resolve, reject, regionUrl) => __awaiter(this, void 0, void 0, function* () {\r\n        var _a, _b;\r\n        if (this.abortController) {\r\n          this.abortController.abort();\r\n        }\r\n        // explicit creation as local var needed to satisfy TS compiler when passing it to `attemptConnection` further down\r\n        const abortController = new AbortController();\r\n        this.abortController = abortController;\r\n        // at this point the intention to connect has been signalled so we can allow cancelling of the connection via disconnect() again\r\n        unlockDisconnect === null || unlockDisconnect === void 0 ? void 0 : unlockDisconnect();\r\n        try {\r\n          yield this.attemptConnection(regionUrl !== null && regionUrl !== void 0 ? regionUrl : url, token, opts, abortController);\r\n          this.abortController = undefined;\r\n          resolve();\r\n        } catch (e) {\r\n          if (this.regionUrlProvider && e instanceof ConnectionError && e.reason !== ConnectionErrorReason.Cancelled && e.reason !== ConnectionErrorReason.NotAllowed) {\r\n            let nextUrl = null;\r\n            try {\r\n              nextUrl = yield this.regionUrlProvider.getNextBestRegionUrl((_a = this.abortController) === null || _a === void 0 ? void 0 : _a.signal);\r\n            } catch (error) {\r\n              if (error instanceof ConnectionError && (error.status === 401 || error.reason === ConnectionErrorReason.Cancelled)) {\r\n                this.handleDisconnect(this.options.stopLocalTrackOnUnpublish);\r\n                reject(error);\r\n                return;\r\n              }\r\n            }\r\n            if (nextUrl && !((_b = this.abortController) === null || _b === void 0 ? void 0 : _b.signal.aborted)) {\r\n              this.log.info(\"Initial connection failed with ConnectionError: \".concat(e.message, \". Retrying with another region: \").concat(nextUrl), this.logContext);\r\n              this.recreateEngine();\r\n              yield connectFn(resolve, reject, nextUrl);\r\n            } else {\r\n              this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, getDisconnectReasonFromConnectionError(e));\r\n              reject(e);\r\n            }\r\n          } else {\r\n            let disconnectReason = DisconnectReason.UNKNOWN_REASON;\r\n            if (e instanceof ConnectionError) {\r\n              disconnectReason = getDisconnectReasonFromConnectionError(e);\r\n            }\r\n            this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, disconnectReason);\r\n            reject(e);\r\n          }\r\n        }\r\n      });\r\n      const regionUrl = this.regionUrl;\r\n      this.regionUrl = undefined;\r\n      this.connectFuture = new Future((resolve, reject) => {\r\n        connectFn(resolve, reject, regionUrl);\r\n      }, () => {\r\n        this.clearConnectionFutures();\r\n      });\r\n      return this.connectFuture.promise;\r\n    });\r\n    this.connectSignal = (url, token, engine, connectOptions, roomOptions, abortController) => __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c;\r\n      const joinResponse = yield engine.join(url, token, {\r\n        autoSubscribe: connectOptions.autoSubscribe,\r\n        adaptiveStream: typeof roomOptions.adaptiveStream === 'object' ? true : roomOptions.adaptiveStream,\r\n        maxRetries: connectOptions.maxRetries,\r\n        e2eeEnabled: !!this.e2eeManager,\r\n        websocketTimeout: connectOptions.websocketTimeout\r\n      }, abortController.signal);\r\n      let serverInfo = joinResponse.serverInfo;\r\n      if (!serverInfo) {\r\n        serverInfo = {\r\n          version: joinResponse.serverVersion,\r\n          region: joinResponse.serverRegion\r\n        };\r\n      }\r\n      this.serverInfo = serverInfo;\r\n      this.log.debug(\"connected to Livekit Server \".concat(Object.entries(serverInfo).map(_ref => {\r\n        let [key, value] = _ref;\r\n        return \"\".concat(key, \": \").concat(value);\r\n      }).join(', ')), {\r\n        room: (_a = joinResponse.room) === null || _a === void 0 ? void 0 : _a.name,\r\n        roomSid: (_b = joinResponse.room) === null || _b === void 0 ? void 0 : _b.sid,\r\n        identity: (_c = joinResponse.participant) === null || _c === void 0 ? void 0 : _c.identity\r\n      });\r\n      if (!serverInfo.version) {\r\n        throw new UnsupportedServer('unknown server version');\r\n      }\r\n      if (serverInfo.version === '0.15.1' && this.options.dynacast) {\r\n        this.log.debug('disabling dynacast due to server version', this.logContext);\r\n        // dynacast has a bug in 0.15.1, so we cannot use it then\r\n        roomOptions.dynacast = false;\r\n      }\r\n      return joinResponse;\r\n    });\r\n    this.applyJoinResponse = joinResponse => {\r\n      const pi = joinResponse.participant;\r\n      this.localParticipant.sid = pi.sid;\r\n      this.localParticipant.identity = pi.identity;\r\n      this.localParticipant.setEnabledPublishCodecs(joinResponse.enabledPublishCodecs);\r\n      if (this.options.e2ee && this.e2eeManager) {\r\n        try {\r\n          this.e2eeManager.setSifTrailer(joinResponse.sifTrailer);\r\n        } catch (e) {\r\n          this.log.error(e instanceof Error ? e.message : 'Could not set SifTrailer', Object.assign(Object.assign({}, this.logContext), {\r\n            error: e\r\n          }));\r\n        }\r\n      }\r\n      // populate remote participants, these should not trigger new events\r\n      this.handleParticipantUpdates([pi, ...joinResponse.otherParticipants]);\r\n      if (joinResponse.room) {\r\n        this.handleRoomUpdate(joinResponse.room);\r\n      }\r\n    };\r\n    this.attemptConnection = (url, token, opts, abortController) => __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      if (this.state === ConnectionState.Reconnecting || this.isResuming || ((_a = this.engine) === null || _a === void 0 ? void 0 : _a.pendingReconnect)) {\r\n        this.log.info('Reconnection attempt replaced by new connection attempt', this.logContext);\r\n        // make sure we close and recreate the existing engine in order to get rid of any potentially ongoing reconnection attempts\r\n        this.recreateEngine();\r\n      } else {\r\n        // create engine if previously disconnected\r\n        this.maybeCreateEngine();\r\n      }\r\n      if ((_b = this.regionUrlProvider) === null || _b === void 0 ? void 0 : _b.isCloud()) {\r\n        this.engine.setRegionUrlProvider(this.regionUrlProvider);\r\n      }\r\n      this.acquireAudioContext();\r\n      this.connOptions = Object.assign(Object.assign({}, roomConnectOptionDefaults), opts);\r\n      if (this.connOptions.rtcConfig) {\r\n        this.engine.rtcConfig = this.connOptions.rtcConfig;\r\n      }\r\n      if (this.connOptions.peerConnectionTimeout) {\r\n        this.engine.peerConnectionTimeout = this.connOptions.peerConnectionTimeout;\r\n      }\r\n      try {\r\n        const joinResponse = yield this.connectSignal(url, token, this.engine, this.connOptions, this.options, abortController);\r\n        this.applyJoinResponse(joinResponse);\r\n        // forward metadata changed for the local participant\r\n        this.setupLocalParticipantEvents();\r\n        this.emit(RoomEvent.SignalConnected);\r\n      } catch (err) {\r\n        yield this.engine.close();\r\n        this.recreateEngine();\r\n        const resultingError = new ConnectionError(\"could not establish signal connection\", ConnectionErrorReason.ServerUnreachable);\r\n        if (err instanceof Error) {\r\n          resultingError.message = \"\".concat(resultingError.message, \": \").concat(err.message);\r\n        }\r\n        if (err instanceof ConnectionError) {\r\n          resultingError.reason = err.reason;\r\n          resultingError.status = err.status;\r\n        }\r\n        this.log.debug(\"error trying to establish signal connection\", Object.assign(Object.assign({}, this.logContext), {\r\n          error: err\r\n        }));\r\n        throw resultingError;\r\n      }\r\n      if (abortController.signal.aborted) {\r\n        yield this.engine.close();\r\n        this.recreateEngine();\r\n        throw new ConnectionError(\"Connection attempt aborted\", ConnectionErrorReason.Cancelled);\r\n      }\r\n      try {\r\n        yield this.engine.waitForPCInitialConnection(this.connOptions.peerConnectionTimeout, abortController);\r\n      } catch (e) {\r\n        yield this.engine.close();\r\n        this.recreateEngine();\r\n        throw e;\r\n      }\r\n      // also hook unload event\r\n      if (isWeb() && this.options.disconnectOnPageLeave) {\r\n        // capturing both 'pagehide' and 'beforeunload' to capture broadest set of browser behaviors\r\n        window.addEventListener('pagehide', this.onPageLeave);\r\n        window.addEventListener('beforeunload', this.onPageLeave);\r\n      }\r\n      if (isWeb()) {\r\n        document.addEventListener('freeze', this.onPageLeave);\r\n      }\r\n      this.setAndEmitConnectionState(ConnectionState.Connected);\r\n      this.emit(RoomEvent.Connected);\r\n      this.registerConnectionReconcile();\r\n    });\r\n    /**\r\n     * disconnects the room, emits [[RoomEvent.Disconnected]]\r\n     */\r\n    this.disconnect = function () {\r\n      for (var _len = arguments.length, args_1 = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        args_1[_key] = arguments[_key];\r\n      }\r\n      return __awaiter(_this, [...args_1], void 0, function () {\r\n        var _this2 = this;\r\n        let stopTracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n        return function* () {\r\n          var _a, _b, _c, _d;\r\n          const unlock = yield _this2.disconnectLock.lock();\r\n          try {\r\n            if (_this2.state === ConnectionState.Disconnected) {\r\n              _this2.log.debug('already disconnected', _this2.logContext);\r\n              return;\r\n            }\r\n            _this2.log.info('disconnect from room', Object.assign({}, _this2.logContext));\r\n            if (_this2.state === ConnectionState.Connecting || _this2.state === ConnectionState.Reconnecting || _this2.isResuming) {\r\n              // try aborting pending connection attempt\r\n              _this2.log.warn('abort connection attempt', _this2.logContext);\r\n              (_a = _this2.abortController) === null || _a === void 0 ? void 0 : _a.abort();\r\n              // in case the abort controller didn't manage to cancel the connection attempt, reject the connect promise explicitly\r\n              (_c = (_b = _this2.connectFuture) === null || _b === void 0 ? void 0 : _b.reject) === null || _c === void 0 ? void 0 : _c.call(_b, new ConnectionError('Client initiated disconnect', ConnectionErrorReason.Cancelled));\r\n              _this2.connectFuture = undefined;\r\n            }\r\n            // send leave\r\n            if (!((_d = _this2.engine) === null || _d === void 0 ? void 0 : _d.client.isDisconnected)) {\r\n              yield _this2.engine.client.sendLeave();\r\n            }\r\n            // close engine (also closes client)\r\n            if (_this2.engine) {\r\n              yield _this2.engine.close();\r\n            }\r\n            _this2.handleDisconnect(stopTracks, DisconnectReason.CLIENT_INITIATED);\r\n            /* @ts-ignore */\r\n            _this2.engine = undefined;\r\n          } finally {\r\n            unlock();\r\n          }\r\n        }();\r\n      });\r\n    };\r\n    this.onPageLeave = () => __awaiter(this, void 0, void 0, function* () {\r\n      this.log.info('Page leave detected, disconnecting', this.logContext);\r\n      yield this.disconnect();\r\n    });\r\n    /**\r\n     * Browsers have different policies regarding audio playback. Most requiring\r\n     * some form of user interaction (click/tap/etc).\r\n     * In those cases, audio will be silent until a click/tap triggering one of the following\r\n     * - `startAudio`\r\n     * - `getUserMedia`\r\n     */\r\n    this.startAudio = () => __awaiter(this, void 0, void 0, function* () {\r\n      const elements = [];\r\n      const browser = getBrowser();\r\n      if (browser && browser.os === 'iOS') {\r\n        /**\r\n         * iOS blocks audio element playback if\r\n         * - user is not publishing audio themselves and\r\n         * - no other audio source is playing\r\n         *\r\n         * as a workaround, we create an audio element with an empty track, so that\r\n         * silent audio is always playing\r\n         */\r\n        const audioId = 'livekit-dummy-audio-el';\r\n        let dummyAudioEl = document.getElementById(audioId);\r\n        if (!dummyAudioEl) {\r\n          dummyAudioEl = document.createElement('audio');\r\n          dummyAudioEl.id = audioId;\r\n          dummyAudioEl.autoplay = true;\r\n          dummyAudioEl.hidden = true;\r\n          const track = getEmptyAudioStreamTrack();\r\n          track.enabled = true;\r\n          const stream = new MediaStream([track]);\r\n          dummyAudioEl.srcObject = stream;\r\n          document.addEventListener('visibilitychange', () => {\r\n            if (!dummyAudioEl) {\r\n              return;\r\n            }\r\n            // set the srcObject to null on page hide in order to prevent lock screen controls to show up for it\r\n            dummyAudioEl.srcObject = document.hidden ? null : stream;\r\n            if (!document.hidden) {\r\n              this.log.debug('page visible again, triggering startAudio to resume playback and update playback status', this.logContext);\r\n              this.startAudio();\r\n            }\r\n          });\r\n          document.body.append(dummyAudioEl);\r\n          this.once(RoomEvent.Disconnected, () => {\r\n            dummyAudioEl === null || dummyAudioEl === void 0 ? void 0 : dummyAudioEl.remove();\r\n            dummyAudioEl = null;\r\n          });\r\n        }\r\n        elements.push(dummyAudioEl);\r\n      }\r\n      this.remoteParticipants.forEach(p => {\r\n        p.audioTrackPublications.forEach(t => {\r\n          if (t.track) {\r\n            t.track.attachedElements.forEach(e => {\r\n              elements.push(e);\r\n            });\r\n          }\r\n        });\r\n      });\r\n      try {\r\n        yield Promise.all([this.acquireAudioContext(), ...elements.map(e => {\r\n          e.muted = false;\r\n          return e.play();\r\n        })]);\r\n        this.handleAudioPlaybackStarted();\r\n      } catch (err) {\r\n        this.handleAudioPlaybackFailed(err);\r\n        throw err;\r\n      }\r\n    });\r\n    this.startVideo = () => __awaiter(this, void 0, void 0, function* () {\r\n      const elements = [];\r\n      for (const p of this.remoteParticipants.values()) {\r\n        p.videoTrackPublications.forEach(tr => {\r\n          var _a;\r\n          (_a = tr.track) === null || _a === void 0 ? void 0 : _a.attachedElements.forEach(el => {\r\n            if (!elements.includes(el)) {\r\n              elements.push(el);\r\n            }\r\n          });\r\n        });\r\n      }\r\n      yield Promise.all(elements.map(el => el.play())).then(() => {\r\n        this.handleVideoPlaybackStarted();\r\n      }).catch(e => {\r\n        if (e.name === 'NotAllowedError') {\r\n          this.handleVideoPlaybackFailed();\r\n        } else {\r\n          this.log.warn('Resuming video playback failed, make sure you call `startVideo` directly in a user gesture handler', this.logContext);\r\n        }\r\n      });\r\n    });\r\n    this.handleRestarting = () => {\r\n      this.clearConnectionReconcile();\r\n      // in case we went from resuming to full-reconnect, make sure to reflect it on the isResuming flag\r\n      this.isResuming = false;\r\n      // also unwind existing participants & existing subscriptions\r\n      for (const p of this.remoteParticipants.values()) {\r\n        this.handleParticipantDisconnected(p.identity, p);\r\n      }\r\n      if (this.setAndEmitConnectionState(ConnectionState.Reconnecting)) {\r\n        this.emit(RoomEvent.Reconnecting);\r\n      }\r\n    };\r\n    this.handleSignalRestarted = joinResponse => __awaiter(this, void 0, void 0, function* () {\r\n      this.log.debug(\"signal reconnected to server, region \".concat(joinResponse.serverRegion), Object.assign(Object.assign({}, this.logContext), {\r\n        region: joinResponse.serverRegion\r\n      }));\r\n      this.bufferedEvents = [];\r\n      this.applyJoinResponse(joinResponse);\r\n      try {\r\n        // unpublish & republish tracks\r\n        yield this.localParticipant.republishAllTracks(undefined, true);\r\n      } catch (error) {\r\n        this.log.error('error trying to re-publish tracks after reconnection', Object.assign(Object.assign({}, this.logContext), {\r\n          error\r\n        }));\r\n      }\r\n      try {\r\n        yield this.engine.waitForRestarted();\r\n        this.log.debug(\"fully reconnected to server\", Object.assign(Object.assign({}, this.logContext), {\r\n          region: joinResponse.serverRegion\r\n        }));\r\n      } catch (_a) {\r\n        // reconnection failed, handleDisconnect is being invoked already, just return here\r\n        return;\r\n      }\r\n      this.setAndEmitConnectionState(ConnectionState.Connected);\r\n      this.emit(RoomEvent.Reconnected);\r\n      this.registerConnectionReconcile();\r\n      this.emitBufferedEvents();\r\n    });\r\n    this.handleParticipantUpdates = participantInfos => {\r\n      // handle changes to participant state, and send events\r\n      participantInfos.forEach(info => {\r\n        var _a;\r\n        if (info.identity === this.localParticipant.identity) {\r\n          this.localParticipant.updateInfo(info);\r\n          return;\r\n        }\r\n        // LiveKit server doesn't send identity info prior to version 1.5.2 in disconnect updates\r\n        // so we try to map an empty identity to an already known sID manually\r\n        if (info.identity === '') {\r\n          info.identity = (_a = this.sidToIdentity.get(info.sid)) !== null && _a !== void 0 ? _a : '';\r\n        }\r\n        let remoteParticipant = this.remoteParticipants.get(info.identity);\r\n        // when it's disconnected, send updates\r\n        if (info.state === ParticipantInfo_State.DISCONNECTED) {\r\n          this.handleParticipantDisconnected(info.identity, remoteParticipant);\r\n        } else {\r\n          // create participant if doesn't exist\r\n          remoteParticipant = this.getOrCreateParticipant(info.identity, info);\r\n        }\r\n      });\r\n    };\r\n    // updates are sent only when there's a change to speaker ordering\r\n    this.handleActiveSpeakersUpdate = speakers => {\r\n      const activeSpeakers = [];\r\n      const seenSids = {};\r\n      speakers.forEach(speaker => {\r\n        seenSids[speaker.sid] = true;\r\n        if (speaker.sid === this.localParticipant.sid) {\r\n          this.localParticipant.audioLevel = speaker.level;\r\n          this.localParticipant.setIsSpeaking(true);\r\n          activeSpeakers.push(this.localParticipant);\r\n        } else {\r\n          const p = this.getRemoteParticipantBySid(speaker.sid);\r\n          if (p) {\r\n            p.audioLevel = speaker.level;\r\n            p.setIsSpeaking(true);\r\n            activeSpeakers.push(p);\r\n          }\r\n        }\r\n      });\r\n      if (!seenSids[this.localParticipant.sid]) {\r\n        this.localParticipant.audioLevel = 0;\r\n        this.localParticipant.setIsSpeaking(false);\r\n      }\r\n      this.remoteParticipants.forEach(p => {\r\n        if (!seenSids[p.sid]) {\r\n          p.audioLevel = 0;\r\n          p.setIsSpeaking(false);\r\n        }\r\n      });\r\n      this.activeSpeakers = activeSpeakers;\r\n      this.emitWhenConnected(RoomEvent.ActiveSpeakersChanged, activeSpeakers);\r\n    };\r\n    // process list of changed speakers\r\n    this.handleSpeakersChanged = speakerUpdates => {\r\n      const lastSpeakers = new Map();\r\n      this.activeSpeakers.forEach(p => {\r\n        const remoteParticipant = this.remoteParticipants.get(p.identity);\r\n        if (remoteParticipant && remoteParticipant.sid !== p.sid) {\r\n          return;\r\n        }\r\n        lastSpeakers.set(p.sid, p);\r\n      });\r\n      speakerUpdates.forEach(speaker => {\r\n        let p = this.getRemoteParticipantBySid(speaker.sid);\r\n        if (speaker.sid === this.localParticipant.sid) {\r\n          p = this.localParticipant;\r\n        }\r\n        if (!p) {\r\n          return;\r\n        }\r\n        p.audioLevel = speaker.level;\r\n        p.setIsSpeaking(speaker.active);\r\n        if (speaker.active) {\r\n          lastSpeakers.set(speaker.sid, p);\r\n        } else {\r\n          lastSpeakers.delete(speaker.sid);\r\n        }\r\n      });\r\n      const activeSpeakers = Array.from(lastSpeakers.values());\r\n      activeSpeakers.sort((a, b) => b.audioLevel - a.audioLevel);\r\n      this.activeSpeakers = activeSpeakers;\r\n      this.emitWhenConnected(RoomEvent.ActiveSpeakersChanged, activeSpeakers);\r\n    };\r\n    this.handleStreamStateUpdate = streamStateUpdate => {\r\n      streamStateUpdate.streamStates.forEach(streamState => {\r\n        const participant = this.getRemoteParticipantBySid(streamState.participantSid);\r\n        if (!participant) {\r\n          return;\r\n        }\r\n        const pub = participant.getTrackPublicationBySid(streamState.trackSid);\r\n        if (!pub || !pub.track) {\r\n          return;\r\n        }\r\n        const newStreamState = Track.streamStateFromProto(streamState.state);\r\n        if (newStreamState !== pub.track.streamState) {\r\n          pub.track.streamState = newStreamState;\r\n          participant.emit(ParticipantEvent.TrackStreamStateChanged, pub, pub.track.streamState);\r\n          this.emitWhenConnected(RoomEvent.TrackStreamStateChanged, pub, pub.track.streamState, participant);\r\n        }\r\n      });\r\n    };\r\n    this.handleSubscriptionPermissionUpdate = update => {\r\n      const participant = this.getRemoteParticipantBySid(update.participantSid);\r\n      if (!participant) {\r\n        return;\r\n      }\r\n      const pub = participant.getTrackPublicationBySid(update.trackSid);\r\n      if (!pub) {\r\n        return;\r\n      }\r\n      pub.setAllowed(update.allowed);\r\n    };\r\n    this.handleSubscriptionError = update => {\r\n      const participant = Array.from(this.remoteParticipants.values()).find(p => p.trackPublications.has(update.trackSid));\r\n      if (!participant) {\r\n        return;\r\n      }\r\n      const pub = participant.getTrackPublicationBySid(update.trackSid);\r\n      if (!pub) {\r\n        return;\r\n      }\r\n      pub.setSubscriptionError(update.err);\r\n    };\r\n    this.handleDataPacket = packet => {\r\n      // find the participant\r\n      const participant = this.remoteParticipants.get(packet.participantIdentity);\r\n      if (packet.value.case === 'user') {\r\n        this.handleUserPacket(participant, packet.value.value, packet.kind);\r\n      } else if (packet.value.case === 'transcription') {\r\n        this.handleTranscription(participant, packet.value.value);\r\n      } else if (packet.value.case === 'sipDtmf') {\r\n        this.handleSipDtmf(participant, packet.value.value);\r\n      } else if (packet.value.case === 'chatMessage') {\r\n        this.handleChatMessage(participant, packet.value.value);\r\n      } else if (packet.value.case === 'metrics') {\r\n        this.handleMetrics(packet.value.value, participant);\r\n      } else if (packet.value.case === 'streamHeader') {\r\n        this.handleStreamHeader(packet.value.value, packet.participantIdentity);\r\n      } else if (packet.value.case === 'streamChunk') {\r\n        this.handleStreamChunk(packet.value.value);\r\n      } else if (packet.value.case === 'streamTrailer') {\r\n        this.handleStreamTrailer(packet.value.value);\r\n      } else if (packet.value.case === 'rpcRequest') {\r\n        const rpc = packet.value.value;\r\n        this.handleIncomingRpcRequest(packet.participantIdentity, rpc.id, rpc.method, rpc.payload, rpc.responseTimeoutMs, rpc.version);\r\n      }\r\n    };\r\n    this.handleUserPacket = (participant, userPacket, kind) => {\r\n      this.emit(RoomEvent.DataReceived, userPacket.payload, participant, kind, userPacket.topic);\r\n      // also emit on the participant\r\n      participant === null || participant === void 0 ? void 0 : participant.emit(ParticipantEvent.DataReceived, userPacket.payload, kind);\r\n    };\r\n    this.handleSipDtmf = (participant, dtmf) => {\r\n      this.emit(RoomEvent.SipDTMFReceived, dtmf, participant);\r\n      // also emit on the participant\r\n      participant === null || participant === void 0 ? void 0 : participant.emit(ParticipantEvent.SipDTMFReceived, dtmf);\r\n    };\r\n    this.bufferedSegments = new Map();\r\n    this.handleTranscription = (_remoteParticipant, transcription) => {\r\n      // find the participant\r\n      const participant = transcription.transcribedParticipantIdentity === this.localParticipant.identity ? this.localParticipant : this.getParticipantByIdentity(transcription.transcribedParticipantIdentity);\r\n      const publication = participant === null || participant === void 0 ? void 0 : participant.trackPublications.get(transcription.trackId);\r\n      const segments = extractTranscriptionSegments(transcription, this.transcriptionReceivedTimes);\r\n      publication === null || publication === void 0 ? void 0 : publication.emit(TrackEvent.TranscriptionReceived, segments);\r\n      participant === null || participant === void 0 ? void 0 : participant.emit(ParticipantEvent.TranscriptionReceived, segments, publication);\r\n      this.emit(RoomEvent.TranscriptionReceived, segments, participant, publication);\r\n    };\r\n    this.handleChatMessage = (participant, chatMessage) => {\r\n      const msg = extractChatMessage(chatMessage);\r\n      this.emit(RoomEvent.ChatMessage, msg, participant);\r\n    };\r\n    this.handleMetrics = (metrics, participant) => {\r\n      this.emit(RoomEvent.MetricsReceived, metrics, participant);\r\n    };\r\n    this.handleAudioPlaybackStarted = () => {\r\n      if (this.canPlaybackAudio) {\r\n        return;\r\n      }\r\n      this.audioEnabled = true;\r\n      this.emit(RoomEvent.AudioPlaybackStatusChanged, true);\r\n    };\r\n    this.handleAudioPlaybackFailed = e => {\r\n      this.log.warn('could not playback audio', Object.assign(Object.assign({}, this.logContext), {\r\n        error: e\r\n      }));\r\n      if (!this.canPlaybackAudio) {\r\n        return;\r\n      }\r\n      this.audioEnabled = false;\r\n      this.emit(RoomEvent.AudioPlaybackStatusChanged, false);\r\n    };\r\n    this.handleVideoPlaybackStarted = () => {\r\n      if (this.isVideoPlaybackBlocked) {\r\n        this.isVideoPlaybackBlocked = false;\r\n        this.emit(RoomEvent.VideoPlaybackStatusChanged, true);\r\n      }\r\n    };\r\n    this.handleVideoPlaybackFailed = () => {\r\n      if (!this.isVideoPlaybackBlocked) {\r\n        this.isVideoPlaybackBlocked = true;\r\n        this.emit(RoomEvent.VideoPlaybackStatusChanged, false);\r\n      }\r\n    };\r\n    this.handleDeviceChange = () => __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.os) !== 'iOS') {\r\n        // default devices are non deterministic on iOS, so we don't attempt to select them here\r\n        yield this.selectDefaultDevices();\r\n      }\r\n      this.emit(RoomEvent.MediaDevicesChanged);\r\n    });\r\n    this.handleRoomUpdate = room => {\r\n      const oldRoom = this.roomInfo;\r\n      this.roomInfo = room;\r\n      if (oldRoom && oldRoom.metadata !== room.metadata) {\r\n        this.emitWhenConnected(RoomEvent.RoomMetadataChanged, room.metadata);\r\n      }\r\n      if ((oldRoom === null || oldRoom === void 0 ? void 0 : oldRoom.activeRecording) !== room.activeRecording) {\r\n        this.emitWhenConnected(RoomEvent.RecordingStatusChanged, room.activeRecording);\r\n      }\r\n    };\r\n    this.handleConnectionQualityUpdate = update => {\r\n      update.updates.forEach(info => {\r\n        if (info.participantSid === this.localParticipant.sid) {\r\n          this.localParticipant.setConnectionQuality(info.quality);\r\n          return;\r\n        }\r\n        const participant = this.getRemoteParticipantBySid(info.participantSid);\r\n        if (participant) {\r\n          participant.setConnectionQuality(info.quality);\r\n        }\r\n      });\r\n    };\r\n    this.onLocalParticipantMetadataChanged = metadata => {\r\n      this.emit(RoomEvent.ParticipantMetadataChanged, metadata, this.localParticipant);\r\n    };\r\n    this.onLocalParticipantNameChanged = name => {\r\n      this.emit(RoomEvent.ParticipantNameChanged, name, this.localParticipant);\r\n    };\r\n    this.onLocalAttributesChanged = changedAttributes => {\r\n      this.emit(RoomEvent.ParticipantAttributesChanged, changedAttributes, this.localParticipant);\r\n    };\r\n    this.onLocalTrackMuted = pub => {\r\n      this.emit(RoomEvent.TrackMuted, pub, this.localParticipant);\r\n    };\r\n    this.onLocalTrackUnmuted = pub => {\r\n      this.emit(RoomEvent.TrackUnmuted, pub, this.localParticipant);\r\n    };\r\n    this.onTrackProcessorUpdate = processor => {\r\n      var _a;\r\n      (_a = processor === null || processor === void 0 ? void 0 : processor.onPublish) === null || _a === void 0 ? void 0 : _a.call(processor, this);\r\n    };\r\n    this.onLocalTrackPublished = pub => __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c, _d, _e, _f;\r\n      (_a = pub.track) === null || _a === void 0 ? void 0 : _a.on(TrackEvent.TrackProcessorUpdate, this.onTrackProcessorUpdate);\r\n      (_b = pub.track) === null || _b === void 0 ? void 0 : _b.on(TrackEvent.Restarted, this.onLocalTrackRestarted);\r\n      (_e = (_d = (_c = pub.track) === null || _c === void 0 ? void 0 : _c.getProcessor()) === null || _d === void 0 ? void 0 : _d.onPublish) === null || _e === void 0 ? void 0 : _e.call(_d, this);\r\n      this.emit(RoomEvent.LocalTrackPublished, pub, this.localParticipant);\r\n      if (isLocalAudioTrack(pub.track)) {\r\n        const trackIsSilent = yield pub.track.checkForSilence();\r\n        if (trackIsSilent) {\r\n          this.emit(RoomEvent.LocalAudioSilenceDetected, pub);\r\n        }\r\n      }\r\n      const deviceId = yield (_f = pub.track) === null || _f === void 0 ? void 0 : _f.getDeviceId(false);\r\n      const deviceKind = sourceToKind(pub.source);\r\n      if (deviceKind && deviceId && deviceId !== this.localParticipant.activeDeviceMap.get(deviceKind)) {\r\n        this.localParticipant.activeDeviceMap.set(deviceKind, deviceId);\r\n        this.emit(RoomEvent.ActiveDeviceChanged, deviceKind, deviceId);\r\n      }\r\n    });\r\n    this.onLocalTrackUnpublished = pub => {\r\n      var _a, _b;\r\n      (_a = pub.track) === null || _a === void 0 ? void 0 : _a.off(TrackEvent.TrackProcessorUpdate, this.onTrackProcessorUpdate);\r\n      (_b = pub.track) === null || _b === void 0 ? void 0 : _b.off(TrackEvent.Restarted, this.onLocalTrackRestarted);\r\n      this.emit(RoomEvent.LocalTrackUnpublished, pub, this.localParticipant);\r\n    };\r\n    this.onLocalTrackRestarted = track => __awaiter(this, void 0, void 0, function* () {\r\n      const deviceId = yield track.getDeviceId(false);\r\n      const deviceKind = sourceToKind(track.source);\r\n      if (deviceKind && deviceId && deviceId !== this.localParticipant.activeDeviceMap.get(deviceKind)) {\r\n        this.log.debug(\"local track restarted, setting \".concat(deviceKind, \" \").concat(deviceId, \" active\"), this.logContext);\r\n        this.localParticipant.activeDeviceMap.set(deviceKind, deviceId);\r\n        this.emit(RoomEvent.ActiveDeviceChanged, deviceKind, deviceId);\r\n      }\r\n    });\r\n    this.onLocalConnectionQualityChanged = quality => {\r\n      this.emit(RoomEvent.ConnectionQualityChanged, quality, this.localParticipant);\r\n    };\r\n    this.onMediaDevicesError = (e, kind) => {\r\n      this.emit(RoomEvent.MediaDevicesError, e, kind);\r\n    };\r\n    this.onLocalParticipantPermissionsChanged = prevPermissions => {\r\n      this.emit(RoomEvent.ParticipantPermissionsChanged, prevPermissions, this.localParticipant);\r\n    };\r\n    this.onLocalChatMessageSent = msg => {\r\n      this.emit(RoomEvent.ChatMessage, msg, this.localParticipant);\r\n    };\r\n    this.setMaxListeners(100);\r\n    this.remoteParticipants = new Map();\r\n    this.sidToIdentity = new Map();\r\n    this.options = Object.assign(Object.assign({}, roomOptionDefaults), options);\r\n    this.log = getLogger((_a = this.options.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.Room);\r\n    this.transcriptionReceivedTimes = new Map();\r\n    this.options.audioCaptureDefaults = Object.assign(Object.assign({}, audioDefaults), options === null || options === void 0 ? void 0 : options.audioCaptureDefaults);\r\n    this.options.videoCaptureDefaults = Object.assign(Object.assign({}, videoDefaults), options === null || options === void 0 ? void 0 : options.videoCaptureDefaults);\r\n    this.options.publishDefaults = Object.assign(Object.assign({}, publishDefaults), options === null || options === void 0 ? void 0 : options.publishDefaults);\r\n    this.maybeCreateEngine();\r\n    this.disconnectLock = new _();\r\n    this.localParticipant = new LocalParticipant('', '', this.engine, this.options, this.rpcHandlers);\r\n    if (this.options.videoCaptureDefaults.deviceId) {\r\n      this.localParticipant.activeDeviceMap.set('videoinput', unwrapConstraint(this.options.videoCaptureDefaults.deviceId));\r\n    }\r\n    if (this.options.audioCaptureDefaults.deviceId) {\r\n      this.localParticipant.activeDeviceMap.set('audioinput', unwrapConstraint(this.options.audioCaptureDefaults.deviceId));\r\n    }\r\n    if ((_b = this.options.audioOutput) === null || _b === void 0 ? void 0 : _b.deviceId) {\r\n      this.switchActiveDevice('audiooutput', unwrapConstraint(this.options.audioOutput.deviceId)).catch(e => this.log.warn(\"Could not set audio output: \".concat(e.message), this.logContext));\r\n    }\r\n    if (this.options.e2ee) {\r\n      this.setupE2EE();\r\n    }\r\n    if (isWeb()) {\r\n      const abortController = new AbortController();\r\n      // in order to catch device changes prior to room connection we need to register the event in the constructor\r\n      (_c = navigator.mediaDevices) === null || _c === void 0 ? void 0 : _c.addEventListener('devicechange', this.handleDeviceChange, {\r\n        signal: abortController.signal\r\n      });\r\n      if (Room.cleanupRegistry) {\r\n        Room.cleanupRegistry.register(this, () => {\r\n          abortController.abort();\r\n        });\r\n      }\r\n    }\r\n  }\r\n  registerTextStreamHandler(topic, callback) {\r\n    if (this.textStreamHandlers.has(topic)) {\r\n      throw new TypeError(\"A text stream handler for topic \\\"\".concat(topic, \"\\\" has already been set.\"));\r\n    }\r\n    this.textStreamHandlers.set(topic, callback);\r\n  }\r\n  unregisterTextStreamHandler(topic) {\r\n    this.textStreamHandlers.delete(topic);\r\n  }\r\n  registerByteStreamHandler(topic, callback) {\r\n    if (this.byteStreamHandlers.has(topic)) {\r\n      throw new TypeError(\"A byte stream handler for topic \\\"\".concat(topic, \"\\\" has already been set.\"));\r\n    }\r\n    this.byteStreamHandlers.set(topic, callback);\r\n  }\r\n  unregisterByteStreamHandler(topic) {\r\n    this.byteStreamHandlers.delete(topic);\r\n  }\r\n  /**\r\n   * Establishes the participant as a receiver for calls of the specified RPC method.\r\n   *\r\n   * @param method - The name of the indicated RPC method\r\n   * @param handler - Will be invoked when an RPC request for this method is received\r\n   * @returns A promise that resolves when the method is successfully registered\r\n   * @throws {Error} If a handler for this method is already registered (must call unregisterRpcMethod first)\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * room.localParticipant?.registerRpcMethod(\r\n   *   'greet',\r\n   *   async (data: RpcInvocationData) => {\r\n   *     console.log(`Received greeting from ${data.callerIdentity}: ${data.payload}`);\r\n   *     return `Hello, ${data.callerIdentity}!`;\r\n   *   }\r\n   * );\r\n   * ```\r\n   *\r\n   * The handler should return a Promise that resolves to a string.\r\n   * If unable to respond within `responseTimeout`, the request will result in an error on the caller's side.\r\n   *\r\n   * You may throw errors of type `RpcError` with a string `message` in the handler,\r\n   * and they will be received on the caller's side with the message intact.\r\n   * Other errors thrown in your handler will not be transmitted as-is, and will instead arrive to the caller as `1500` (\"Application Error\").\r\n   */\r\n  registerRpcMethod(method, handler) {\r\n    if (this.rpcHandlers.has(method)) {\r\n      throw Error(\"RPC handler already registered for method \".concat(method, \", unregisterRpcMethod before trying to register again\"));\r\n    }\r\n    this.rpcHandlers.set(method, handler);\r\n  }\r\n  /**\r\n   * Unregisters a previously registered RPC method.\r\n   *\r\n   * @param method - The name of the RPC method to unregister\r\n   */\r\n  unregisterRpcMethod(method) {\r\n    this.rpcHandlers.delete(method);\r\n  }\r\n  handleIncomingRpcRequest(callerIdentity, requestId, method, payload, responseTimeout, version) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield this.engine.publishRpcAck(callerIdentity, requestId);\r\n      if (version !== 1) {\r\n        yield this.engine.publishRpcResponse(callerIdentity, requestId, null, RpcError.builtIn('UNSUPPORTED_VERSION'));\r\n        return;\r\n      }\r\n      const handler = this.rpcHandlers.get(method);\r\n      if (!handler) {\r\n        yield this.engine.publishRpcResponse(callerIdentity, requestId, null, RpcError.builtIn('UNSUPPORTED_METHOD'));\r\n        return;\r\n      }\r\n      let responseError = null;\r\n      let responsePayload = null;\r\n      try {\r\n        const response = yield handler({\r\n          requestId,\r\n          callerIdentity,\r\n          payload,\r\n          responseTimeout\r\n        });\r\n        if (byteLength(response) > MAX_PAYLOAD_BYTES) {\r\n          responseError = RpcError.builtIn('RESPONSE_PAYLOAD_TOO_LARGE');\r\n          console.warn(\"RPC Response payload too large for \".concat(method));\r\n        } else {\r\n          responsePayload = response;\r\n        }\r\n      } catch (error) {\r\n        if (error instanceof RpcError) {\r\n          responseError = error;\r\n        } else {\r\n          console.warn(\"Uncaught error returned by RPC handler for \".concat(method, \". Returning APPLICATION_ERROR instead.\"), error);\r\n          responseError = RpcError.builtIn('APPLICATION_ERROR');\r\n        }\r\n      }\r\n      yield this.engine.publishRpcResponse(callerIdentity, requestId, responsePayload, responseError);\r\n    });\r\n  }\r\n  /**\r\n   * @experimental\r\n   */\r\n  setE2EEEnabled(enabled) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.e2eeManager) {\r\n        yield Promise.all([this.localParticipant.setE2EEEnabled(enabled)]);\r\n        if (this.localParticipant.identity !== '') {\r\n          this.e2eeManager.setParticipantCryptorEnabled(enabled, this.localParticipant.identity);\r\n        }\r\n      } else {\r\n        throw Error('e2ee not configured, please set e2ee settings within the room options');\r\n      }\r\n    });\r\n  }\r\n  setupE2EE() {\r\n    var _a;\r\n    if (this.options.e2ee) {\r\n      if ('e2eeManager' in this.options.e2ee) {\r\n        this.e2eeManager = this.options.e2ee.e2eeManager;\r\n      } else {\r\n        this.e2eeManager = new E2EEManager(this.options.e2ee);\r\n      }\r\n      this.e2eeManager.on(EncryptionEvent.ParticipantEncryptionStatusChanged, (enabled, participant) => {\r\n        if (isLocalParticipant(participant)) {\r\n          this.isE2EEEnabled = enabled;\r\n        }\r\n        this.emit(RoomEvent.ParticipantEncryptionStatusChanged, enabled, participant);\r\n      });\r\n      this.e2eeManager.on(EncryptionEvent.EncryptionError, error => this.emit(RoomEvent.EncryptionError, error));\r\n      (_a = this.e2eeManager) === null || _a === void 0 ? void 0 : _a.setup(this);\r\n    }\r\n  }\r\n  get logContext() {\r\n    var _a;\r\n    return {\r\n      room: this.name,\r\n      roomID: (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.sid,\r\n      participant: this.localParticipant.identity,\r\n      pID: this.localParticipant.sid\r\n    };\r\n  }\r\n  /**\r\n   * if the current room has a participant with `recorder: true` in its JWT grant\r\n   **/\r\n  get isRecording() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.activeRecording) !== null && _b !== void 0 ? _b : false;\r\n  }\r\n  /**\r\n   * server assigned unique room id.\r\n   * returns once a sid has been issued by the server.\r\n   */\r\n  getSid() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.state === ConnectionState.Disconnected) {\r\n        return '';\r\n      }\r\n      if (this.roomInfo && this.roomInfo.sid !== '') {\r\n        return this.roomInfo.sid;\r\n      }\r\n      return new Promise((resolve, reject) => {\r\n        const handleRoomUpdate = roomInfo => {\r\n          if (roomInfo.sid !== '') {\r\n            this.engine.off(EngineEvent.RoomUpdate, handleRoomUpdate);\r\n            resolve(roomInfo.sid);\r\n          }\r\n        };\r\n        this.engine.on(EngineEvent.RoomUpdate, handleRoomUpdate);\r\n        this.once(RoomEvent.Disconnected, () => {\r\n          this.engine.off(EngineEvent.RoomUpdate, handleRoomUpdate);\r\n          reject('Room disconnected before room server id was available');\r\n        });\r\n      });\r\n    });\r\n  }\r\n  /** user assigned name, derived from JWT token */\r\n  get name() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : '';\r\n  }\r\n  /** room metadata */\r\n  get metadata() {\r\n    var _a;\r\n    return (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.metadata;\r\n  }\r\n  get numParticipants() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.numParticipants) !== null && _b !== void 0 ? _b : 0;\r\n  }\r\n  get numPublishers() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.roomInfo) === null || _a === void 0 ? void 0 : _a.numPublishers) !== null && _b !== void 0 ? _b : 0;\r\n  }\r\n  maybeCreateEngine() {\r\n    if (this.engine && !this.engine.isClosed) {\r\n      return;\r\n    }\r\n    this.engine = new RTCEngine(this.options);\r\n    this.engine.on(EngineEvent.ParticipantUpdate, this.handleParticipantUpdates).on(EngineEvent.RoomUpdate, this.handleRoomUpdate).on(EngineEvent.SpeakersChanged, this.handleSpeakersChanged).on(EngineEvent.StreamStateChanged, this.handleStreamStateUpdate).on(EngineEvent.ConnectionQualityUpdate, this.handleConnectionQualityUpdate).on(EngineEvent.SubscriptionError, this.handleSubscriptionError).on(EngineEvent.SubscriptionPermissionUpdate, this.handleSubscriptionPermissionUpdate).on(EngineEvent.MediaTrackAdded, (mediaTrack, stream, receiver) => {\r\n      this.onTrackAdded(mediaTrack, stream, receiver);\r\n    }).on(EngineEvent.Disconnected, reason => {\r\n      this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, reason);\r\n    }).on(EngineEvent.ActiveSpeakersUpdate, this.handleActiveSpeakersUpdate).on(EngineEvent.DataPacketReceived, this.handleDataPacket).on(EngineEvent.Resuming, () => {\r\n      this.clearConnectionReconcile();\r\n      this.isResuming = true;\r\n      this.log.info('Resuming signal connection', this.logContext);\r\n      if (this.setAndEmitConnectionState(ConnectionState.SignalReconnecting)) {\r\n        this.emit(RoomEvent.SignalReconnecting);\r\n      }\r\n    }).on(EngineEvent.Resumed, () => {\r\n      this.registerConnectionReconcile();\r\n      this.isResuming = false;\r\n      this.log.info('Resumed signal connection', this.logContext);\r\n      this.updateSubscriptions();\r\n      this.emitBufferedEvents();\r\n      if (this.setAndEmitConnectionState(ConnectionState.Connected)) {\r\n        this.emit(RoomEvent.Reconnected);\r\n      }\r\n    }).on(EngineEvent.SignalResumed, () => {\r\n      this.bufferedEvents = [];\r\n      if (this.state === ConnectionState.Reconnecting || this.isResuming) {\r\n        this.sendSyncState();\r\n      }\r\n    }).on(EngineEvent.Restarting, this.handleRestarting).on(EngineEvent.SignalRestarted, this.handleSignalRestarted).on(EngineEvent.Offline, () => {\r\n      if (this.setAndEmitConnectionState(ConnectionState.Reconnecting)) {\r\n        this.emit(RoomEvent.Reconnecting);\r\n      }\r\n    }).on(EngineEvent.DCBufferStatusChanged, (status, kind) => {\r\n      this.emit(RoomEvent.DCBufferStatusChanged, status, kind);\r\n    }).on(EngineEvent.LocalTrackSubscribed, subscribedSid => {\r\n      const trackPublication = this.localParticipant.getTrackPublications().find(_ref2 => {\r\n        let {\r\n          trackSid\r\n        } = _ref2;\r\n        return trackSid === subscribedSid;\r\n      });\r\n      if (!trackPublication) {\r\n        this.log.warn('could not find local track subscription for subscribed event', this.logContext);\r\n        return;\r\n      }\r\n      this.localParticipant.emit(ParticipantEvent.LocalTrackSubscribed, trackPublication);\r\n      this.emitWhenConnected(RoomEvent.LocalTrackSubscribed, trackPublication, this.localParticipant);\r\n    }).on(EngineEvent.RoomMoved, roomMoved => {\r\n      this.log.debug('room moved', roomMoved);\r\n      if (roomMoved.room) {\r\n        this.handleRoomUpdate(roomMoved.room);\r\n      }\r\n      this.remoteParticipants.forEach((participant, identity) => {\r\n        this.handleParticipantDisconnected(identity, participant);\r\n      });\r\n      this.emit(RoomEvent.Moved, roomMoved.room.name);\r\n      if (roomMoved.participant) {\r\n        this.handleParticipantUpdates([roomMoved.participant, ...roomMoved.otherParticipants]);\r\n      } else {\r\n        this.handleParticipantUpdates(roomMoved.otherParticipants);\r\n      }\r\n    });\r\n    if (this.localParticipant) {\r\n      this.localParticipant.setupEngine(this.engine);\r\n    }\r\n    if (this.e2eeManager) {\r\n      this.e2eeManager.setupEngine(this.engine);\r\n    }\r\n  }\r\n  /**\r\n   * getLocalDevices abstracts navigator.mediaDevices.enumerateDevices.\r\n   * In particular, it requests device permissions by default if needed\r\n   * and makes sure the returned device does not consist of dummy devices\r\n   * @param kind\r\n   * @returns a list of available local devices\r\n   */\r\n  static getLocalDevices(kind) {\r\n    let requestPermissions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n    return DeviceManager.getInstance().getDevices(kind, requestPermissions);\r\n  }\r\n  /**\r\n   * prepareConnection should be called as soon as the page is loaded, in order\r\n   * to speed up the connection attempt. This function will\r\n   * - perform DNS resolution and pre-warm the DNS cache\r\n   * - establish TLS connection and cache TLS keys\r\n   *\r\n   * With LiveKit Cloud, it will also determine the best edge data center for\r\n   * the current client to connect to if a token is provided.\r\n   */\r\n  prepareConnection(url, token) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.state !== ConnectionState.Disconnected) {\r\n        return;\r\n      }\r\n      this.log.debug(\"prepareConnection to \".concat(url), this.logContext);\r\n      try {\r\n        if (isCloud(new URL(url)) && token) {\r\n          this.regionUrlProvider = new RegionUrlProvider(url, token);\r\n          const regionUrl = yield this.regionUrlProvider.getNextBestRegionUrl();\r\n          // we will not replace the regionUrl if an attempt had already started\r\n          // to avoid overriding regionUrl after a new connection attempt had started\r\n          if (regionUrl && this.state === ConnectionState.Disconnected) {\r\n            this.regionUrl = regionUrl;\r\n            yield fetch(toHttpUrl(regionUrl), {\r\n              method: 'HEAD'\r\n            });\r\n            this.log.debug(\"prepared connection to \".concat(regionUrl), this.logContext);\r\n          }\r\n        } else {\r\n          yield fetch(toHttpUrl(url), {\r\n            method: 'HEAD'\r\n          });\r\n        }\r\n      } catch (e) {\r\n        this.log.warn('could not prepare connection', Object.assign(Object.assign({}, this.logContext), {\r\n          error: e\r\n        }));\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * retrieves a participant by identity\r\n   * @param identity\r\n   * @returns\r\n   */\r\n  getParticipantByIdentity(identity) {\r\n    if (this.localParticipant.identity === identity) {\r\n      return this.localParticipant;\r\n    }\r\n    return this.remoteParticipants.get(identity);\r\n  }\r\n  clearConnectionFutures() {\r\n    this.connectFuture = undefined;\r\n  }\r\n  /**\r\n   * @internal for testing\r\n   */\r\n  simulateScenario(scenario, arg) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      let postAction = () => {};\r\n      let req;\r\n      switch (scenario) {\r\n        case 'signal-reconnect':\r\n          // @ts-expect-error function is private\r\n          yield this.engine.client.handleOnClose('simulate disconnect');\r\n          break;\r\n        case 'speaker':\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'speakerUpdate',\r\n              value: 3\r\n            }\r\n          });\r\n          break;\r\n        case 'node-failure':\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'nodeFailure',\r\n              value: true\r\n            }\r\n          });\r\n          break;\r\n        case 'server-leave':\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'serverLeave',\r\n              value: true\r\n            }\r\n          });\r\n          break;\r\n        case 'migration':\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'migration',\r\n              value: true\r\n            }\r\n          });\r\n          break;\r\n        case 'resume-reconnect':\r\n          this.engine.failNext();\r\n          // @ts-expect-error function is private\r\n          yield this.engine.client.handleOnClose('simulate resume-disconnect');\r\n          break;\r\n        case 'disconnect-signal-on-resume':\r\n          postAction = () => __awaiter(this, void 0, void 0, function* () {\r\n            // @ts-expect-error function is private\r\n            yield this.engine.client.handleOnClose('simulate resume-disconnect');\r\n          });\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'disconnectSignalOnResume',\r\n              value: true\r\n            }\r\n          });\r\n          break;\r\n        case 'disconnect-signal-on-resume-no-messages':\r\n          postAction = () => __awaiter(this, void 0, void 0, function* () {\r\n            // @ts-expect-error function is private\r\n            yield this.engine.client.handleOnClose('simulate resume-disconnect');\r\n          });\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'disconnectSignalOnResumeNoMessages',\r\n              value: true\r\n            }\r\n          });\r\n          break;\r\n        case 'full-reconnect':\r\n          this.engine.fullReconnectOnNext = true;\r\n          // @ts-expect-error function is private\r\n          yield this.engine.client.handleOnClose('simulate full-reconnect');\r\n          break;\r\n        case 'force-tcp':\r\n        case 'force-tls':\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'switchCandidateProtocol',\r\n              value: scenario === 'force-tls' ? 2 : 1\r\n            }\r\n          });\r\n          postAction = () => __awaiter(this, void 0, void 0, function* () {\r\n            const onLeave = this.engine.client.onLeave;\r\n            if (onLeave) {\r\n              onLeave(new LeaveRequest({\r\n                reason: DisconnectReason.CLIENT_INITIATED,\r\n                action: LeaveRequest_Action.RECONNECT\r\n              }));\r\n            }\r\n          });\r\n          break;\r\n        case 'subscriber-bandwidth':\r\n          if (arg === undefined || typeof arg !== 'number') {\r\n            throw new Error('subscriber-bandwidth requires a number as argument');\r\n          }\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'subscriberBandwidth',\r\n              value: numberToBigInt(arg)\r\n            }\r\n          });\r\n          break;\r\n        case 'leave-full-reconnect':\r\n          req = new SimulateScenario({\r\n            scenario: {\r\n              case: 'leaveRequestFullReconnect',\r\n              value: true\r\n            }\r\n          });\r\n      }\r\n      if (req) {\r\n        yield this.engine.client.sendSimulateScenario(req);\r\n        yield postAction();\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Returns true if audio playback is enabled\r\n   */\r\n  get canPlaybackAudio() {\r\n    return this.audioEnabled;\r\n  }\r\n  /**\r\n   * Returns true if video playback is enabled\r\n   */\r\n  get canPlaybackVideo() {\r\n    return !this.isVideoPlaybackBlocked;\r\n  }\r\n  getActiveDevice(kind) {\r\n    return this.localParticipant.activeDeviceMap.get(kind);\r\n  }\r\n  /**\r\n   * Switches all active devices used in this room to the given device.\r\n   *\r\n   * Note: setting AudioOutput is not supported on some browsers. See [setSinkId](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId#browser_compatibility)\r\n   *\r\n   * @param kind use `videoinput` for camera track,\r\n   *  `audioinput` for microphone track,\r\n   *  `audiooutput` to set speaker for all incoming audio tracks\r\n   * @param deviceId\r\n   */\r\n  switchActiveDevice(kind_1, deviceId_1) {\r\n    return __awaiter(this, arguments, void 0, function (kind, deviceId) {\r\n      var _this3 = this;\r\n      let exact = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\r\n      return function* () {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        var _h;\r\n        let success = true;\r\n        let needsUpdateWithoutTracks = false;\r\n        const deviceConstraint = exact ? {\r\n          exact: deviceId\r\n        } : deviceId;\r\n        if (kind === 'audioinput') {\r\n          needsUpdateWithoutTracks = _this3.localParticipant.audioTrackPublications.size === 0;\r\n          const prevDeviceId = (_a = _this3.getActiveDevice(kind)) !== null && _a !== void 0 ? _a : _this3.options.audioCaptureDefaults.deviceId;\r\n          _this3.options.audioCaptureDefaults.deviceId = deviceConstraint;\r\n          const tracks = Array.from(_this3.localParticipant.audioTrackPublications.values()).filter(track => track.source === Track.Source.Microphone);\r\n          try {\r\n            success = (yield Promise.all(tracks.map(t => {\r\n              var _a;\r\n              return (_a = t.audioTrack) === null || _a === void 0 ? void 0 : _a.setDeviceId(deviceConstraint);\r\n            }))).every(val => val === true);\r\n          } catch (e) {\r\n            _this3.options.audioCaptureDefaults.deviceId = prevDeviceId;\r\n            throw e;\r\n          }\r\n        } else if (kind === 'videoinput') {\r\n          needsUpdateWithoutTracks = _this3.localParticipant.videoTrackPublications.size === 0;\r\n          const prevDeviceId = (_b = _this3.getActiveDevice(kind)) !== null && _b !== void 0 ? _b : _this3.options.videoCaptureDefaults.deviceId;\r\n          _this3.options.videoCaptureDefaults.deviceId = deviceConstraint;\r\n          const tracks = Array.from(_this3.localParticipant.videoTrackPublications.values()).filter(track => track.source === Track.Source.Camera);\r\n          try {\r\n            success = (yield Promise.all(tracks.map(t => {\r\n              var _a;\r\n              return (_a = t.videoTrack) === null || _a === void 0 ? void 0 : _a.setDeviceId(deviceConstraint);\r\n            }))).every(val => val === true);\r\n          } catch (e) {\r\n            _this3.options.videoCaptureDefaults.deviceId = prevDeviceId;\r\n            throw e;\r\n          }\r\n        } else if (kind === 'audiooutput') {\r\n          if (!supportsSetSinkId() && !_this3.options.webAudioMix || _this3.options.webAudioMix && _this3.audioContext && !('setSinkId' in _this3.audioContext)) {\r\n            throw new Error('cannot switch audio output, setSinkId not supported');\r\n          }\r\n          if (_this3.options.webAudioMix) {\r\n            // setting `default` for web audio output doesn't work, so we need to normalize the id before\r\n            deviceId = (_c = yield DeviceManager.getInstance().normalizeDeviceId('audiooutput', deviceId)) !== null && _c !== void 0 ? _c : '';\r\n          }\r\n          (_d = (_h = _this3.options).audioOutput) !== null && _d !== void 0 ? _d : _h.audioOutput = {};\r\n          const prevDeviceId = (_e = _this3.getActiveDevice(kind)) !== null && _e !== void 0 ? _e : _this3.options.audioOutput.deviceId;\r\n          _this3.options.audioOutput.deviceId = deviceId;\r\n          try {\r\n            if (_this3.options.webAudioMix) {\r\n              // @ts-expect-error setSinkId is not yet in the typescript type of AudioContext\r\n              (_f = _this3.audioContext) === null || _f === void 0 ? void 0 : _f.setSinkId(deviceId);\r\n            }\r\n            // also set audio output on all audio elements, even if webAudioMix is enabled in order to workaround echo cancellation not working on chrome with non-default output devices\r\n            // see https://issues.chromium.org/issues/40252911#comment7\r\n            yield Promise.all(Array.from(_this3.remoteParticipants.values()).map(p => p.setAudioOutput({\r\n              deviceId\r\n            })));\r\n          } catch (e) {\r\n            _this3.options.audioOutput.deviceId = prevDeviceId;\r\n            throw e;\r\n          }\r\n        }\r\n        if (needsUpdateWithoutTracks || kind === 'audiooutput') {\r\n          // if there are not active tracks yet or we're switching audiooutput, we need to manually update the active device map here as changing audio output won't result in a track restart\r\n          _this3.localParticipant.activeDeviceMap.set(kind, kind === 'audiooutput' && ((_g = _this3.options.audioOutput) === null || _g === void 0 ? void 0 : _g.deviceId) || deviceId);\r\n          _this3.emit(RoomEvent.ActiveDeviceChanged, kind, deviceId);\r\n        }\r\n        return success;\r\n      }();\r\n    });\r\n  }\r\n  setupLocalParticipantEvents() {\r\n    this.localParticipant.on(ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).on(ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).on(ParticipantEvent.AttributesChanged, this.onLocalAttributesChanged).on(ParticipantEvent.TrackMuted, this.onLocalTrackMuted).on(ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).on(ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).on(ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).on(ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).on(ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).on(ParticipantEvent.AudioStreamAcquired, this.startAudio).on(ParticipantEvent.ChatMessage, this.onLocalChatMessageSent).on(ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged);\r\n  }\r\n  recreateEngine() {\r\n    var _a;\r\n    (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\r\n    /* @ts-ignore */\r\n    this.engine = undefined;\r\n    this.isResuming = false;\r\n    // clear out existing remote participants, since they may have attached\r\n    // the old engine\r\n    this.remoteParticipants.clear();\r\n    this.sidToIdentity.clear();\r\n    this.bufferedEvents = [];\r\n    this.maybeCreateEngine();\r\n  }\r\n  onTrackAdded(mediaTrack, stream, receiver) {\r\n    // don't fire onSubscribed when connecting\r\n    // WebRTC fires onTrack as soon as setRemoteDescription is called on the offer\r\n    // at that time, ICE connectivity has not been established so the track is not\r\n    // technically subscribed.\r\n    // We'll defer these events until when the room is connected or eventually disconnected.\r\n    if (this.state === ConnectionState.Connecting || this.state === ConnectionState.Reconnecting) {\r\n      const reconnectedHandler = () => {\r\n        this.onTrackAdded(mediaTrack, stream, receiver);\r\n        cleanup();\r\n      };\r\n      const cleanup = () => {\r\n        this.off(RoomEvent.Reconnected, reconnectedHandler);\r\n        this.off(RoomEvent.Connected, reconnectedHandler);\r\n        this.off(RoomEvent.Disconnected, cleanup);\r\n      };\r\n      this.once(RoomEvent.Reconnected, reconnectedHandler);\r\n      this.once(RoomEvent.Connected, reconnectedHandler);\r\n      this.once(RoomEvent.Disconnected, cleanup);\r\n      return;\r\n    }\r\n    if (this.state === ConnectionState.Disconnected) {\r\n      this.log.warn('skipping incoming track after Room disconnected', this.logContext);\r\n      return;\r\n    }\r\n    if (mediaTrack.readyState === 'ended') {\r\n      this.log.info('skipping incoming track as it already ended', this.logContext);\r\n      return;\r\n    }\r\n    const parts = unpackStreamId(stream.id);\r\n    const participantSid = parts[0];\r\n    let streamId = parts[1];\r\n    let trackId = mediaTrack.id;\r\n    // firefox will get streamId (pID|trackId) instead of (pID|streamId) as it doesn't support sync tracks by stream\r\n    // and generates its own track id instead of infer from sdp track id.\r\n    if (streamId && streamId.startsWith('TR')) trackId = streamId;\r\n    if (participantSid === this.localParticipant.sid) {\r\n      this.log.warn('tried to create RemoteParticipant for local participant', this.logContext);\r\n      return;\r\n    }\r\n    const participant = Array.from(this.remoteParticipants.values()).find(p => p.sid === participantSid);\r\n    if (!participant) {\r\n      this.log.error(\"Tried to add a track for a participant, that's not present. Sid: \".concat(participantSid), this.logContext);\r\n      return;\r\n    }\r\n    let adaptiveStreamSettings;\r\n    if (this.options.adaptiveStream) {\r\n      if (typeof this.options.adaptiveStream === 'object') {\r\n        adaptiveStreamSettings = this.options.adaptiveStream;\r\n      } else {\r\n        adaptiveStreamSettings = {};\r\n      }\r\n    }\r\n    participant.addSubscribedMediaTrack(mediaTrack, trackId, stream, receiver, adaptiveStreamSettings);\r\n  }\r\n  handleDisconnect() {\r\n    let shouldStopTracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\r\n    let reason = arguments.length > 1 ? arguments[1] : undefined;\r\n    var _a;\r\n    this.clearConnectionReconcile();\r\n    this.isResuming = false;\r\n    this.bufferedEvents = [];\r\n    this.transcriptionReceivedTimes.clear();\r\n    if (this.state === ConnectionState.Disconnected) {\r\n      return;\r\n    }\r\n    this.regionUrl = undefined;\r\n    try {\r\n      this.remoteParticipants.forEach(p => {\r\n        p.trackPublications.forEach(pub => {\r\n          p.unpublishTrack(pub.trackSid);\r\n        });\r\n      });\r\n      this.localParticipant.trackPublications.forEach(pub => {\r\n        var _a, _b, _c;\r\n        if (pub.track) {\r\n          this.localParticipant.unpublishTrack(pub.track, shouldStopTracks);\r\n        }\r\n        if (shouldStopTracks) {\r\n          (_a = pub.track) === null || _a === void 0 ? void 0 : _a.detach();\r\n          (_b = pub.track) === null || _b === void 0 ? void 0 : _b.stop();\r\n        } else {\r\n          (_c = pub.track) === null || _c === void 0 ? void 0 : _c.stopMonitor();\r\n        }\r\n      });\r\n      this.localParticipant.off(ParticipantEvent.ParticipantMetadataChanged, this.onLocalParticipantMetadataChanged).off(ParticipantEvent.ParticipantNameChanged, this.onLocalParticipantNameChanged).off(ParticipantEvent.AttributesChanged, this.onLocalAttributesChanged).off(ParticipantEvent.TrackMuted, this.onLocalTrackMuted).off(ParticipantEvent.TrackUnmuted, this.onLocalTrackUnmuted).off(ParticipantEvent.LocalTrackPublished, this.onLocalTrackPublished).off(ParticipantEvent.LocalTrackUnpublished, this.onLocalTrackUnpublished).off(ParticipantEvent.ConnectionQualityChanged, this.onLocalConnectionQualityChanged).off(ParticipantEvent.MediaDevicesError, this.onMediaDevicesError).off(ParticipantEvent.AudioStreamAcquired, this.startAudio).off(ParticipantEvent.ChatMessage, this.onLocalChatMessageSent).off(ParticipantEvent.ParticipantPermissionsChanged, this.onLocalParticipantPermissionsChanged);\r\n      this.localParticipant.trackPublications.clear();\r\n      this.localParticipant.videoTrackPublications.clear();\r\n      this.localParticipant.audioTrackPublications.clear();\r\n      this.remoteParticipants.clear();\r\n      this.sidToIdentity.clear();\r\n      this.activeSpeakers = [];\r\n      if (this.audioContext && typeof this.options.webAudioMix === 'boolean') {\r\n        this.audioContext.close();\r\n        this.audioContext = undefined;\r\n      }\r\n      if (isWeb()) {\r\n        window.removeEventListener('beforeunload', this.onPageLeave);\r\n        window.removeEventListener('pagehide', this.onPageLeave);\r\n        window.removeEventListener('freeze', this.onPageLeave);\r\n        (_a = navigator.mediaDevices) === null || _a === void 0 ? void 0 : _a.removeEventListener('devicechange', this.handleDeviceChange);\r\n      }\r\n    } finally {\r\n      this.setAndEmitConnectionState(ConnectionState.Disconnected);\r\n      this.emit(RoomEvent.Disconnected, reason);\r\n    }\r\n  }\r\n  handleParticipantDisconnected(identity, participant) {\r\n    var _a;\r\n    // remove and send event\r\n    this.remoteParticipants.delete(identity);\r\n    if (!participant) {\r\n      return;\r\n    }\r\n    participant.trackPublications.forEach(publication => {\r\n      participant.unpublishTrack(publication.trackSid, true);\r\n    });\r\n    this.emit(RoomEvent.ParticipantDisconnected, participant);\r\n    participant.setDisconnected();\r\n    (_a = this.localParticipant) === null || _a === void 0 ? void 0 : _a.handleParticipantDisconnected(participant.identity);\r\n  }\r\n  handleStreamHeader(streamHeader, participantIdentity) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      if (streamHeader.contentHeader.case === 'byteHeader') {\r\n        const streamHandlerCallback = this.byteStreamHandlers.get(streamHeader.topic);\r\n        if (!streamHandlerCallback) {\r\n          this.log.debug('ignoring incoming byte stream due to no handler for topic', streamHeader.topic);\r\n          return;\r\n        }\r\n        let streamController;\r\n        const info = {\r\n          id: streamHeader.streamId,\r\n          name: (_a = streamHeader.contentHeader.value.name) !== null && _a !== void 0 ? _a : 'unknown',\r\n          mimeType: streamHeader.mimeType,\r\n          size: streamHeader.totalLength ? Number(streamHeader.totalLength) : undefined,\r\n          topic: streamHeader.topic,\r\n          timestamp: bigIntToNumber(streamHeader.timestamp),\r\n          attributes: streamHeader.attributes\r\n        };\r\n        const stream = new ReadableStream({\r\n          start: controller => {\r\n            streamController = controller;\r\n            this.byteStreamControllers.set(streamHeader.streamId, {\r\n              info,\r\n              controller: streamController,\r\n              startTime: Date.now()\r\n            });\r\n          }\r\n        });\r\n        streamHandlerCallback(new ByteStreamReader(info, stream, bigIntToNumber(streamHeader.totalLength)), {\r\n          identity: participantIdentity\r\n        });\r\n      } else if (streamHeader.contentHeader.case === 'textHeader') {\r\n        const streamHandlerCallback = this.textStreamHandlers.get(streamHeader.topic);\r\n        if (!streamHandlerCallback) {\r\n          this.log.debug('ignoring incoming text stream due to no handler for topic', streamHeader.topic);\r\n          return;\r\n        }\r\n        let streamController;\r\n        const info = {\r\n          id: streamHeader.streamId,\r\n          mimeType: streamHeader.mimeType,\r\n          size: streamHeader.totalLength ? Number(streamHeader.totalLength) : undefined,\r\n          topic: streamHeader.topic,\r\n          timestamp: Number(streamHeader.timestamp),\r\n          attributes: streamHeader.attributes\r\n        };\r\n        const stream = new ReadableStream({\r\n          start: controller => {\r\n            streamController = controller;\r\n            this.textStreamControllers.set(streamHeader.streamId, {\r\n              info,\r\n              controller: streamController,\r\n              startTime: Date.now()\r\n            });\r\n          }\r\n        });\r\n        streamHandlerCallback(new TextStreamReader(info, stream, bigIntToNumber(streamHeader.totalLength)), {\r\n          identity: participantIdentity\r\n        });\r\n      }\r\n    });\r\n  }\r\n  handleStreamChunk(chunk) {\r\n    const fileBuffer = this.byteStreamControllers.get(chunk.streamId);\r\n    if (fileBuffer) {\r\n      if (chunk.content.length > 0) {\r\n        fileBuffer.controller.enqueue(chunk);\r\n      }\r\n    }\r\n    const textBuffer = this.textStreamControllers.get(chunk.streamId);\r\n    if (textBuffer) {\r\n      if (chunk.content.length > 0) {\r\n        textBuffer.controller.enqueue(chunk);\r\n      }\r\n    }\r\n  }\r\n  handleStreamTrailer(trailer) {\r\n    const textBuffer = this.textStreamControllers.get(trailer.streamId);\r\n    if (textBuffer) {\r\n      textBuffer.info.attributes = Object.assign(Object.assign({}, textBuffer.info.attributes), trailer.attributes);\r\n      textBuffer.controller.close();\r\n      this.textStreamControllers.delete(trailer.streamId);\r\n    }\r\n    const fileBuffer = this.byteStreamControllers.get(trailer.streamId);\r\n    if (fileBuffer) {\r\n      {\r\n        fileBuffer.info.attributes = Object.assign(Object.assign({}, fileBuffer.info.attributes), trailer.attributes);\r\n        fileBuffer.controller.close();\r\n        this.byteStreamControllers.delete(trailer.streamId);\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * attempt to select the default devices if the previously selected devices are no longer available after a device change event\r\n   */\r\n  selectDefaultDevices() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c;\r\n      const previousDevices = DeviceManager.getInstance().previousDevices;\r\n      // check for available devices, but don't request permissions in order to avoid prompts for kinds that haven't been used before\r\n      const availableDevices = yield DeviceManager.getInstance().getDevices(undefined, false);\r\n      const browser = getBrowser();\r\n      if ((browser === null || browser === void 0 ? void 0 : browser.name) === 'Chrome' && browser.os !== 'iOS') {\r\n        for (let availableDevice of availableDevices) {\r\n          const previousDevice = previousDevices.find(info => info.deviceId === availableDevice.deviceId);\r\n          if (previousDevice && previousDevice.label !== '' && previousDevice.kind === availableDevice.kind && previousDevice.label !== availableDevice.label) {\r\n            // label has changed on device the same deviceId, indicating that the default device has changed on the OS level\r\n            if (this.getActiveDevice(availableDevice.kind) === 'default') {\r\n              // emit an active device change event only if the selected output device is actually on `default`\r\n              this.emit(RoomEvent.ActiveDeviceChanged, availableDevice.kind, availableDevice.deviceId);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      const kinds = ['audiooutput', 'audioinput', 'videoinput'];\r\n      for (let kind of kinds) {\r\n        const targetSource = kindToSource(kind);\r\n        const targetPublication = this.localParticipant.getTrackPublication(targetSource);\r\n        if (targetPublication && ((_a = targetPublication.track) === null || _a === void 0 ? void 0 : _a.isUserProvided)) {\r\n          // if the track is user provided, we don't want to switch devices on behalf of the user\r\n          continue;\r\n        }\r\n        const devicesOfKind = availableDevices.filter(d => d.kind === kind);\r\n        const activeDevice = this.getActiveDevice(kind);\r\n        if (activeDevice === ((_b = previousDevices.filter(info => info.kind === kind)[0]) === null || _b === void 0 ? void 0 : _b.deviceId)) {\r\n          // in  Safari the first device is always the default, so we assume a user on the default device would like to switch to the default once it changes\r\n          // FF doesn't emit an event when the default device changes, so we perform the same best effort and switch to the new device once connected and if it's the first in the array\r\n          if (devicesOfKind.length > 0 && ((_c = devicesOfKind[0]) === null || _c === void 0 ? void 0 : _c.deviceId) !== activeDevice) {\r\n            yield this.switchActiveDevice(kind, devicesOfKind[0].deviceId);\r\n            continue;\r\n          }\r\n        }\r\n        if (kind === 'audioinput' && !isSafariBased() || kind === 'videoinput') {\r\n          // airpods on Safari need special handling for audioinput as the track doesn't end as soon as you take them out\r\n          continue;\r\n        }\r\n        // switch to first available device if previously active device is not available any more\r\n        if (devicesOfKind.length > 0 && !devicesOfKind.find(deviceInfo => deviceInfo.deviceId === this.getActiveDevice(kind)) && (\r\n        // avoid switching audio output on safari without explicit user action as it leads to slowed down audio playback\r\n        kind !== 'audiooutput' || !isSafariBased())) {\r\n          yield this.switchActiveDevice(kind, devicesOfKind[0].deviceId);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  acquireAudioContext() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      if (typeof this.options.webAudioMix !== 'boolean' && this.options.webAudioMix.audioContext) {\r\n        // override audio context with custom audio context if supplied by user\r\n        this.audioContext = this.options.webAudioMix.audioContext;\r\n      } else if (!this.audioContext || this.audioContext.state === 'closed') {\r\n        // by using an AudioContext, it reduces lag on audio elements\r\n        // https://stackoverflow.com/questions/9811429/html5-audio-tag-on-safari-has-a-delay/54119854#54119854\r\n        this.audioContext = (_a = getNewAudioContext()) !== null && _a !== void 0 ? _a : undefined;\r\n      }\r\n      if (this.options.webAudioMix) {\r\n        this.remoteParticipants.forEach(participant => participant.setAudioContext(this.audioContext));\r\n      }\r\n      this.localParticipant.setAudioContext(this.audioContext);\r\n      if (this.audioContext && this.audioContext.state === 'suspended') {\r\n        // for iOS a newly created AudioContext is always in `suspended` state.\r\n        // we try our best to resume the context here, if that doesn't work, we just continue with regular processing\r\n        try {\r\n          yield Promise.race([this.audioContext.resume(), sleep(200)]);\r\n        } catch (e) {\r\n          this.log.warn('Could not resume audio context', Object.assign(Object.assign({}, this.logContext), {\r\n            error: e\r\n          }));\r\n        }\r\n      }\r\n      const newContextIsRunning = ((_b = this.audioContext) === null || _b === void 0 ? void 0 : _b.state) === 'running';\r\n      if (newContextIsRunning !== this.canPlaybackAudio) {\r\n        this.audioEnabled = newContextIsRunning;\r\n        this.emit(RoomEvent.AudioPlaybackStatusChanged, newContextIsRunning);\r\n      }\r\n    });\r\n  }\r\n  createParticipant(identity, info) {\r\n    var _a;\r\n    let participant;\r\n    if (info) {\r\n      participant = RemoteParticipant.fromParticipantInfo(this.engine.client, info, {\r\n        loggerContextCb: () => this.logContext,\r\n        loggerName: this.options.loggerName\r\n      });\r\n    } else {\r\n      participant = new RemoteParticipant(this.engine.client, '', identity, undefined, undefined, undefined, {\r\n        loggerContextCb: () => this.logContext,\r\n        loggerName: this.options.loggerName\r\n      });\r\n    }\r\n    if (this.options.webAudioMix) {\r\n      participant.setAudioContext(this.audioContext);\r\n    }\r\n    if ((_a = this.options.audioOutput) === null || _a === void 0 ? void 0 : _a.deviceId) {\r\n      participant.setAudioOutput(this.options.audioOutput).catch(e => this.log.warn(\"Could not set audio output: \".concat(e.message), this.logContext));\r\n    }\r\n    return participant;\r\n  }\r\n  getOrCreateParticipant(identity, info) {\r\n    if (this.remoteParticipants.has(identity)) {\r\n      const existingParticipant = this.remoteParticipants.get(identity);\r\n      if (info) {\r\n        const wasUpdated = existingParticipant.updateInfo(info);\r\n        if (wasUpdated) {\r\n          this.sidToIdentity.set(info.sid, info.identity);\r\n        }\r\n      }\r\n      return existingParticipant;\r\n    }\r\n    const participant = this.createParticipant(identity, info);\r\n    this.remoteParticipants.set(identity, participant);\r\n    this.sidToIdentity.set(info.sid, info.identity);\r\n    // if we have valid info and the participant wasn't in the map before, we can assume the participant is new\r\n    // firing here to make sure that `ParticipantConnected` fires before the initial track events\r\n    this.emitWhenConnected(RoomEvent.ParticipantConnected, participant);\r\n    // also forward events\r\n    // trackPublished is only fired for tracks added after both local participant\r\n    // and remote participant joined the room\r\n    participant.on(ParticipantEvent.TrackPublished, trackPublication => {\r\n      this.emitWhenConnected(RoomEvent.TrackPublished, trackPublication, participant);\r\n    }).on(ParticipantEvent.TrackSubscribed, (track, publication) => {\r\n      // monitor playback status\r\n      if (track.kind === Track.Kind.Audio) {\r\n        track.on(TrackEvent.AudioPlaybackStarted, this.handleAudioPlaybackStarted);\r\n        track.on(TrackEvent.AudioPlaybackFailed, this.handleAudioPlaybackFailed);\r\n      } else if (track.kind === Track.Kind.Video) {\r\n        track.on(TrackEvent.VideoPlaybackFailed, this.handleVideoPlaybackFailed);\r\n        track.on(TrackEvent.VideoPlaybackStarted, this.handleVideoPlaybackStarted);\r\n      }\r\n      this.emit(RoomEvent.TrackSubscribed, track, publication, participant);\r\n    }).on(ParticipantEvent.TrackUnpublished, publication => {\r\n      this.emit(RoomEvent.TrackUnpublished, publication, participant);\r\n    }).on(ParticipantEvent.TrackUnsubscribed, (track, publication) => {\r\n      this.emit(RoomEvent.TrackUnsubscribed, track, publication, participant);\r\n    }).on(ParticipantEvent.TrackMuted, pub => {\r\n      this.emitWhenConnected(RoomEvent.TrackMuted, pub, participant);\r\n    }).on(ParticipantEvent.TrackUnmuted, pub => {\r\n      this.emitWhenConnected(RoomEvent.TrackUnmuted, pub, participant);\r\n    }).on(ParticipantEvent.ParticipantMetadataChanged, metadata => {\r\n      this.emitWhenConnected(RoomEvent.ParticipantMetadataChanged, metadata, participant);\r\n    }).on(ParticipantEvent.ParticipantNameChanged, name => {\r\n      this.emitWhenConnected(RoomEvent.ParticipantNameChanged, name, participant);\r\n    }).on(ParticipantEvent.AttributesChanged, changedAttributes => {\r\n      this.emitWhenConnected(RoomEvent.ParticipantAttributesChanged, changedAttributes, participant);\r\n    }).on(ParticipantEvent.ConnectionQualityChanged, quality => {\r\n      this.emitWhenConnected(RoomEvent.ConnectionQualityChanged, quality, participant);\r\n    }).on(ParticipantEvent.ParticipantPermissionsChanged, prevPermissions => {\r\n      this.emitWhenConnected(RoomEvent.ParticipantPermissionsChanged, prevPermissions, participant);\r\n    }).on(ParticipantEvent.TrackSubscriptionStatusChanged, (pub, status) => {\r\n      this.emitWhenConnected(RoomEvent.TrackSubscriptionStatusChanged, pub, status, participant);\r\n    }).on(ParticipantEvent.TrackSubscriptionFailed, (trackSid, error) => {\r\n      this.emit(RoomEvent.TrackSubscriptionFailed, trackSid, participant, error);\r\n    }).on(ParticipantEvent.TrackSubscriptionPermissionChanged, (pub, status) => {\r\n      this.emitWhenConnected(RoomEvent.TrackSubscriptionPermissionChanged, pub, status, participant);\r\n    }).on(ParticipantEvent.Active, () => {\r\n      this.emitWhenConnected(RoomEvent.ParticipantActive, participant);\r\n      if (participant.kind === ParticipantInfo_Kind.AGENT) {\r\n        this.localParticipant.setActiveAgent(participant);\r\n      }\r\n    });\r\n    // update info at the end after callbacks have been set up\r\n    if (info) {\r\n      participant.updateInfo(info);\r\n    }\r\n    return participant;\r\n  }\r\n  sendSyncState() {\r\n    const remoteTracks = Array.from(this.remoteParticipants.values()).reduce((acc, participant) => {\r\n      acc.push(...participant.getTrackPublications()); // FIXME would be nice to have this return RemoteTrackPublications directly instead of the type cast\r\n      return acc;\r\n    }, []);\r\n    const localTracks = this.localParticipant.getTrackPublications(); // FIXME would be nice to have this return LocalTrackPublications directly instead of the type cast\r\n    this.engine.sendSyncState(remoteTracks, localTracks);\r\n  }\r\n  /**\r\n   * After resuming, we'll need to notify the server of the current\r\n   * subscription settings.\r\n   */\r\n  updateSubscriptions() {\r\n    for (const p of this.remoteParticipants.values()) {\r\n      for (const pub of p.videoTrackPublications.values()) {\r\n        if (pub.isSubscribed && isRemotePub(pub)) {\r\n          pub.emitTrackUpdate();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  getRemoteParticipantBySid(sid) {\r\n    const identity = this.sidToIdentity.get(sid);\r\n    if (identity) {\r\n      return this.remoteParticipants.get(identity);\r\n    }\r\n  }\r\n  registerConnectionReconcile() {\r\n    this.clearConnectionReconcile();\r\n    let consecutiveFailures = 0;\r\n    this.connectionReconcileInterval = CriticalTimers.setInterval(() => {\r\n      if (\r\n      // ensure we didn't tear it down\r\n      !this.engine ||\r\n      // engine detected close, but Room missed it\r\n      this.engine.isClosed ||\r\n      // transports failed without notifying engine\r\n      !this.engine.verifyTransport()) {\r\n        consecutiveFailures++;\r\n        this.log.warn('detected connection state mismatch', Object.assign(Object.assign({}, this.logContext), {\r\n          numFailures: consecutiveFailures,\r\n          engine: this.engine ? {\r\n            closed: this.engine.isClosed,\r\n            transportsConnected: this.engine.verifyTransport()\r\n          } : undefined\r\n        }));\r\n        if (consecutiveFailures >= 3) {\r\n          this.recreateEngine();\r\n          this.handleDisconnect(this.options.stopLocalTrackOnUnpublish, DisconnectReason.STATE_MISMATCH);\r\n        }\r\n      } else {\r\n        consecutiveFailures = 0;\r\n      }\r\n    }, connectionReconcileFrequency);\r\n  }\r\n  clearConnectionReconcile() {\r\n    if (this.connectionReconcileInterval) {\r\n      CriticalTimers.clearInterval(this.connectionReconcileInterval);\r\n    }\r\n  }\r\n  setAndEmitConnectionState(state) {\r\n    if (state === this.state) {\r\n      // unchanged\r\n      return false;\r\n    }\r\n    this.state = state;\r\n    this.emit(RoomEvent.ConnectionStateChanged, this.state);\r\n    return true;\r\n  }\r\n  emitBufferedEvents() {\r\n    this.bufferedEvents.forEach(_ref3 => {\r\n      let [ev, args] = _ref3;\r\n      this.emit(ev, ...args);\r\n    });\r\n    this.bufferedEvents = [];\r\n  }\r\n  emitWhenConnected(event) {\r\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\r\n      args[_key2 - 1] = arguments[_key2];\r\n    }\r\n    if (this.state === ConnectionState.Reconnecting || this.isResuming || !this.engine || this.engine.pendingReconnect) {\r\n      // in case the room is reconnecting, buffer the events by firing them later after emitting RoomEvent.Reconnected\r\n      this.bufferedEvents.push([event, args]);\r\n    } else if (this.state === ConnectionState.Connected) {\r\n      return this.emit(event, ...args);\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * Allows to populate a room with simulated participants.\r\n   * No actual connection to a server will be established, all state is\r\n   * @experimental\r\n   */\r\n  simulateParticipants(options) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      const publishOptions = Object.assign({\r\n        audio: true,\r\n        video: true,\r\n        useRealTracks: false\r\n      }, options.publish);\r\n      const participantOptions = Object.assign({\r\n        count: 9,\r\n        audio: false,\r\n        video: true,\r\n        aspectRatios: [1.66, 1.7, 1.3]\r\n      }, options.participants);\r\n      this.handleDisconnect();\r\n      this.roomInfo = new Room$1({\r\n        sid: 'RM_SIMULATED',\r\n        name: 'simulated-room',\r\n        emptyTimeout: 0,\r\n        maxParticipants: 0,\r\n        creationTime: protoInt64.parse(new Date().getTime()),\r\n        metadata: '',\r\n        numParticipants: 1,\r\n        numPublishers: 1,\r\n        turnPassword: '',\r\n        enabledCodecs: [],\r\n        activeRecording: false\r\n      });\r\n      this.localParticipant.updateInfo(new ParticipantInfo({\r\n        identity: 'simulated-local',\r\n        name: 'local-name'\r\n      }));\r\n      this.setupLocalParticipantEvents();\r\n      this.emit(RoomEvent.SignalConnected);\r\n      this.emit(RoomEvent.Connected);\r\n      this.setAndEmitConnectionState(ConnectionState.Connected);\r\n      if (publishOptions.video) {\r\n        const camPub = new LocalTrackPublication(Track.Kind.Video, new TrackInfo({\r\n          source: TrackSource.CAMERA,\r\n          sid: Math.floor(Math.random() * 10000).toString(),\r\n          type: TrackType.AUDIO,\r\n          name: 'video-dummy'\r\n        }), new LocalVideoTrack(publishOptions.useRealTracks ? (yield window.navigator.mediaDevices.getUserMedia({\r\n          video: true\r\n        })).getVideoTracks()[0] : createDummyVideoStreamTrack(160 * ((_a = participantOptions.aspectRatios[0]) !== null && _a !== void 0 ? _a : 1), 160, true, true), undefined, false, {\r\n          loggerName: this.options.loggerName,\r\n          loggerContextCb: () => this.logContext\r\n        }), {\r\n          loggerName: this.options.loggerName,\r\n          loggerContextCb: () => this.logContext\r\n        });\r\n        // @ts-ignore\r\n        this.localParticipant.addTrackPublication(camPub);\r\n        this.localParticipant.emit(ParticipantEvent.LocalTrackPublished, camPub);\r\n      }\r\n      if (publishOptions.audio) {\r\n        const audioPub = new LocalTrackPublication(Track.Kind.Audio, new TrackInfo({\r\n          source: TrackSource.MICROPHONE,\r\n          sid: Math.floor(Math.random() * 10000).toString(),\r\n          type: TrackType.AUDIO\r\n        }), new LocalAudioTrack(publishOptions.useRealTracks ? (yield navigator.mediaDevices.getUserMedia({\r\n          audio: true\r\n        })).getAudioTracks()[0] : getEmptyAudioStreamTrack(), undefined, false, this.audioContext, {\r\n          loggerName: this.options.loggerName,\r\n          loggerContextCb: () => this.logContext\r\n        }), {\r\n          loggerName: this.options.loggerName,\r\n          loggerContextCb: () => this.logContext\r\n        });\r\n        // @ts-ignore\r\n        this.localParticipant.addTrackPublication(audioPub);\r\n        this.localParticipant.emit(ParticipantEvent.LocalTrackPublished, audioPub);\r\n      }\r\n      for (let i = 0; i < participantOptions.count - 1; i += 1) {\r\n        let info = new ParticipantInfo({\r\n          sid: Math.floor(Math.random() * 10000).toString(),\r\n          identity: \"simulated-\".concat(i),\r\n          state: ParticipantInfo_State.ACTIVE,\r\n          tracks: [],\r\n          joinedAt: protoInt64.parse(Date.now())\r\n        });\r\n        const p = this.getOrCreateParticipant(info.identity, info);\r\n        if (participantOptions.video) {\r\n          const dummyVideo = createDummyVideoStreamTrack(160 * ((_b = participantOptions.aspectRatios[i % participantOptions.aspectRatios.length]) !== null && _b !== void 0 ? _b : 1), 160, false, true);\r\n          const videoTrack = new TrackInfo({\r\n            source: TrackSource.CAMERA,\r\n            sid: Math.floor(Math.random() * 10000).toString(),\r\n            type: TrackType.AUDIO\r\n          });\r\n          p.addSubscribedMediaTrack(dummyVideo, videoTrack.sid, new MediaStream([dummyVideo]), new RTCRtpReceiver());\r\n          info.tracks = [...info.tracks, videoTrack];\r\n        }\r\n        if (participantOptions.audio) {\r\n          const dummyTrack = getEmptyAudioStreamTrack();\r\n          const audioTrack = new TrackInfo({\r\n            source: TrackSource.MICROPHONE,\r\n            sid: Math.floor(Math.random() * 10000).toString(),\r\n            type: TrackType.AUDIO\r\n          });\r\n          p.addSubscribedMediaTrack(dummyTrack, audioTrack.sid, new MediaStream([dummyTrack]), new RTCRtpReceiver());\r\n          info.tracks = [...info.tracks, audioTrack];\r\n        }\r\n        p.updateInfo(info);\r\n      }\r\n    });\r\n  }\r\n  // /** @internal */\r\n  emit(event) {\r\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\r\n      args[_key3 - 1] = arguments[_key3];\r\n    }\r\n    // active speaker updates are too spammy\r\n    if (event !== RoomEvent.ActiveSpeakersChanged && event !== RoomEvent.TranscriptionReceived) {\r\n      // only extract logContext from arguments in order to avoid logging the whole object tree\r\n      const minimizedArgs = mapArgs(args).filter(arg => arg !== undefined);\r\n      this.log.debug(\"room event \".concat(event), Object.assign(Object.assign({}, this.logContext), {\r\n        event,\r\n        args: minimizedArgs\r\n      }));\r\n    }\r\n    return super.emit(event, ...args);\r\n  }\r\n}\r\nRoom.cleanupRegistry = typeof FinalizationRegistry !== 'undefined' && new FinalizationRegistry(cleanup => {\r\n  cleanup();\r\n});\r\nfunction mapArgs(args) {\r\n  return args.map(arg => {\r\n    if (!arg) {\r\n      return;\r\n    }\r\n    if (Array.isArray(arg)) {\r\n      return mapArgs(arg);\r\n    }\r\n    if (typeof arg === 'object') {\r\n      return 'logContext' in arg ? arg.logContext : undefined;\r\n    }\r\n    return arg;\r\n  });\r\n}\r\n\r\n// This file was generated from JSON Schema using quicktype, do not modify it directly.\r\n// The code generation lives at https://github.com/livekit/attribute-definitions\r\n//\r\n// To parse this data:\r\n//\r\n//   import { Convert, AgentAttributes, TranscriptionAttributes } from \"./file\";\r\n//\r\n//   const agentAttributes = Convert.toAgentAttributes(json);\r\n//   const transcriptionAttributes = Convert.toTranscriptionAttributes(json);\r\n// Converts JSON strings to/from your types\r\nclass Convert {\r\n  static toAgentAttributes(json) {\r\n    return JSON.parse(json);\r\n  }\r\n  static agentAttributesToJson(value) {\r\n    return JSON.stringify(value);\r\n  }\r\n  static toTranscriptionAttributes(json) {\r\n    return JSON.parse(json);\r\n  }\r\n  static transcriptionAttributesToJson(value) {\r\n    return JSON.stringify(value);\r\n  }\r\n}\r\n\r\nvar attributeTypings = /*#__PURE__*/Object.freeze({\r\n  __proto__: null,\r\n  Convert: Convert\r\n});\r\n\r\nvar CheckStatus;\r\n(function (CheckStatus) {\r\n  CheckStatus[CheckStatus[\"IDLE\"] = 0] = \"IDLE\";\r\n  CheckStatus[CheckStatus[\"RUNNING\"] = 1] = \"RUNNING\";\r\n  CheckStatus[CheckStatus[\"SKIPPED\"] = 2] = \"SKIPPED\";\r\n  CheckStatus[CheckStatus[\"SUCCESS\"] = 3] = \"SUCCESS\";\r\n  CheckStatus[CheckStatus[\"FAILED\"] = 4] = \"FAILED\";\r\n})(CheckStatus || (CheckStatus = {}));\r\nclass Checker extends eventsExports.EventEmitter {\r\n  constructor(url, token) {\r\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    super();\r\n    this.status = CheckStatus.IDLE;\r\n    this.logs = [];\r\n    this.options = {};\r\n    this.url = url;\r\n    this.token = token;\r\n    this.name = this.constructor.name;\r\n    this.room = new Room(options.roomOptions);\r\n    this.connectOptions = options.connectOptions;\r\n    this.options = options;\r\n  }\r\n  run(onComplete) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.status !== CheckStatus.IDLE) {\r\n        throw Error('check is running already');\r\n      }\r\n      this.setStatus(CheckStatus.RUNNING);\r\n      try {\r\n        yield this.perform();\r\n      } catch (err) {\r\n        if (err instanceof Error) {\r\n          if (this.options.errorsAsWarnings) {\r\n            this.appendWarning(err.message);\r\n          } else {\r\n            this.appendError(err.message);\r\n          }\r\n        }\r\n      }\r\n      yield this.disconnect();\r\n      // sleep for a bit to ensure disconnect\r\n      yield new Promise(resolve => setTimeout(resolve, 500));\r\n      // @ts-ignore\r\n      if (this.status !== CheckStatus.SKIPPED) {\r\n        this.setStatus(this.isSuccess() ? CheckStatus.SUCCESS : CheckStatus.FAILED);\r\n      }\r\n      if (onComplete) {\r\n        onComplete();\r\n      }\r\n      return this.getInfo();\r\n    });\r\n  }\r\n  isSuccess() {\r\n    return !this.logs.some(l => l.level === 'error');\r\n  }\r\n  connect(url) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.room.state === ConnectionState.Connected) {\r\n        return this.room;\r\n      }\r\n      if (!url) {\r\n        url = this.url;\r\n      }\r\n      yield this.room.connect(url, this.token, this.connectOptions);\r\n      return this.room;\r\n    });\r\n  }\r\n  disconnect() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      if (this.room && this.room.state !== ConnectionState.Disconnected) {\r\n        yield this.room.disconnect();\r\n        // wait for it to go through\r\n        yield new Promise(resolve => setTimeout(resolve, 500));\r\n      }\r\n    });\r\n  }\r\n  skip() {\r\n    this.setStatus(CheckStatus.SKIPPED);\r\n  }\r\n  switchProtocol(protocol) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      let hasReconnecting = false;\r\n      let hasReconnected = false;\r\n      this.room.on(RoomEvent.Reconnecting, () => {\r\n        hasReconnecting = true;\r\n      });\r\n      this.room.once(RoomEvent.Reconnected, () => {\r\n        hasReconnected = true;\r\n      });\r\n      this.room.simulateScenario(\"force-\".concat(protocol));\r\n      yield new Promise(resolve => setTimeout(resolve, 1000));\r\n      if (!hasReconnecting) {\r\n        // no need to wait for reconnection\r\n        return;\r\n      }\r\n      // wait for 10 seconds for reconnection\r\n      const timeout = Date.now() + 10000;\r\n      while (Date.now() < timeout) {\r\n        if (hasReconnected) {\r\n          return;\r\n        }\r\n        yield sleep(100);\r\n      }\r\n      throw new Error(\"Could not reconnect using \".concat(protocol, \" protocol after 10 seconds\"));\r\n    });\r\n  }\r\n  appendMessage(message) {\r\n    this.logs.push({\r\n      level: 'info',\r\n      message\r\n    });\r\n    this.emit('update', this.getInfo());\r\n  }\r\n  appendWarning(message) {\r\n    this.logs.push({\r\n      level: 'warning',\r\n      message\r\n    });\r\n    this.emit('update', this.getInfo());\r\n  }\r\n  appendError(message) {\r\n    this.logs.push({\r\n      level: 'error',\r\n      message\r\n    });\r\n    this.emit('update', this.getInfo());\r\n  }\r\n  setStatus(status) {\r\n    this.status = status;\r\n    this.emit('update', this.getInfo());\r\n  }\r\n  get engine() {\r\n    var _a;\r\n    return (_a = this.room) === null || _a === void 0 ? void 0 : _a.engine;\r\n  }\r\n  getInfo() {\r\n    return {\r\n      logs: this.logs,\r\n      name: this.name,\r\n      status: this.status,\r\n      description: this.description\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Checks for connections quality to closests Cloud regions and determining the best quality\r\n */\r\nclass CloudRegionCheck extends Checker {\r\n  get description() {\r\n    return 'Cloud regions';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const regionProvider = new RegionUrlProvider(this.url, this.token);\r\n      if (!regionProvider.isCloud()) {\r\n        this.skip();\r\n        return;\r\n      }\r\n      const regionStats = [];\r\n      const seenUrls = new Set();\r\n      for (let i = 0; i < 3; i++) {\r\n        const regionUrl = yield regionProvider.getNextBestRegionUrl();\r\n        if (!regionUrl) {\r\n          break;\r\n        }\r\n        if (seenUrls.has(regionUrl)) {\r\n          continue;\r\n        }\r\n        seenUrls.add(regionUrl);\r\n        const stats = yield this.checkCloudRegion(regionUrl);\r\n        this.appendMessage(\"\".concat(stats.region, \" RTT: \").concat(stats.rtt, \"ms, duration: \").concat(stats.duration, \"ms\"));\r\n        regionStats.push(stats);\r\n      }\r\n      regionStats.sort((a, b) => {\r\n        return (a.duration - b.duration) * 0.5 + (a.rtt - b.rtt) * 0.5;\r\n      });\r\n      const bestRegion = regionStats[0];\r\n      this.bestStats = bestRegion;\r\n      this.appendMessage(\"best Cloud region: \".concat(bestRegion.region));\r\n    });\r\n  }\r\n  getInfo() {\r\n    const info = super.getInfo();\r\n    info.data = this.bestStats;\r\n    return info;\r\n  }\r\n  checkCloudRegion(url) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      yield this.connect(url);\r\n      if (this.options.protocol === 'tcp') {\r\n        yield this.switchProtocol('tcp');\r\n      }\r\n      const region = (_a = this.room.serverInfo) === null || _a === void 0 ? void 0 : _a.region;\r\n      if (!region) {\r\n        throw new Error('Region not found');\r\n      }\r\n      const writer = yield this.room.localParticipant.streamText({\r\n        topic: 'test'\r\n      });\r\n      const chunkSize = 1000; // each chunk is about 1000 bytes\r\n      const totalSize = 1000000; // approximately 1MB of data\r\n      const numChunks = totalSize / chunkSize; // will yield 1000 chunks\r\n      const chunkData = 'A'.repeat(chunkSize); // create a string of 1000 'A' characters\r\n      const startTime = Date.now();\r\n      for (let i = 0; i < numChunks; i++) {\r\n        yield writer.write(chunkData);\r\n      }\r\n      yield writer.close();\r\n      const endTime = Date.now();\r\n      const stats = yield (_b = this.room.engine.pcManager) === null || _b === void 0 ? void 0 : _b.publisher.getStats();\r\n      const regionStats = {\r\n        region: region,\r\n        rtt: 10000,\r\n        duration: endTime - startTime\r\n      };\r\n      stats === null || stats === void 0 ? void 0 : stats.forEach(stat => {\r\n        if (stat.type === 'candidate-pair' && stat.nominated) {\r\n          regionStats.rtt = stat.currentRoundTripTime * 1000;\r\n        }\r\n      });\r\n      yield this.disconnect();\r\n      return regionStats;\r\n    });\r\n  }\r\n}\r\n\r\nconst TEST_DURATION = 10000;\r\nclass ConnectionProtocolCheck extends Checker {\r\n  get description() {\r\n    return 'Connection via UDP vs TCP';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const udpStats = yield this.checkConnectionProtocol('udp');\r\n      const tcpStats = yield this.checkConnectionProtocol('tcp');\r\n      this.bestStats = udpStats;\r\n      // udp should is the better protocol typically. however, we'd prefer TCP when either of these conditions are true:\r\n      // 1. the bandwidth limitation is worse on UDP by 500ms\r\n      // 2. the packet loss is higher on UDP by 1%\r\n      if (udpStats.qualityLimitationDurations.bandwidth - tcpStats.qualityLimitationDurations.bandwidth > 0.5 || (udpStats.packetsLost - tcpStats.packetsLost) / udpStats.packetsSent > 0.01) {\r\n        this.appendMessage('best connection quality via tcp');\r\n        this.bestStats = tcpStats;\r\n      } else {\r\n        this.appendMessage('best connection quality via udp');\r\n      }\r\n      const stats = this.bestStats;\r\n      this.appendMessage(\"upstream bitrate: \".concat((stats.bitrateTotal / stats.count / 1000 / 1000).toFixed(2), \" mbps\"));\r\n      this.appendMessage(\"RTT: \".concat((stats.rttTotal / stats.count * 1000).toFixed(2), \" ms\"));\r\n      this.appendMessage(\"jitter: \".concat((stats.jitterTotal / stats.count * 1000).toFixed(2), \" ms\"));\r\n      if (stats.packetsLost > 0) {\r\n        this.appendWarning(\"packets lost: \".concat((stats.packetsLost / stats.packetsSent * 100).toFixed(2), \"%\"));\r\n      }\r\n      if (stats.qualityLimitationDurations.bandwidth > 1) {\r\n        this.appendWarning(\"bandwidth limited \".concat((stats.qualityLimitationDurations.bandwidth / (TEST_DURATION / 1000) * 100).toFixed(2), \"%\"));\r\n      }\r\n      if (stats.qualityLimitationDurations.cpu > 0) {\r\n        this.appendWarning(\"cpu limited \".concat((stats.qualityLimitationDurations.cpu / (TEST_DURATION / 1000) * 100).toFixed(2), \"%\"));\r\n      }\r\n    });\r\n  }\r\n  getInfo() {\r\n    const info = super.getInfo();\r\n    info.data = this.bestStats;\r\n    return info;\r\n  }\r\n  checkConnectionProtocol(protocol) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      yield this.connect();\r\n      if (protocol === 'tcp') {\r\n        yield this.switchProtocol('tcp');\r\n      } else {\r\n        yield this.switchProtocol('udp');\r\n      }\r\n      // create a canvas with animated content\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = 1280;\r\n      canvas.height = 720;\r\n      const ctx = canvas.getContext('2d');\r\n      if (!ctx) {\r\n        throw new Error('Could not get canvas context');\r\n      }\r\n      let hue = 0;\r\n      const animate = () => {\r\n        hue = (hue + 1) % 360;\r\n        ctx.fillStyle = \"hsl(\".concat(hue, \", 100%, 50%)\");\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        requestAnimationFrame(animate);\r\n      };\r\n      animate();\r\n      // create video track from canvas\r\n      const stream = canvas.captureStream(30); // 30fps\r\n      const videoTrack = stream.getVideoTracks()[0];\r\n      // publish to room\r\n      const pub = yield this.room.localParticipant.publishTrack(videoTrack, {\r\n        simulcast: false,\r\n        degradationPreference: 'maintain-resolution',\r\n        videoEncoding: {\r\n          maxBitrate: 2000000\r\n        }\r\n      });\r\n      const track = pub.track;\r\n      const protocolStats = {\r\n        protocol,\r\n        packetsLost: 0,\r\n        packetsSent: 0,\r\n        qualityLimitationDurations: {},\r\n        rttTotal: 0,\r\n        jitterTotal: 0,\r\n        bitrateTotal: 0,\r\n        count: 0\r\n      };\r\n      // gather stats once a second\r\n      const interval = setInterval(() => __awaiter(this, void 0, void 0, function* () {\r\n        const stats = yield track.getRTCStatsReport();\r\n        stats === null || stats === void 0 ? void 0 : stats.forEach(stat => {\r\n          if (stat.type === 'outbound-rtp') {\r\n            protocolStats.packetsSent = stat.packetsSent;\r\n            protocolStats.qualityLimitationDurations = stat.qualityLimitationDurations;\r\n            protocolStats.bitrateTotal += stat.targetBitrate;\r\n            protocolStats.count++;\r\n          } else if (stat.type === 'remote-inbound-rtp') {\r\n            protocolStats.packetsLost = stat.packetsLost;\r\n            protocolStats.rttTotal += stat.roundTripTime;\r\n            protocolStats.jitterTotal += stat.jitter;\r\n          }\r\n        });\r\n      }), 1000);\r\n      // wait a bit to gather stats\r\n      yield new Promise(resolve => setTimeout(resolve, TEST_DURATION));\r\n      clearInterval(interval);\r\n      videoTrack.stop();\r\n      canvas.remove();\r\n      yield this.disconnect();\r\n      return protocolStats;\r\n    });\r\n  }\r\n}\r\n\r\nclass PublishAudioCheck extends Checker {\r\n  get description() {\r\n    return 'Can publish audio';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const room = yield this.connect();\r\n      const track = yield createLocalAudioTrack();\r\n      const trackIsSilent = yield detectSilence(track, 1000);\r\n      if (trackIsSilent) {\r\n        throw new Error('unable to detect audio from microphone');\r\n      }\r\n      this.appendMessage('detected audio from microphone');\r\n      room.localParticipant.publishTrack(track);\r\n      // wait for a few seconds to publish\r\n      yield new Promise(resolve => setTimeout(resolve, 3000));\r\n      // verify RTC stats that it's publishing\r\n      const stats = yield (_a = track.sender) === null || _a === void 0 ? void 0 : _a.getStats();\r\n      if (!stats) {\r\n        throw new Error('Could not get RTCStats');\r\n      }\r\n      let numPackets = 0;\r\n      stats.forEach(stat => {\r\n        if (stat.type === 'outbound-rtp' && (stat.kind === 'audio' || !stat.kind && stat.mediaType === 'audio')) {\r\n          numPackets = stat.packetsSent;\r\n        }\r\n      });\r\n      if (numPackets === 0) {\r\n        throw new Error('Could not determine packets are sent');\r\n      }\r\n      this.appendMessage(\"published \".concat(numPackets, \" audio packets\"));\r\n    });\r\n  }\r\n}\r\n\r\nclass PublishVideoCheck extends Checker {\r\n  get description() {\r\n    return 'Can publish video';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const room = yield this.connect();\r\n      const track = yield createLocalVideoTrack();\r\n      // check if we have video from camera\r\n      yield this.checkForVideo(track.mediaStreamTrack);\r\n      room.localParticipant.publishTrack(track);\r\n      // wait for a few seconds to publish\r\n      yield new Promise(resolve => setTimeout(resolve, 5000));\r\n      // verify RTC stats that it's publishing\r\n      const stats = yield (_a = track.sender) === null || _a === void 0 ? void 0 : _a.getStats();\r\n      if (!stats) {\r\n        throw new Error('Could not get RTCStats');\r\n      }\r\n      let numPackets = 0;\r\n      stats.forEach(stat => {\r\n        if (stat.type === 'outbound-rtp' && (stat.kind === 'video' || !stat.kind && stat.mediaType === 'video')) {\r\n          numPackets += stat.packetsSent;\r\n        }\r\n      });\r\n      if (numPackets === 0) {\r\n        throw new Error('Could not determine packets are sent');\r\n      }\r\n      this.appendMessage(\"published \".concat(numPackets, \" video packets\"));\r\n    });\r\n  }\r\n  checkForVideo(track) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const stream = new MediaStream();\r\n      stream.addTrack(track.clone());\r\n      // Create video element to check frames\r\n      const video = document.createElement('video');\r\n      video.srcObject = stream;\r\n      video.muted = true;\r\n      yield new Promise(resolve => {\r\n        video.onplay = () => {\r\n          setTimeout(() => {\r\n            var _a, _b, _c, _d;\r\n            const canvas = document.createElement('canvas');\r\n            const settings = track.getSettings();\r\n            const width = (_b = (_a = settings.width) !== null && _a !== void 0 ? _a : video.videoWidth) !== null && _b !== void 0 ? _b : 1280;\r\n            const height = (_d = (_c = settings.height) !== null && _c !== void 0 ? _c : video.videoHeight) !== null && _d !== void 0 ? _d : 720;\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            const ctx = canvas.getContext('2d');\r\n            // Draw video frame to canvas\r\n            ctx.drawImage(video, 0, 0);\r\n            // Get image data and check if all pixels are black\r\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n            const data = imageData.data;\r\n            let isAllBlack = true;\r\n            for (let i = 0; i < data.length; i += 4) {\r\n              if (data[i] !== 0 || data[i + 1] !== 0 || data[i + 2] !== 0) {\r\n                isAllBlack = false;\r\n                break;\r\n              }\r\n            }\r\n            if (isAllBlack) {\r\n              this.appendError('camera appears to be producing only black frames');\r\n            } else {\r\n              this.appendMessage('received video frames');\r\n            }\r\n            resolve();\r\n          }, 1000);\r\n        };\r\n        video.play();\r\n      });\r\n      video.remove();\r\n    });\r\n  }\r\n}\r\n\r\nclass ReconnectCheck extends Checker {\r\n  get description() {\r\n    return 'Resuming connection after interruption';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a;\r\n      const room = yield this.connect();\r\n      let reconnectingTriggered = false;\r\n      let reconnected = false;\r\n      let reconnectResolver;\r\n      const reconnectTimeout = new Promise(resolve => {\r\n        setTimeout(resolve, 5000);\r\n        reconnectResolver = resolve;\r\n      });\r\n      const handleReconnecting = () => {\r\n        reconnectingTriggered = true;\r\n      };\r\n      room.on(RoomEvent.SignalReconnecting, handleReconnecting).on(RoomEvent.Reconnecting, handleReconnecting).on(RoomEvent.Reconnected, () => {\r\n        reconnected = true;\r\n        reconnectResolver(true);\r\n      });\r\n      (_a = room.engine.client.ws) === null || _a === void 0 ? void 0 : _a.close();\r\n      const onClose = room.engine.client.onClose;\r\n      if (onClose) {\r\n        onClose('');\r\n      }\r\n      yield reconnectTimeout;\r\n      if (!reconnectingTriggered) {\r\n        throw new Error('Did not attempt to reconnect');\r\n      } else if (!reconnected || room.state !== ConnectionState.Connected) {\r\n        this.appendWarning('reconnection is only possible in Redis-based configurations');\r\n        throw new Error('Not able to reconnect');\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass TURNCheck extends Checker {\r\n  get description() {\r\n    return 'Can connect via TURN';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b;\r\n      const signalClient = new SignalClient();\r\n      const joinRes = yield signalClient.join(this.url, this.token, {\r\n        autoSubscribe: true,\r\n        maxRetries: 0,\r\n        e2eeEnabled: false,\r\n        websocketTimeout: 15000\r\n      });\r\n      let hasTLS = false;\r\n      let hasTURN = false;\r\n      let hasSTUN = false;\r\n      for (let iceServer of joinRes.iceServers) {\r\n        for (let url of iceServer.urls) {\r\n          if (url.startsWith('turn:')) {\r\n            hasTURN = true;\r\n            hasSTUN = true;\r\n          } else if (url.startsWith('turns:')) {\r\n            hasTURN = true;\r\n            hasSTUN = true;\r\n            hasTLS = true;\r\n          }\r\n          if (url.startsWith('stun:')) {\r\n            hasSTUN = true;\r\n          }\r\n        }\r\n      }\r\n      if (!hasSTUN) {\r\n        this.appendWarning('No STUN servers configured on server side.');\r\n      } else if (hasTURN && !hasTLS) {\r\n        this.appendWarning('TURN is configured server side, but TURN/TLS is unavailable.');\r\n      }\r\n      yield signalClient.close();\r\n      if (((_b = (_a = this.connectOptions) === null || _a === void 0 ? void 0 : _a.rtcConfig) === null || _b === void 0 ? void 0 : _b.iceServers) || hasTURN) {\r\n        yield this.room.connect(this.url, this.token, {\r\n          rtcConfig: {\r\n            iceTransportPolicy: 'relay'\r\n          }\r\n        });\r\n      } else {\r\n        this.appendWarning('No TURN servers configured.');\r\n        this.skip();\r\n        yield new Promise(resolve => setTimeout(resolve, 0));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nclass WebRTCCheck extends Checker {\r\n  get description() {\r\n    return 'Establishing WebRTC connection';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      let hasTcp = false;\r\n      let hasIpv4Udp = false;\r\n      this.room.on(RoomEvent.SignalConnected, () => {\r\n        const prevTrickle = this.room.engine.client.onTrickle;\r\n        this.room.engine.client.onTrickle = (sd, target) => {\r\n          if (sd.candidate) {\r\n            const candidate = new RTCIceCandidate(sd);\r\n            let str = \"\".concat(candidate.protocol, \" \").concat(candidate.address, \":\").concat(candidate.port, \" \").concat(candidate.type);\r\n            if (candidate.address) {\r\n              if (isIPPrivate(candidate.address)) {\r\n                str += ' (private)';\r\n              } else {\r\n                if (candidate.protocol === 'tcp' && candidate.tcpType === 'passive') {\r\n                  hasTcp = true;\r\n                  str += ' (passive)';\r\n                } else if (candidate.protocol === 'udp') {\r\n                  hasIpv4Udp = true;\r\n                }\r\n              }\r\n            }\r\n            this.appendMessage(str);\r\n          }\r\n          if (prevTrickle) {\r\n            prevTrickle(sd, target);\r\n          }\r\n        };\r\n        if (this.room.engine.pcManager) {\r\n          this.room.engine.pcManager.subscriber.onIceCandidateError = ev => {\r\n            if (ev instanceof RTCPeerConnectionIceErrorEvent) {\r\n              this.appendWarning(\"error with ICE candidate: \".concat(ev.errorCode, \" \").concat(ev.errorText, \" \").concat(ev.url));\r\n            }\r\n          };\r\n        }\r\n      });\r\n      try {\r\n        yield this.connect();\r\n        livekitLogger.info('now the room is connected');\r\n      } catch (err) {\r\n        this.appendWarning('ports need to be open on firewall in order to connect.');\r\n        throw err;\r\n      }\r\n      if (!hasTcp) {\r\n        this.appendWarning('Server is not configured for ICE/TCP');\r\n      }\r\n      if (!hasIpv4Udp) {\r\n        this.appendWarning('No public IPv4 UDP candidates were found. Your server is likely not configured correctly');\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction isIPPrivate(address) {\r\n  const parts = address.split('.');\r\n  if (parts.length === 4) {\r\n    if (parts[0] === '10') {\r\n      return true;\r\n    } else if (parts[0] === '192' && parts[1] === '168') {\r\n      return true;\r\n    } else if (parts[0] === '172') {\r\n      const second = parseInt(parts[1], 10);\r\n      if (second >= 16 && second <= 31) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nclass WebSocketCheck extends Checker {\r\n  get description() {\r\n    return 'Connecting to signal connection via WebSocket';\r\n  }\r\n  perform() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      var _a, _b, _c;\r\n      if (this.url.startsWith('ws:') || this.url.startsWith('http:')) {\r\n        this.appendWarning('Server is insecure, clients may block connections to it');\r\n      }\r\n      let signalClient = new SignalClient();\r\n      const joinRes = yield signalClient.join(this.url, this.token, {\r\n        autoSubscribe: true,\r\n        maxRetries: 0,\r\n        e2eeEnabled: false,\r\n        websocketTimeout: 15000\r\n      });\r\n      this.appendMessage(\"Connected to server, version \".concat(joinRes.serverVersion, \".\"));\r\n      if (((_a = joinRes.serverInfo) === null || _a === void 0 ? void 0 : _a.edition) === ServerInfo_Edition.Cloud && ((_b = joinRes.serverInfo) === null || _b === void 0 ? void 0 : _b.region)) {\r\n        this.appendMessage(\"LiveKit Cloud: \".concat((_c = joinRes.serverInfo) === null || _c === void 0 ? void 0 : _c.region));\r\n      }\r\n      yield signalClient.close();\r\n    });\r\n  }\r\n}\r\n\r\nclass ConnectionCheck extends eventsExports.EventEmitter {\r\n  constructor(url, token) {\r\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n    super();\r\n    this.options = {};\r\n    this.checkResults = new Map();\r\n    this.url = url;\r\n    this.token = token;\r\n    this.options = options;\r\n  }\r\n  getNextCheckId() {\r\n    const nextId = this.checkResults.size;\r\n    this.checkResults.set(nextId, {\r\n      logs: [],\r\n      status: CheckStatus.IDLE,\r\n      name: '',\r\n      description: ''\r\n    });\r\n    return nextId;\r\n  }\r\n  updateCheck(checkId, info) {\r\n    this.checkResults.set(checkId, info);\r\n    this.emit('checkUpdate', checkId, info);\r\n  }\r\n  isSuccess() {\r\n    return Array.from(this.checkResults.values()).every(r => r.status !== CheckStatus.FAILED);\r\n  }\r\n  getResults() {\r\n    return Array.from(this.checkResults.values());\r\n  }\r\n  createAndRunCheck(check) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const checkId = this.getNextCheckId();\r\n      const test = new check(this.url, this.token, this.options);\r\n      const handleUpdate = info => {\r\n        this.updateCheck(checkId, info);\r\n      };\r\n      test.on('update', handleUpdate);\r\n      const result = yield test.run();\r\n      test.off('update', handleUpdate);\r\n      return result;\r\n    });\r\n  }\r\n  checkWebsocket() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.createAndRunCheck(WebSocketCheck);\r\n    });\r\n  }\r\n  checkWebRTC() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.createAndRunCheck(WebRTCCheck);\r\n    });\r\n  }\r\n  checkTURN() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.createAndRunCheck(TURNCheck);\r\n    });\r\n  }\r\n  checkReconnect() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.createAndRunCheck(ReconnectCheck);\r\n    });\r\n  }\r\n  checkPublishAudio() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.createAndRunCheck(PublishAudioCheck);\r\n    });\r\n  }\r\n  checkPublishVideo() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.createAndRunCheck(PublishVideoCheck);\r\n    });\r\n  }\r\n  checkConnectionProtocol() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      const info = yield this.createAndRunCheck(ConnectionProtocolCheck);\r\n      if (info.data && 'protocol' in info.data) {\r\n        const stats = info.data;\r\n        this.options.protocol = stats.protocol;\r\n      }\r\n      return info;\r\n    });\r\n  }\r\n  checkCloudRegion() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n      return this.createAndRunCheck(CloudRegionCheck);\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Try to analyze the local track to determine the facing mode of a track.\r\n *\r\n * @remarks\r\n * There is no property supported by all browsers to detect whether a video track originated from a user- or environment-facing camera device.\r\n * For this reason, we use the `facingMode` property when available, but will fall back on a string-based analysis of the device label to determine the facing mode.\r\n * If both methods fail, the default facing mode will be used.\r\n *\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints/facingMode | MDN docs on facingMode}\r\n * @experimental\r\n */\r\nfunction facingModeFromLocalTrack(localTrack) {\r\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var _a;\r\n  const track = isLocalTrack(localTrack) ? localTrack.mediaStreamTrack : localTrack;\r\n  const trackSettings = track.getSettings();\r\n  let result = {\r\n    facingMode: (_a = options.defaultFacingMode) !== null && _a !== void 0 ? _a : 'user',\r\n    confidence: 'low'\r\n  };\r\n  // 1. Try to get facingMode from track settings.\r\n  if ('facingMode' in trackSettings) {\r\n    const rawFacingMode = trackSettings.facingMode;\r\n    livekitLogger.trace('rawFacingMode', {\r\n      rawFacingMode\r\n    });\r\n    if (rawFacingMode && typeof rawFacingMode === 'string' && isFacingModeValue(rawFacingMode)) {\r\n      result = {\r\n        facingMode: rawFacingMode,\r\n        confidence: 'high'\r\n      };\r\n    }\r\n  }\r\n  // 2. If we don't have a high confidence we try to get the facing mode from the device label.\r\n  if (['low', 'medium'].includes(result.confidence)) {\r\n    livekitLogger.trace(\"Try to get facing mode from device label: (\".concat(track.label, \")\"));\r\n    const labelAnalysisResult = facingModeFromDeviceLabel(track.label);\r\n    if (labelAnalysisResult !== undefined) {\r\n      result = labelAnalysisResult;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nconst knownDeviceLabels = new Map([['obs virtual camera', {\r\n  facingMode: 'environment',\r\n  confidence: 'medium'\r\n}]]);\r\nconst knownDeviceLabelSections = new Map([['iphone', {\r\n  facingMode: 'environment',\r\n  confidence: 'medium'\r\n}], ['ipad', {\r\n  facingMode: 'environment',\r\n  confidence: 'medium'\r\n}]]);\r\n/**\r\n * Attempt to analyze the device label to determine the facing mode.\r\n *\r\n * @experimental\r\n */\r\nfunction facingModeFromDeviceLabel(deviceLabel) {\r\n  var _a;\r\n  const label = deviceLabel.trim().toLowerCase();\r\n  // Empty string is a valid device label but we can't infer anything from it.\r\n  if (label === '') {\r\n    return undefined;\r\n  }\r\n  // Can we match against widely known device labels.\r\n  if (knownDeviceLabels.has(label)) {\r\n    return knownDeviceLabels.get(label);\r\n  }\r\n  // Can we match against sections of the device label.\r\n  return (_a = Array.from(knownDeviceLabelSections.entries()).find(_ref => {\r\n    let [section] = _ref;\r\n    return label.includes(section);\r\n  })) === null || _a === void 0 ? void 0 : _a[1];\r\n}\r\nfunction isFacingModeValue(item) {\r\n  const allowedValues = ['user', 'environment', 'left', 'right'];\r\n  return item === undefined || allowedValues.includes(item);\r\n}\r\n\r\n\r\n//# sourceMappingURL=livekit-client.esm.mjs.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs\n");

/***/ })

};
;